//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/map/hash/TLongLongHashMap.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/TLongCollection.h"
#include "gnu/trove/function/TLongFunction.h"
#include "gnu/trove/impl/HashFunctions.h"
#include "gnu/trove/impl/hash/THash.h"
#include "gnu/trove/impl/hash/THashPrimitiveIterator.h"
#include "gnu/trove/impl/hash/TLongLongHash.h"
#include "gnu/trove/impl/hash/TPrimitiveHash.h"
#include "gnu/trove/iterator/TLongIterator.h"
#include "gnu/trove/iterator/TLongLongIterator.h"
#include "gnu/trove/map/TLongLongMap.h"
#include "gnu/trove/map/hash/TLongLongHashMap.h"
#include "gnu/trove/procedure/TLongLongProcedure.h"
#include "gnu/trove/procedure/TLongProcedure.h"
#include "gnu/trove/set/TLongSet.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

__attribute__((unused)) static jlong GnuTroveMapHashTLongLongHashMap_doPutWithLong_withLong_withInt_(GnuTroveMapHashTLongLongHashMap *self, jlong key, jlong value, jint index);

@interface GnuTroveMapHashTLongLongHashMap ()

- (jlong)doPutWithLong:(jlong)key
              withLong:(jlong)value
               withInt:(jint)index;
@end

@interface GnuTroveMapHashTLongLongHashMap_TKeyView () {
 @public
  GnuTroveMapHashTLongLongHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongLongHashMap_TKeyView, this$0_, GnuTroveMapHashTLongLongHashMap *)

@interface GnuTroveMapHashTLongLongHashMap_TKeyView_$1 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongLongHashMap_TKeyView_$1, val$buf_, JavaLangStringBuilder *)

@interface GnuTroveMapHashTLongLongHashMap_TValueView () {
 @public
  GnuTroveMapHashTLongLongHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongLongHashMap_TValueView, this$0_, GnuTroveMapHashTLongLongHashMap *)

@interface GnuTroveMapHashTLongLongHashMap_TValueView_$1 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongLongHashMap_TValueView_$1, val$buf_, JavaLangStringBuilder *)

@interface GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator () {
 @public
  GnuTroveMapHashTLongLongHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator, this$0_, GnuTroveMapHashTLongLongHashMap *)

@interface GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator () {
 @public
  GnuTroveMapHashTLongLongHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator, this$0_, GnuTroveMapHashTLongLongHashMap *)

@interface GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator () {
 @public
  GnuTroveMapHashTLongLongHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator, this$0_, GnuTroveMapHashTLongLongHashMap *)

@interface GnuTroveMapHashTLongLongHashMap_$1 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongLongHashMap_$1, val$buf_, JavaLangStringBuilder *)

@implementation GnuTroveMapHashTLongLongHashMap

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithInt:(jint)initialCapacity {
  return [super initWithInt:initialCapacity];
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor {
  return [super initWithInt:initialCapacity withFloat:loadFactor];
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor
                   withLong:(jlong)noEntryKey
                   withLong:(jlong)noEntryValue {
  return [super initWithInt:initialCapacity withFloat:loadFactor withLong:noEntryKey withLong:noEntryValue];
}

- (instancetype)initWithLongArray:(IOSLongArray *)keys
                    withLongArray:(IOSLongArray *)values {
  if (self = [super initWithInt:JavaLangMath_maxWithInt_withInt_(((IOSLongArray *) nil_chk(keys))->size_, ((IOSLongArray *) nil_chk(values))->size_)]) {
    jint size = JavaLangMath_minWithInt_withInt_(keys->size_, values->size_);
    for (jint i = 0; i < size; i++) {
      [self putWithLong:IOSLongArray_Get(keys, i) withLong:IOSLongArray_Get(values, i)];
    }
  }
  return self;
}

- (instancetype)initWithGnuTroveMapTLongLongMap:(id<GnuTroveMapTLongLongMap>)map {
  if (self = [super initWithInt:[((id<GnuTroveMapTLongLongMap>) nil_chk(map)) size]]) {
    if ([map isKindOfClass:[GnuTroveMapHashTLongLongHashMap class]]) {
      GnuTroveMapHashTLongLongHashMap *hashmap = (GnuTroveMapHashTLongLongHashMap *) check_class_cast(map, [GnuTroveMapHashTLongLongHashMap class]);
      self->_loadFactor_ = hashmap->_loadFactor_;
      self->no_entry_key_ = hashmap->no_entry_key_;
      self->no_entry_value_ = hashmap->no_entry_value_;
      if (self->no_entry_key_ != (jlong) 0) {
        JavaUtilArrays_fillWithLongArray_withLong_(_set_, self->no_entry_key_);
      }
      if (self->no_entry_value_ != (jlong) 0) {
        JavaUtilArrays_fillWithLongArray_withLong_(_values_, self->no_entry_value_);
      }
      [self setUpWithInt:J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(GnuTroveImplHashTHash_DEFAULT_CAPACITY / _loadFactor_))];
    }
    [self putAllWithGnuTroveMapTLongLongMap:map];
  }
  return self;
}

- (jint)setUpWithInt:(jint)initialCapacity {
  jint capacity;
  capacity = [super setUpWithInt:initialCapacity];
  GnuTroveMapHashTLongLongHashMap_setAndConsume__values_(self, [IOSLongArray newArrayWithLength:capacity]);
  return capacity;
}

- (void)rehashWithInt:(jint)newCapacity {
  jint oldCapacity = ((IOSLongArray *) nil_chk(_set_))->size_;
  IOSLongArray *oldKeys = _set_;
  IOSLongArray *oldVals = _values_;
  IOSByteArray *oldStates = _states_;
  GnuTroveImplHashTLongLongHash_setAndConsume__set_(self, [IOSLongArray newArrayWithLength:newCapacity]);
  GnuTroveMapHashTLongLongHashMap_setAndConsume__values_(self, [IOSLongArray newArrayWithLength:newCapacity]);
  GnuTroveImplHashTPrimitiveHash_setAndConsume__states_(self, [IOSByteArray newArrayWithLength:newCapacity]);
  for (jint i = oldCapacity; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(oldStates), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      jlong o = IOSLongArray_Get(oldKeys, i);
      jint index = [self insertKeyWithLong:o];
      *IOSLongArray_GetRef(_values_, index) = IOSLongArray_Get(nil_chk(oldVals), i);
    }
  }
}

- (jlong)putWithLong:(jlong)key
            withLong:(jlong)value {
  jint index = [self insertKeyWithLong:key];
  return GnuTroveMapHashTLongLongHashMap_doPutWithLong_withLong_withInt_(self, key, value, index);
}

- (jlong)putIfAbsentWithLong:(jlong)key
                    withLong:(jlong)value {
  jint index = [self insertKeyWithLong:key];
  if (index < 0) return IOSLongArray_Get(nil_chk(_values_), -index - 1);
  return GnuTroveMapHashTLongLongHashMap_doPutWithLong_withLong_withInt_(self, key, value, index);
}

- (jlong)doPutWithLong:(jlong)key
              withLong:(jlong)value
               withInt:(jint)index {
  return GnuTroveMapHashTLongLongHashMap_doPutWithLong_withLong_withInt_(self, key, value, index);
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  [self ensureCapacityWithInt:[((id<JavaUtilMap>) nil_chk(map)) size]];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([map entrySet])) {
    [self putWithLong:[((JavaLangLong *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) longLongValue] withLong:[((JavaLangLong *) nil_chk([entry_ getValue])) longLongValue]];
  }
}

- (void)putAllWithGnuTroveMapTLongLongMap:(id<GnuTroveMapTLongLongMap>)map {
  [self ensureCapacityWithInt:[((id<GnuTroveMapTLongLongMap>) nil_chk(map)) size]];
  id<GnuTroveIteratorTLongLongIterator> iter = [map iterator];
  while ([((id<GnuTroveIteratorTLongLongIterator>) nil_chk(iter)) hasNext]) {
    [iter advance];
    [self putWithLong:[iter key] withLong:[iter value]];
  }
}

- (jlong)getWithLong:(jlong)key {
  jint index = [self indexWithLong:key];
  return index < 0 ? no_entry_value_ : IOSLongArray_Get(nil_chk(_values_), index);
}

- (void)clear {
  [super clear];
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(_set_, 0, ((IOSLongArray *) nil_chk(_set_))->size_, no_entry_key_);
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(_values_, 0, ((IOSLongArray *) nil_chk(_values_))->size_, no_entry_value_);
  JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(_states_, 0, ((IOSByteArray *) nil_chk(_states_))->size_, GnuTroveImplHashTPrimitiveHash_FREE);
}

- (jboolean)isEmpty {
  return 0 == _size_;
}

- (jlong)removeWithLong:(jlong)key {
  jlong prev = no_entry_value_;
  jint index = [self indexWithLong:key];
  if (index >= 0) {
    prev = IOSLongArray_Get(nil_chk(_values_), index);
    [self removeAtWithInt:index];
  }
  return prev;
}

- (void)removeAtWithInt:(jint)index {
  *IOSLongArray_GetRef(nil_chk(_values_), index) = no_entry_value_;
  [super removeAtWithInt:index];
}

- (id<GnuTroveSetTLongSet>)keySet {
  return [[[GnuTroveMapHashTLongLongHashMap_TKeyView alloc] initWithGnuTroveMapHashTLongLongHashMap:self] autorelease];
}

- (IOSLongArray *)keys {
  IOSLongArray *keys = [IOSLongArray arrayWithLength:[self size]];
  if (keys->size_ == 0) {
    return keys;
  }
  IOSLongArray *k = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSLongArray *) nil_chk(k))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSLongArray_GetRef(keys, j++) = IOSLongArray_Get(k, i);
    }
  }
  return keys;
}

- (IOSLongArray *)keysWithLongArray:(IOSLongArray *)array {
  jint size = [self size];
  if (size == 0) {
    return array;
  }
  if (((IOSLongArray *) nil_chk(array))->size_ < size) {
    array = [IOSLongArray arrayWithLength:size];
  }
  IOSLongArray *keys = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSLongArray *) nil_chk(keys))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSLongArray_GetRef(array, j++) = IOSLongArray_Get(keys, i);
    }
  }
  return array;
}

- (id<GnuTroveTLongCollection>)valueCollection {
  return [[[GnuTroveMapHashTLongLongHashMap_TValueView alloc] initWithGnuTroveMapHashTLongLongHashMap:self] autorelease];
}

- (IOSLongArray *)values {
  IOSLongArray *vals = [IOSLongArray arrayWithLength:[self size]];
  if (vals->size_ == 0) {
    return vals;
  }
  IOSLongArray *v = _values_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSLongArray *) nil_chk(v))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSLongArray_GetRef(vals, j++) = IOSLongArray_Get(v, i);
    }
  }
  return vals;
}

- (IOSLongArray *)valuesWithLongArray:(IOSLongArray *)array {
  jint size = [self size];
  if (size == 0) {
    return array;
  }
  if (((IOSLongArray *) nil_chk(array))->size_ < size) {
    array = [IOSLongArray arrayWithLength:size];
  }
  IOSLongArray *v = _values_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSLongArray *) nil_chk(v))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSLongArray_GetRef(array, j++) = IOSLongArray_Get(v, i);
    }
  }
  return array;
}

- (jboolean)containsValueWithLong:(jlong)val {
  IOSByteArray *states = _states_;
  IOSLongArray *vals = _values_;
  for (jint i = ((IOSLongArray *) nil_chk(vals))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && val == IOSLongArray_Get(vals, i)) {
      return YES;
    }
  }
  return NO;
}

- (jboolean)containsKeyWithLong:(jlong)key {
  return [self containsWithLong:key];
}

- (id<GnuTroveIteratorTLongLongIterator>)iterator {
  return [[[GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator alloc] initWithGnuTroveMapHashTLongLongHashMap:self withGnuTroveMapHashTLongLongHashMap:self] autorelease];
}

- (jboolean)forEachKeyWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure {
  return [self forEachWithGnuTroveProcedureTLongProcedure:procedure];
}

- (jboolean)forEachValueWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure {
  IOSByteArray *states = _states_;
  IOSLongArray *values = _values_;
  for (jint i = ((IOSLongArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTLongProcedure>) nil_chk(procedure)) executeWithLong:IOSLongArray_Get(values, i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)forEachEntryWithGnuTroveProcedureTLongLongProcedure:(id<GnuTroveProcedureTLongLongProcedure>)procedure {
  IOSByteArray *states = _states_;
  IOSLongArray *keys = _set_;
  IOSLongArray *values = _values_;
  for (jint i = ((IOSLongArray *) nil_chk(keys))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTLongLongProcedure>) nil_chk(procedure)) executeWithLong:IOSLongArray_Get(keys, i) withLong:IOSLongArray_Get(nil_chk(values), i)]) {
      return NO;
    }
  }
  return YES;
}

- (void)transformValuesWithGnuTroveFunctionTLongFunction:(id<GnuTroveFunctionTLongFunction>)function {
  IOSByteArray *states = _states_;
  IOSLongArray *values = _values_;
  for (jint i = ((IOSLongArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSLongArray_GetRef(values, i) = [((id<GnuTroveFunctionTLongFunction>) nil_chk(function)) executeWithLong:IOSLongArray_Get(values, i)];
    }
  }
}

- (jboolean)retainEntriesWithGnuTroveProcedureTLongLongProcedure:(id<GnuTroveProcedureTLongLongProcedure>)procedure {
  jboolean modified = NO;
  IOSByteArray *states = _states_;
  IOSLongArray *keys = _set_;
  IOSLongArray *values = _values_;
  [self tempDisableAutoCompaction];
  @try {
    for (jint i = ((IOSLongArray *) nil_chk(keys))->size_; i-- > 0; ) {
      if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTLongLongProcedure>) nil_chk(procedure)) executeWithLong:IOSLongArray_Get(keys, i) withLong:IOSLongArray_Get(nil_chk(values), i)]) {
        [self removeAtWithInt:i];
        modified = YES;
      }
    }
  }
  @finally {
    [self reenableAutoCompactionWithBoolean:YES];
  }
  return modified;
}

- (jboolean)incrementWithLong:(jlong)key {
  return [self adjustValueWithLong:key withLong:(jlong) 1];
}

- (jboolean)adjustValueWithLong:(jlong)key
                       withLong:(jlong)amount {
  jint index = [self indexWithLong:key];
  if (index < 0) {
    return NO;
  }
  else {
    *IOSLongArray_GetRef(nil_chk(_values_), index) += amount;
    return YES;
  }
}

- (jlong)adjustOrPutValueWithLong:(jlong)key
                         withLong:(jlong)adjust_amount
                         withLong:(jlong)put_amount {
  jint index = [self insertKeyWithLong:key];
  jboolean isNewMapping;
  jlong newValue;
  if (index < 0) {
    index = -index - 1;
    newValue = (*IOSLongArray_GetRef(nil_chk(_values_), index) += adjust_amount);
    isNewMapping = NO;
  }
  else {
    newValue = (*IOSLongArray_GetRef(nil_chk(_values_), index) = put_amount);
    isNewMapping = YES;
  }
  jbyte previousState = IOSByteArray_Get(nil_chk(_states_), index);
  if (isNewMapping) {
    [self postInsertHookWithBoolean:consumeFreeSlot_];
  }
  return newValue;
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveMapTLongLongMap_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveMapTLongLongMap> that = (id<GnuTroveMapTLongLongMap>) check_protocol_cast(other, @protocol(GnuTroveMapTLongLongMap));
  if ([((id<GnuTroveMapTLongLongMap>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  IOSLongArray *values = _values_;
  IOSByteArray *states = _states_;
  jlong this_no_entry_value = [self getNoEntryValue];
  jlong that_no_entry_value = [that getNoEntryValue];
  for (jint i = ((IOSLongArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      jlong key = IOSLongArray_Get(nil_chk(_set_), i);
      jlong that_value = [that getWithLong:key];
      jlong this_value = IOSLongArray_Get(values, i);
      if ((this_value != that_value) && (this_value != this_no_entry_value) && (that_value != that_no_entry_value)) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSLongArray *) nil_chk(_values_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithLong_(IOSLongArray_Get(nil_chk(_set_), i)) ^ GnuTroveImplHashFunctions_hash__WithLong_(IOSLongArray_Get(_values_, i));
    }
  }
  return hashcode;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [self forEachEntryWithGnuTroveProcedureTLongLongProcedure:[[[GnuTroveMapHashTLongLongHashMap_$1 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeByteWithInt:0];
  [super writeExternalWithJavaIoObjectOutput:outArg];
  [outArg writeIntWithInt:_size_];
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      [outArg writeLongWithLong:IOSLongArray_Get(nil_chk(_set_), i)];
      [outArg writeLongWithLong:IOSLongArray_Get(nil_chk(_values_), i)];
    }
  }
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  [((id<JavaIoObjectInput>) nil_chk(inArg)) readByte];
  [super readExternalWithJavaIoObjectInput:inArg];
  jint size = [inArg readInt];
  [self setUpWithInt:size];
  while (size-- > 0) {
    jlong key = [inArg readLong];
    jlong val = [inArg readLong];
    [self putWithLong:key withLong:val];
  }
}

- (void)dealloc {
  RELEASE_(_values_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongLongHashMap *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongLongHashMap_set__values_(other, _values_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TLongLongHashMap", NULL, 0x1, NULL },
    { "initWithInt:", "TLongLongHashMap", NULL, 0x1, NULL },
    { "initWithInt:withFloat:", "TLongLongHashMap", NULL, 0x1, NULL },
    { "initWithInt:withFloat:withLong:withLong:", "TLongLongHashMap", NULL, 0x1, NULL },
    { "initWithLongArray:withLongArray:", "TLongLongHashMap", NULL, 0x1, NULL },
    { "initWithGnuTroveMapTLongLongMap:", "TLongLongHashMap", NULL, 0x1, NULL },
    { "setUpWithInt:", "setUp", "I", 0x4, NULL },
    { "rehashWithInt:", "rehash", "V", 0x4, NULL },
    { "putWithLong:withLong:", "put", "J", 0x1, NULL },
    { "putIfAbsentWithLong:withLong:", "putIfAbsent", "J", 0x1, NULL },
    { "doPutWithLong:withLong:withInt:", "doPut", "J", 0x2, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL },
    { "putAllWithGnuTroveMapTLongLongMap:", "putAll", "V", 0x1, NULL },
    { "getWithLong:", "get", "J", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "removeWithLong:", "remove", "J", 0x1, NULL },
    { "removeAtWithInt:", "removeAt", "V", 0x4, NULL },
    { "keySet", NULL, "Lgnu.trove.set.TLongSet;", 0x1, NULL },
    { "keys", NULL, "[J", 0x1, NULL },
    { "keysWithLongArray:", "keys", "[J", 0x1, NULL },
    { "valueCollection", NULL, "Lgnu.trove.TLongCollection;", 0x1, NULL },
    { "values", NULL, "[J", 0x1, NULL },
    { "valuesWithLongArray:", "values", "[J", 0x1, NULL },
    { "containsValueWithLong:", "containsValue", "Z", 0x1, NULL },
    { "containsKeyWithLong:", "containsKey", "Z", 0x1, NULL },
    { "iterator", NULL, "Lgnu.trove.iterator.TLongLongIterator;", 0x1, NULL },
    { "forEachKeyWithGnuTroveProcedureTLongProcedure:", "forEachKey", "Z", 0x1, NULL },
    { "forEachValueWithGnuTroveProcedureTLongProcedure:", "forEachValue", "Z", 0x1, NULL },
    { "forEachEntryWithGnuTroveProcedureTLongLongProcedure:", "forEachEntry", "Z", 0x1, NULL },
    { "transformValuesWithGnuTroveFunctionTLongFunction:", "transformValues", "V", 0x1, NULL },
    { "retainEntriesWithGnuTroveProcedureTLongLongProcedure:", "retainEntries", "Z", 0x1, NULL },
    { "incrementWithLong:", "increment", "Z", 0x1, NULL },
    { "adjustValueWithLong:withLong:", "adjustValue", "Z", 0x1, NULL },
    { "adjustOrPutValueWithLong:withLong:withLong:", "adjustOrPutValue", "J", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;" },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, .constantValue.asLong = GnuTroveMapHashTLongLongHashMap_serialVersionUID },
    { "_values_", NULL, 0x84, "[J", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongLongHashMap = { 1, "TLongLongHashMap", "gnu.trove.map.hash", NULL, 0x1, 40, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTLongLongHashMap;
}

@end

jlong GnuTroveMapHashTLongLongHashMap_doPutWithLong_withLong_withInt_(GnuTroveMapHashTLongLongHashMap *self, jlong key, jlong value, jint index) {
  jlong previous = self->no_entry_value_;
  jboolean isNewMapping = YES;
  if (index < 0) {
    index = -index - 1;
    previous = IOSLongArray_Get(nil_chk(self->_values_), index);
    isNewMapping = NO;
  }
  *IOSLongArray_GetRef(nil_chk(self->_values_), index) = value;
  if (isNewMapping) {
    [self postInsertHookWithBoolean:self->consumeFreeSlot_];
  }
  return previous;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongLongHashMap)

@implementation GnuTroveMapHashTLongLongHashMap_TKeyView

- (id<GnuTroveIteratorTLongIterator>)iterator {
  return [[[GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator alloc] initWithGnuTroveMapHashTLongLongHashMap:this$0_ withGnuTroveImplHashTPrimitiveHash:this$0_] autorelease];
}

- (jlong)getNoEntryValue {
  return this$0_->no_entry_key_;
}

- (jint)size {
  return this$0_->_size_;
}

- (jboolean)isEmpty {
  return 0 == this$0_->_size_;
}

- (jboolean)containsWithLong:(jlong)entry_ {
  return [this$0_ containsWithLong:entry_];
}

- (IOSLongArray *)toArray {
  return [this$0_ keys];
}

- (IOSLongArray *)toArrayWithLongArray:(IOSLongArray *)dest {
  return [this$0_ keysWithLongArray:dest];
}

- (jboolean)addWithLong:(jlong)entry_ {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)removeWithLong:(jlong)entry_ {
  return this$0_->no_entry_value_ != [this$0_ removeWithLong:entry_];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong ele = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if (![this$0_ containsKeyWithLong:ele]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![this$0_ containsKeyWithLong:[iter next]]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithLongArray:(IOSLongArray *)array {
  {
    IOSLongArray *a__ = array;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong element = *b__++;
      if (![this$0_ containsWithLong:element]) {
        return NO;
      }
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithLongArray:(IOSLongArray *)array {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangLong_valueOfWithLong_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTLongCollection>) nil_chk(collection)) containsWithLong:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithLongArray_(array);
  IOSLongArray *set = this$0_->_set_;
  IOSByteArray *states = this$0_->_states_;
  for (jint i = ((IOSLongArray *) nil_chk(set))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (JavaUtilArrays_binarySearchWithLongArray_withLong_(array, IOSLongArray_Get(set, i)) < 0)) {
      [this$0_ removeAtWithInt:i];
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong c = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if ([self removeWithLong:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self == collection) {
    [self clear];
    return YES;
  }
  jboolean changed = NO;
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    jlong element = [iter next];
    if ([self removeWithLong:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSLongArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithLong:IOSLongArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)clear {
  [this$0_ clear];
}

- (jboolean)forEachWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure {
  return [this$0_ forEachKeyWithGnuTroveProcedureTLongProcedure:procedure];
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveSetTLongSet_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveSetTLongSet> that = (id<GnuTroveSetTLongSet>) check_protocol_cast(other, @protocol(GnuTroveSetTLongSet));
  if ([((id<GnuTroveSetTLongSet>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  for (jint i = ((IOSByteArray *) nil_chk(this$0_->_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(this$0_->_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      if (![that containsWithLong:IOSLongArray_Get(nil_chk(this$0_->_set_), i)]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  for (jint i = ((IOSByteArray *) nil_chk(this$0_->_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(this$0_->_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithLong_(IOSLongArray_Get(nil_chk(this$0_->_set_), i));
    }
  }
  return hashcode;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [this$0_ forEachKeyWithGnuTroveProcedureTLongProcedure:[[[GnuTroveMapHashTLongLongHashMap_TKeyView_$1 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (instancetype)initWithGnuTroveMapHashTLongLongHashMap:(GnuTroveMapHashTLongLongHashMap *)outer$ {
  GnuTroveMapHashTLongLongHashMap_TKeyView_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongLongHashMap_TKeyView *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongLongHashMap_TKeyView_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Lgnu.trove.iterator.TLongIterator;", 0x1, NULL },
    { "getNoEntryValue", NULL, "J", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "containsWithLong:", "contains", "Z", 0x1, NULL },
    { "toArray", NULL, "[J", 0x1, NULL },
    { "toArrayWithLongArray:", "toArray", "[J", 0x1, NULL },
    { "addWithLong:", "add", "Z", 0x1, NULL },
    { "removeWithLong:", "remove", "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTLongCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithLongArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTLongCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithLongArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTLongCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithLongArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTLongCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithLongArray:", "removeAll", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "forEachWithGnuTroveProcedureTLongProcedure:", "forEach", "Z", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "initWithGnuTroveMapHashTLongLongHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongLongHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongLongHashMap_TKeyView = { 1, "TKeyView", "gnu.trove.map.hash", "TLongLongHashMap", 0x4, 27, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongLongHashMap_TKeyView;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongLongHashMap_TKeyView)

@implementation GnuTroveMapHashTLongLongHashMap_TKeyView_$1

- (jboolean)executeWithLong:(jlong)key {
  if (first_) {
    first_ = NO;
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@", "];
  }
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithLong:key];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTLongLongHashMap_TKeyView_$1_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongLongHashMap_TKeyView_$1 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTLongLongHashMap_TKeyView_$1_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithLong:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongLongHashMap_TKeyView_$1 = { 1, "$1", "gnu.trove.map.hash", "TLongLongHashMap$TKeyView", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTLongLongHashMap_TKeyView_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongLongHashMap_TKeyView_$1)

@implementation GnuTroveMapHashTLongLongHashMap_TValueView

- (id<GnuTroveIteratorTLongIterator>)iterator {
  return [[[GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator alloc] initWithGnuTroveMapHashTLongLongHashMap:this$0_ withGnuTroveImplHashTPrimitiveHash:this$0_] autorelease];
}

- (jlong)getNoEntryValue {
  return this$0_->no_entry_value_;
}

- (jint)size {
  return this$0_->_size_;
}

- (jboolean)isEmpty {
  return 0 == this$0_->_size_;
}

- (jboolean)containsWithLong:(jlong)entry_ {
  return [this$0_ containsValueWithLong:entry_];
}

- (IOSLongArray *)toArray {
  return [this$0_ values];
}

- (IOSLongArray *)toArrayWithLongArray:(IOSLongArray *)dest {
  return [this$0_ valuesWithLongArray:dest];
}

- (jboolean)addWithLong:(jlong)entry_ {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)removeWithLong:(jlong)entry_ {
  IOSLongArray *values = this$0_->_values_;
  IOSLongArray *set = this$0_->_set_;
  for (jint i = ((IOSLongArray *) nil_chk(values))->size_; i-- > 0; ) {
    if ((IOSLongArray_Get(nil_chk(set), i) != GnuTroveImplHashTPrimitiveHash_FREE && IOSLongArray_Get(set, i) != GnuTroveImplHashTPrimitiveHash_REMOVED) && entry_ == IOSLongArray_Get(values, i)) {
      [this$0_ removeAtWithInt:i];
      return YES;
    }
  }
  return NO;
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong ele = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if (![this$0_ containsValueWithLong:ele]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![this$0_ containsValueWithLong:[iter next]]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithLongArray:(IOSLongArray *)array {
  {
    IOSLongArray *a__ = array;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong element = *b__++;
      if (![this$0_ containsValueWithLong:element]) {
        return NO;
      }
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithLongArray:(IOSLongArray *)array {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangLong_valueOfWithLong_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTLongCollection>) nil_chk(collection)) containsWithLong:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithLongArray_(array);
  IOSLongArray *values = this$0_->_values_;
  IOSByteArray *states = this$0_->_states_;
  for (jint i = ((IOSLongArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (JavaUtilArrays_binarySearchWithLongArray_withLong_(array, IOSLongArray_Get(values, i)) < 0)) {
      [this$0_ removeAtWithInt:i];
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong c = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if ([self removeWithLong:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self == collection) {
    [self clear];
    return YES;
  }
  jboolean changed = NO;
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    jlong element = [iter next];
    if ([self removeWithLong:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSLongArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithLong:IOSLongArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)clear {
  [this$0_ clear];
}

- (jboolean)forEachWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure {
  return [this$0_ forEachValueWithGnuTroveProcedureTLongProcedure:procedure];
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [this$0_ forEachValueWithGnuTroveProcedureTLongProcedure:[[[GnuTroveMapHashTLongLongHashMap_TValueView_$1 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (instancetype)initWithGnuTroveMapHashTLongLongHashMap:(GnuTroveMapHashTLongLongHashMap *)outer$ {
  GnuTroveMapHashTLongLongHashMap_TValueView_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongLongHashMap_TValueView *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongLongHashMap_TValueView_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Lgnu.trove.iterator.TLongIterator;", 0x1, NULL },
    { "getNoEntryValue", NULL, "J", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "containsWithLong:", "contains", "Z", 0x1, NULL },
    { "toArray", NULL, "[J", 0x1, NULL },
    { "toArrayWithLongArray:", "toArray", "[J", 0x1, NULL },
    { "addWithLong:", "add", "Z", 0x1, NULL },
    { "removeWithLong:", "remove", "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTLongCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithLongArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTLongCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithLongArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTLongCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithLongArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTLongCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithLongArray:", "removeAll", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "forEachWithGnuTroveProcedureTLongProcedure:", "forEach", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "initWithGnuTroveMapHashTLongLongHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongLongHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongLongHashMap_TValueView = { 1, "TValueView", "gnu.trove.map.hash", "TLongLongHashMap", 0x4, 25, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongLongHashMap_TValueView;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongLongHashMap_TValueView)

@implementation GnuTroveMapHashTLongLongHashMap_TValueView_$1

- (jboolean)executeWithLong:(jlong)value {
  if (first_) {
    first_ = NO;
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@", "];
  }
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithLong:value];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTLongLongHashMap_TValueView_$1_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongLongHashMap_TValueView_$1 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTLongLongHashMap_TValueView_$1_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithLong:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongLongHashMap_TValueView_$1 = { 1, "$1", "gnu.trove.map.hash", "TLongLongHashMap$TValueView", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTLongLongHashMap_TValueView_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongLongHashMap_TValueView_$1)

@implementation GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator

- (instancetype)initWithGnuTroveMapHashTLongLongHashMap:(GnuTroveMapHashTLongLongHashMap *)outer$
                     withGnuTroveImplHashTPrimitiveHash:(GnuTroveImplHashTPrimitiveHash *)hash_ {
  GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator_set_this$0_(self, outer$);
  return [super initWithGnuTroveImplHashTPrimitiveHash:hash_];
}

- (jlong)next {
  [self moveToNextIndex];
  return IOSLongArray_Get(nil_chk(this$0_->_set_), _index_);
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [this$0_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTLongLongHashMap:withGnuTroveImplHashTPrimitiveHash:", "TLongLongKeyHashIterator", NULL, 0x0, NULL },
    { "next", NULL, "J", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongLongHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator = { 1, "TLongLongKeyHashIterator", "gnu.trove.map.hash", "TLongLongHashMap", 0x0, 3, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongLongHashMap_TLongLongKeyHashIterator)

@implementation GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator

- (instancetype)initWithGnuTroveMapHashTLongLongHashMap:(GnuTroveMapHashTLongLongHashMap *)outer$
                     withGnuTroveImplHashTPrimitiveHash:(GnuTroveImplHashTPrimitiveHash *)hash_ {
  GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator_set_this$0_(self, outer$);
  return [super initWithGnuTroveImplHashTPrimitiveHash:hash_];
}

- (jlong)next {
  [self moveToNextIndex];
  return IOSLongArray_Get(nil_chk(this$0_->_values_), _index_);
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [this$0_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTLongLongHashMap:withGnuTroveImplHashTPrimitiveHash:", "TLongLongValueHashIterator", NULL, 0x0, NULL },
    { "next", NULL, "J", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongLongHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator = { 1, "TLongLongValueHashIterator", "gnu.trove.map.hash", "TLongLongHashMap", 0x0, 3, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongLongHashMap_TLongLongValueHashIterator)

@implementation GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator

- (instancetype)initWithGnuTroveMapHashTLongLongHashMap:(GnuTroveMapHashTLongLongHashMap *)outer$
                    withGnuTroveMapHashTLongLongHashMap:(GnuTroveMapHashTLongLongHashMap *)map {
  GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator_set_this$0_(self, outer$);
  return [super initWithGnuTroveImplHashTPrimitiveHash:map];
}

- (void)advance {
  [self moveToNextIndex];
}

- (jlong)key {
  return IOSLongArray_Get(nil_chk(this$0_->_set_), _index_);
}

- (jlong)value {
  return IOSLongArray_Get(nil_chk(this$0_->_values_), _index_);
}

- (jlong)setValueWithLong:(jlong)val {
  jlong old = [self value];
  *IOSLongArray_GetRef(nil_chk(this$0_->_values_), _index_) = val;
  return old;
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [this$0_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTLongLongHashMap:withGnuTroveMapHashTLongLongHashMap:", "TLongLongHashIterator", NULL, 0x0, NULL },
    { "advance", NULL, "V", 0x1, NULL },
    { "key", NULL, "J", 0x1, NULL },
    { "value", NULL, "J", 0x1, NULL },
    { "setValueWithLong:", "setValue", "J", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongLongHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator = { 1, "TLongLongHashIterator", "gnu.trove.map.hash", "TLongLongHashMap", 0x0, 6, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongLongHashMap_TLongLongHashIterator)

@implementation GnuTroveMapHashTLongLongHashMap_$1

- (jboolean)executeWithLong:(jlong)key
                   withLong:(jlong)value {
  if (first_) first_ = NO;
  else [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithLong:key];
  [val$buf_ appendWithNSString:@"="];
  [val$buf_ appendWithLong:value];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTLongLongHashMap_$1_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongLongHashMap_$1 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTLongLongHashMap_$1_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithLong:withLong:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongLongHashMap_$1 = { 1, "$1", "gnu.trove.map.hash", "TLongLongHashMap", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTLongLongHashMap_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongLongHashMap_$1)
