//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/map/hash/TIntObjectHashMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/TIntCollection.h"
#include "gnu/trove/function/TObjectFunction.h"
#include "gnu/trove/impl/Constants.h"
#include "gnu/trove/impl/HashFunctions.h"
#include "gnu/trove/impl/hash/THash.h"
#include "gnu/trove/impl/hash/THashPrimitiveIterator.h"
#include "gnu/trove/impl/hash/TIntHash.h"
#include "gnu/trove/impl/hash/TPrimitiveHash.h"
#include "gnu/trove/iterator/TIntIterator.h"
#include "gnu/trove/iterator/TIntObjectIterator.h"
#include "gnu/trove/map/TIntObjectMap.h"
#include "gnu/trove/map/hash/TIntObjectHashMap.h"
#include "gnu/trove/procedure/TIntObjectProcedure.h"
#include "gnu/trove/procedure/TIntProcedure.h"
#include "gnu/trove/procedure/TObjectProcedure.h"
#include "gnu/trove/set/TIntSet.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

__attribute__((unused)) static id GnuTroveMapHashTIntObjectHashMap_doPutWithId_withInt_(GnuTroveMapHashTIntObjectHashMap *self, id value, jint index);

@interface GnuTroveMapHashTIntObjectHashMap () {
 @public
  id<GnuTroveProcedureTIntObjectProcedure> PUT_ALL_PROC_;
}

- (id)doPutWithId:(id)value
          withInt:(jint)index;
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap, PUT_ALL_PROC_, id<GnuTroveProcedureTIntObjectProcedure>)

@interface GnuTroveMapHashTIntObjectHashMap_KeyView () {
 @public
  GnuTroveMapHashTIntObjectHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap_KeyView, this$0_, GnuTroveMapHashTIntObjectHashMap *)

@interface GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator () {
 @public
  /**
   @brief the collection on which the iterator operates
   */
  GnuTroveImplHashTIntHash *_hash_TIntHashIterator_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator, _hash_TIntHashIterator_, GnuTroveImplHashTIntHash *)

@interface GnuTroveMapHashTIntObjectHashMap_MapBackedView () {
 @public
  GnuTroveMapHashTIntObjectHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap_MapBackedView, this$0_, GnuTroveMapHashTIntObjectHashMap *)

@interface GnuTroveMapHashTIntObjectHashMap_ValueView () {
 @public
  GnuTroveMapHashTIntObjectHashMap *this$1_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap_ValueView, this$1_, GnuTroveMapHashTIntObjectHashMap *)

@interface GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator () {
 @public
  GnuTroveMapHashTIntObjectHashMap_ValueView *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator, this$0_, GnuTroveMapHashTIntObjectHashMap_ValueView *)

@interface GnuTroveMapHashTIntObjectHashMap_ValueView_$1 () {
 @public
  GnuTroveMapHashTIntObjectHashMap_ValueView *this$1_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap_ValueView_$1, this$1_, GnuTroveMapHashTIntObjectHashMap_ValueView *)

@interface GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator () {
 @public
  /**
   @brief the collection being iterated over
   */
  GnuTroveMapHashTIntObjectHashMap *_map_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator, _map_, GnuTroveMapHashTIntObjectHashMap *)

@interface GnuTroveMapHashTIntObjectHashMap_$1 () {
 @public
  GnuTroveMapHashTIntObjectHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap_$1, this$0_, GnuTroveMapHashTIntObjectHashMap *)

@interface GnuTroveMapHashTIntObjectHashMap_$2 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntObjectHashMap_$2, val$buf_, JavaLangStringBuilder *)

@implementation GnuTroveMapHashTIntObjectHashMap

- (instancetype)init {
  if (self = [super init]) {
    GnuTroveMapHashTIntObjectHashMap_setAndConsume_PUT_ALL_PROC_(self, [[GnuTroveMapHashTIntObjectHashMap_$1 alloc] initWithGnuTroveMapHashTIntObjectHashMap:self]);
  }
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  if (self = [super initWithInt:initialCapacity]) {
    GnuTroveMapHashTIntObjectHashMap_setAndConsume_PUT_ALL_PROC_(self, [[GnuTroveMapHashTIntObjectHashMap_$1 alloc] initWithGnuTroveMapHashTIntObjectHashMap:self]);
    no_entry_key_ = GnuTroveImplConstants_get_DEFAULT_INT_NO_ENTRY_VALUE_();
  }
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor {
  if (self = [super initWithInt:initialCapacity withFloat:loadFactor]) {
    GnuTroveMapHashTIntObjectHashMap_setAndConsume_PUT_ALL_PROC_(self, [[GnuTroveMapHashTIntObjectHashMap_$1 alloc] initWithGnuTroveMapHashTIntObjectHashMap:self]);
    no_entry_key_ = GnuTroveImplConstants_get_DEFAULT_INT_NO_ENTRY_VALUE_();
  }
  return self;
}

- (instancetype)initGnuTroveMapHashTIntObjectHashMapWithInt:(jint)initialCapacity
                                                  withFloat:(jfloat)loadFactor
                                                    withInt:(jint)noEntryKey {
  if (self = [super initWithInt:initialCapacity withFloat:loadFactor]) {
    GnuTroveMapHashTIntObjectHashMap_setAndConsume_PUT_ALL_PROC_(self, [[GnuTroveMapHashTIntObjectHashMap_$1 alloc] initWithGnuTroveMapHashTIntObjectHashMap:self]);
    no_entry_key_ = noEntryKey;
  }
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor
                    withInt:(jint)noEntryKey {
  return [self initGnuTroveMapHashTIntObjectHashMapWithInt:initialCapacity withFloat:loadFactor withInt:noEntryKey];
}

- (instancetype)initWithGnuTroveMapTIntObjectMap:(id<GnuTroveMapTIntObjectMap>)map {
  if (self = [self initGnuTroveMapHashTIntObjectHashMapWithInt:[((id<GnuTroveMapTIntObjectMap>) nil_chk(map)) size] withFloat:0.5f withInt:[map getNoEntryKey]]) {
    [self putAllWithGnuTroveMapTIntObjectMap:map];
  }
  return self;
}

- (jint)setUpWithInt:(jint)initialCapacity {
  jint capacity;
  capacity = [super setUpWithInt:initialCapacity];
  GnuTroveMapHashTIntObjectHashMap_set__values_(self, (IOSObjectArray *) check_class_cast([IOSObjectArray arrayWithLength:capacity type:NSObject_class_()], [IOSObjectArray class]));
  return capacity;
}

- (void)rehashWithInt:(jint)newCapacity {
  jint oldCapacity = ((IOSIntArray *) nil_chk(_set_))->size_;
  IOSIntArray *oldKeys = _set_;
  IOSObjectArray *oldVals = _values_;
  IOSByteArray *oldStates = _states_;
  GnuTroveImplHashTIntHash_setAndConsume__set_(self, [IOSIntArray newArrayWithLength:newCapacity]);
  GnuTroveMapHashTIntObjectHashMap_set__values_(self, (IOSObjectArray *) check_class_cast([IOSObjectArray arrayWithLength:newCapacity type:NSObject_class_()], [IOSObjectArray class]));
  GnuTroveImplHashTPrimitiveHash_setAndConsume__states_(self, [IOSByteArray newArrayWithLength:newCapacity]);
  for (jint i = oldCapacity; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(oldStates), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      jint o = IOSIntArray_Get(oldKeys, i);
      jint index = [self insertKeyWithInt:o];
      IOSObjectArray_Set(_values_, index, IOSObjectArray_Get(nil_chk(oldVals), i));
    }
  }
}

- (jint)getNoEntryKey {
  return no_entry_key_;
}

- (jboolean)containsKeyWithInt:(jint)key {
  return [self containsWithInt:key];
}

- (jboolean)containsValueWithId:(id)val {
  IOSByteArray *states = _states_;
  IOSObjectArray *vals = _values_;
  if (nil == val) {
    for (jint i = ((IOSObjectArray *) nil_chk(vals))->size_; i-- > 0; ) {
      if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && nil == IOSObjectArray_Get(vals, i)) {
        return YES;
      }
    }
  }
  else {
    for (jint i = ((IOSObjectArray *) nil_chk(vals))->size_; i-- > 0; ) {
      if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (val == IOSObjectArray_Get(vals, i) || [val isEqual:IOSObjectArray_Get(vals, i)])) {
        return YES;
      }
    }
  }
  return NO;
}

- (id)getWithInt:(jint)key {
  jint index = [self indexWithInt:key];
  return index < 0 ? nil : IOSObjectArray_Get(nil_chk(_values_), index);
}

- (id)putWithInt:(jint)key
          withId:(id)value {
  jint index = [self insertKeyWithInt:key];
  return GnuTroveMapHashTIntObjectHashMap_doPutWithId_withInt_(self, value, index);
}

- (id)putIfAbsentWithInt:(jint)key
                  withId:(id)value {
  jint index = [self insertKeyWithInt:key];
  if (index < 0) return IOSObjectArray_Get(nil_chk(_values_), -index - 1);
  return GnuTroveMapHashTIntObjectHashMap_doPutWithId_withInt_(self, value, index);
}

- (id)doPutWithId:(id)value
          withInt:(jint)index {
  return GnuTroveMapHashTIntObjectHashMap_doPutWithId_withInt_(self, value, index);
}

- (id)removeWithInt:(jint)key {
  id prev = nil;
  jint index = [self indexWithInt:key];
  if (index >= 0) {
    prev = IOSObjectArray_Get(nil_chk(_values_), index);
    [self removeAtWithInt:index];
  }
  return prev;
}

- (void)removeAtWithInt:(jint)index {
  IOSObjectArray_Set(nil_chk(_values_), index, nil);
  [super removeAtWithInt:index];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  id<JavaUtilSet> set = [((id<JavaUtilMap>) nil_chk(map)) entrySet];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk(set)) {
    [self putWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) intValue] withId:[entry_ getValue]];
  }
}

- (void)putAllWithGnuTroveMapTIntObjectMap:(id<GnuTroveMapTIntObjectMap>)map {
  [((id<GnuTroveMapTIntObjectMap>) nil_chk(map)) forEachEntryWithGnuTroveProcedureTIntObjectProcedure:PUT_ALL_PROC_];
}

- (void)clear {
  [super clear];
  JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(_set_, 0, ((IOSIntArray *) nil_chk(_set_))->size_, no_entry_key_);
  JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(_states_, 0, ((IOSByteArray *) nil_chk(_states_))->size_, GnuTroveImplHashTPrimitiveHash_FREE);
  JavaUtilArrays_fillWithNSObjectArray_withInt_withInt_withId_(_values_, 0, ((IOSObjectArray *) nil_chk(_values_))->size_, nil);
}

- (id<GnuTroveSetTIntSet>)keySet {
  return [[[GnuTroveMapHashTIntObjectHashMap_KeyView alloc] initWithGnuTroveMapHashTIntObjectHashMap:self] autorelease];
}

- (IOSIntArray *)keys {
  IOSIntArray *keys = [IOSIntArray arrayWithLength:[self size]];
  IOSIntArray *k = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(k))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(keys, j++) = IOSIntArray_Get(k, i);
    }
  }
  return keys;
}

- (IOSIntArray *)keysWithIntArray:(IOSIntArray *)dest {
  if (((IOSIntArray *) nil_chk(dest))->size_ < _size_) {
    dest = [IOSIntArray arrayWithLength:_size_];
  }
  IOSIntArray *k = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(k))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(dest, j++) = IOSIntArray_Get(k, i);
    }
  }
  return dest;
}

- (id<JavaUtilCollection>)valueCollection {
  return [[[GnuTroveMapHashTIntObjectHashMap_ValueView alloc] initWithGnuTroveMapHashTIntObjectHashMap:self] autorelease];
}

- (IOSObjectArray *)values {
  IOSObjectArray *vals = [IOSObjectArray arrayWithLength:[self size] type:NSObject_class_()];
  IOSObjectArray *v = _values_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSObjectArray *) nil_chk(v))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      IOSObjectArray_Set(vals, j++, IOSObjectArray_Get(v, i));
    }
  }
  return vals;
}

- (IOSObjectArray *)valuesWithNSObjectArray:(IOSObjectArray *)dest {
  if (((IOSObjectArray *) nil_chk(dest))->size_ < _size_) {
    dest = (IOSObjectArray *) check_class_cast(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[dest getClass] getComponentType], _size_), [IOSObjectArray class]);
  }
  IOSObjectArray *v = _values_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSObjectArray *) nil_chk(v))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      IOSObjectArray_Set(nil_chk(dest), j++, (id) IOSObjectArray_Get(v, i));
    }
  }
  return dest;
}

- (id<GnuTroveIteratorTIntObjectIterator>)iterator {
  return [[[GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator alloc] initWithGnuTroveMapHashTIntObjectHashMap:self withGnuTroveMapHashTIntObjectHashMap:self] autorelease];
}

- (jboolean)forEachKeyWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure {
  return [self forEachWithGnuTroveProcedureTIntProcedure:procedure];
}

- (jboolean)forEachValueWithGnuTroveProcedureTObjectProcedure:(id<GnuTroveProcedureTObjectProcedure>)procedure {
  IOSByteArray *states = _states_;
  IOSObjectArray *values = _values_;
  for (jint i = ((IOSObjectArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTObjectProcedure>) nil_chk(procedure)) executeWithId:IOSObjectArray_Get(values, i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)forEachEntryWithGnuTroveProcedureTIntObjectProcedure:(id<GnuTroveProcedureTIntObjectProcedure>)procedure {
  IOSByteArray *states = _states_;
  IOSIntArray *keys = _set_;
  IOSObjectArray *values = _values_;
  for (jint i = ((IOSIntArray *) nil_chk(keys))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTIntObjectProcedure>) nil_chk(procedure)) executeWithInt:IOSIntArray_Get(keys, i) withId:IOSObjectArray_Get(nil_chk(values), i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)retainEntriesWithGnuTroveProcedureTIntObjectProcedure:(id<GnuTroveProcedureTIntObjectProcedure>)procedure {
  jboolean modified = NO;
  IOSByteArray *states = _states_;
  IOSIntArray *keys = _set_;
  IOSObjectArray *values = _values_;
  [self tempDisableAutoCompaction];
  @try {
    for (jint i = ((IOSIntArray *) nil_chk(keys))->size_; i-- > 0; ) {
      if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTIntObjectProcedure>) nil_chk(procedure)) executeWithInt:IOSIntArray_Get(keys, i) withId:IOSObjectArray_Get(nil_chk(values), i)]) {
        [self removeAtWithInt:i];
        modified = YES;
      }
    }
  }
  @finally {
    [self reenableAutoCompactionWithBoolean:YES];
  }
  return modified;
}

- (void)transformValuesWithGnuTroveFunctionTObjectFunction:(id<GnuTroveFunctionTObjectFunction>)function {
  IOSByteArray *states = _states_;
  IOSObjectArray *values = _values_;
  for (jint i = ((IOSObjectArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      IOSObjectArray_Set(values, i, [((id<GnuTroveFunctionTObjectFunction>) nil_chk(function)) executeWithId:IOSObjectArray_Get(values, i)]);
    }
  }
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveMapTIntObjectMap_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveMapTIntObjectMap> that = (id<GnuTroveMapTIntObjectMap>) check_protocol_cast(other, @protocol(GnuTroveMapTIntObjectMap));
  if ([((id<GnuTroveMapTIntObjectMap>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  @try {
    id<GnuTroveIteratorTIntObjectIterator> iter = [self iterator];
    while ([((id<GnuTroveIteratorTIntObjectIterator>) nil_chk(iter)) hasNext]) {
      [iter advance];
      jint key = [iter key];
      id value = [iter value];
      if (value == nil) {
        if (!([that getWithInt:key] == nil && [that containsKeyWithInt:key])) {
          return NO;
        }
      }
      else {
        if (![value isEqual:[that getWithInt:key]]) {
          return NO;
        }
      }
    }
  }
  @catch (JavaLangClassCastException *ex) {
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  IOSObjectArray *values = _values_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSObjectArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithInt_(IOSIntArray_Get(nil_chk(_set_), i)) ^ (IOSObjectArray_Get(values, i) == nil ? 0 : ((jint) [nil_chk(IOSObjectArray_Get(values, i)) hash]));
    }
  }
  return hashcode;
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeByteWithInt:0];
  [super writeExternalWithJavaIoObjectOutput:outArg];
  [outArg writeIntWithInt:no_entry_key_];
  [outArg writeIntWithInt:_size_];
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      [outArg writeIntWithInt:IOSIntArray_Get(nil_chk(_set_), i)];
      [outArg writeObjectWithId:IOSObjectArray_Get(nil_chk(_values_), i)];
    }
  }
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  [((id<JavaIoObjectInput>) nil_chk(inArg)) readByte];
  [super readExternalWithJavaIoObjectInput:inArg];
  no_entry_key_ = [inArg readInt];
  jint size = [inArg readInt];
  [self setUpWithInt:size];
  while (size-- > 0) {
    jint key = [inArg readInt];
    id val = (id) [inArg readObject];
    [self putWithInt:key withId:val];
  }
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [self forEachEntryWithGnuTroveProcedureTIntObjectProcedure:[[[GnuTroveMapHashTIntObjectHashMap_$2 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (void)dealloc {
  RELEASE_(PUT_ALL_PROC_);
  RELEASE_(_values_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntObjectHashMap_set_PUT_ALL_PROC_(other, PUT_ALL_PROC_);
  GnuTroveMapHashTIntObjectHashMap_set__values_(other, _values_);
  other->no_entry_key_ = no_entry_key_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TIntObjectHashMap", NULL, 0x1, NULL },
    { "initWithInt:", "TIntObjectHashMap", NULL, 0x1, NULL },
    { "initWithInt:withFloat:", "TIntObjectHashMap", NULL, 0x1, NULL },
    { "initWithInt:withFloat:withInt:", "TIntObjectHashMap", NULL, 0x1, NULL },
    { "initWithGnuTroveMapTIntObjectMap:", "TIntObjectHashMap", NULL, 0x1, NULL },
    { "setUpWithInt:", "setUp", "I", 0x4, NULL },
    { "rehashWithInt:", "rehash", "V", 0x4, NULL },
    { "getNoEntryKey", NULL, "I", 0x1, NULL },
    { "containsKeyWithInt:", "containsKey", "Z", 0x1, NULL },
    { "containsValueWithId:", "containsValue", "Z", 0x1, NULL },
    { "getWithInt:", "get", "TV;", 0x1, NULL },
    { "putWithInt:withId:", "put", "TV;", 0x1, NULL },
    { "putIfAbsentWithInt:withId:", "putIfAbsent", "TV;", 0x1, NULL },
    { "doPutWithId:withInt:", "doPut", "TV;", 0x2, NULL },
    { "removeWithInt:", "remove", "TV;", 0x1, NULL },
    { "removeAtWithInt:", "removeAt", "V", 0x4, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL },
    { "putAllWithGnuTroveMapTIntObjectMap:", "putAll", "V", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "keySet", NULL, "Lgnu.trove.set.TIntSet;", 0x1, NULL },
    { "keys", NULL, "[I", 0x1, NULL },
    { "keysWithIntArray:", "keys", "[I", 0x1, NULL },
    { "valueCollection", NULL, "Ljava.util.Collection;", 0x1, NULL },
    { "values", NULL, "[Ljava.lang.Object;", 0x1, NULL },
    { "valuesWithNSObjectArray:", "values", "[Ljava.lang.Object;", 0x1, NULL },
    { "iterator", NULL, "Lgnu.trove.iterator.TIntObjectIterator;", 0x1, NULL },
    { "forEachKeyWithGnuTroveProcedureTIntProcedure:", "forEachKey", "Z", 0x1, NULL },
    { "forEachValueWithGnuTroveProcedureTObjectProcedure:", "forEachValue", "Z", 0x1, NULL },
    { "forEachEntryWithGnuTroveProcedureTIntObjectProcedure:", "forEachEntry", "Z", 0x1, NULL },
    { "retainEntriesWithGnuTroveProcedureTIntObjectProcedure:", "retainEntries", "Z", 0x1, NULL },
    { "transformValuesWithGnuTroveFunctionTObjectFunction:", "transformValues", "V", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;" },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, .constantValue.asLong = GnuTroveMapHashTIntObjectHashMap_serialVersionUID },
    { "PUT_ALL_PROC_", NULL, 0x12, "Lgnu.trove.procedure.TIntObjectProcedure;", NULL,  },
    { "_values_", NULL, 0x84, "[Ljava.lang.Object;", NULL,  },
    { "no_entry_key_", NULL, 0x4, "I", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap = { 1, "TIntObjectHashMap", "gnu.trove.map.hash", NULL, 0x1, 36, methods, 4, fields, 0, NULL};
  return &_GnuTroveMapHashTIntObjectHashMap;
}

@end

id GnuTroveMapHashTIntObjectHashMap_doPutWithId_withInt_(GnuTroveMapHashTIntObjectHashMap *self, id value, jint index) {
  id previous = nil;
  jboolean isNewMapping = YES;
  if (index < 0) {
    index = -index - 1;
    previous = IOSObjectArray_Get(nil_chk(self->_values_), index);
    isNewMapping = NO;
  }
  IOSObjectArray_Set(nil_chk(self->_values_), index, value);
  if (isNewMapping) {
    [self postInsertHookWithBoolean:self->consumeFreeSlot_];
  }
  return previous;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap)

@implementation GnuTroveMapHashTIntObjectHashMap_KeyView

- (jint)getNoEntryValue {
  return this$0_->no_entry_key_;
}

- (jint)size {
  return this$0_->_size_;
}

- (jboolean)isEmpty {
  return this$0_->_size_ == 0;
}

- (jboolean)containsWithInt:(jint)entry_ {
  return [this$0_ containsKeyWithInt:entry_];
}

- (id<GnuTroveIteratorTIntIterator>)iterator {
  return [[[GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator alloc] initWithGnuTroveMapHashTIntObjectHashMap_KeyView:self withGnuTroveImplHashTIntHash:this$0_] autorelease];
}

- (IOSIntArray *)toArray {
  return [this$0_ keys];
}

- (IOSIntArray *)toArrayWithIntArray:(IOSIntArray *)dest {
  return [this$0_ keysWithIntArray:dest];
}

- (jboolean)addWithInt:(jint)entry_ {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)removeWithInt:(jint)entry_ {
  return nil != [this$0_ removeWithInt:entry_];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if (![this$0_ containsKeyWithInt:[((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue]]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (collection == self) {
    return YES;
  }
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![this$0_ containsKeyWithInt:[iter next]]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithIntArray:(IOSIntArray *)array {
  {
    IOSIntArray *a__ = array;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint element = *b__++;
      if (![this$0_ containsKeyWithInt:element]) {
        return NO;
      }
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithIntArray:(IOSIntArray *)array {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangInteger_valueOfWithInt_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTIntCollection>) nil_chk(collection)) containsWithInt:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithIntArray_(array);
  IOSIntArray *set = this$0_->_set_;
  IOSByteArray *states = this$0_->_states_;
  for (jint i = ((IOSIntArray *) nil_chk(set))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (JavaUtilArrays_binarySearchWithIntArray_withInt_(array, IOSIntArray_Get(set, i)) < 0)) {
      [this$0_ removeAtWithInt:i];
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangInteger class]]) {
      jint c = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue];
      if ([self removeWithInt:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (collection == self) {
    [self clear];
    return YES;
  }
  jboolean changed = NO;
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    jint element = [iter next];
    if ([self removeWithInt:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSIntArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithInt:IOSIntArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)clear {
  [this$0_ clear];
}

- (jboolean)forEachWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure {
  return [this$0_ forEachKeyWithGnuTroveProcedureTIntProcedure:procedure];
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveSetTIntSet_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveSetTIntSet> that = (id<GnuTroveSetTIntSet>) check_protocol_cast(other, @protocol(GnuTroveSetTIntSet));
  if ([((id<GnuTroveSetTIntSet>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  for (jint i = ((IOSByteArray *) nil_chk(this$0_->_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(this$0_->_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      if (![that containsWithInt:IOSIntArray_Get(nil_chk(this$0_->_set_), i)]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  for (jint i = ((IOSByteArray *) nil_chk(this$0_->_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(this$0_->_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithInt_(IOSIntArray_Get(nil_chk(this$0_->_set_), i));
    }
  }
  return hashcode;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  jboolean first = YES;
  for (jint i = ((IOSByteArray *) nil_chk(this$0_->_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(this$0_->_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      if (first) first = NO;
      else [buf appendWithNSString:@","];
      [buf appendWithInt:IOSIntArray_Get(nil_chk(this$0_->_set_), i)];
    }
  }
  return [buf description];
}

- (instancetype)initWithGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)outer$ {
  GnuTroveMapHashTIntObjectHashMap_KeyView_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap_KeyView *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntObjectHashMap_KeyView_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getNoEntryValue", NULL, "I", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "containsWithInt:", "contains", "Z", 0x1, NULL },
    { "iterator", NULL, "Lgnu.trove.iterator.TIntIterator;", 0x1, NULL },
    { "toArray", NULL, "[I", 0x1, NULL },
    { "toArrayWithIntArray:", "toArray", "[I", 0x1, NULL },
    { "addWithInt:", "add", "Z", 0x1, NULL },
    { "removeWithInt:", "remove", "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTIntCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithIntArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTIntCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithIntArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTIntCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithIntArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTIntCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithIntArray:", "removeAll", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "forEachWithGnuTroveProcedureTIntProcedure:", "forEach", "Z", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "initWithGnuTroveMapHashTIntObjectHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntObjectHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap_KeyView = { 1, "KeyView", "gnu.trove.map.hash", "TIntObjectHashMap", 0x0, 27, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntObjectHashMap_KeyView;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap_KeyView)

@implementation GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator

- (instancetype)initWithGnuTroveMapHashTIntObjectHashMap_KeyView:(GnuTroveMapHashTIntObjectHashMap_KeyView *)outer$
                                    withGnuTroveImplHashTIntHash:(GnuTroveImplHashTIntHash *)hash_ {
  if (self = [super initWithGnuTroveImplHashTPrimitiveHash:hash_]) {
    GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator_set__hash_TIntHashIterator_(self, hash_);
  }
  return self;
}

- (jint)next {
  [self moveToNextIndex];
  return IOSIntArray_Get(nil_chk(((GnuTroveImplHashTIntHash *) nil_chk(_hash_TIntHashIterator_))->_set_), _index_);
}

- (void)dealloc {
  RELEASE_(_hash_TIntHashIterator_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator_set__hash_TIntHashIterator_(other, _hash_TIntHashIterator_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTIntObjectHashMap_KeyView:withGnuTroveImplHashTIntHash:", "TIntHashIterator", NULL, 0x1, NULL },
    { "next", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "_hash_TIntHashIterator_", "_hash", 0x12, "Lgnu.trove.impl.hash.TIntHash;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator = { 1, "TIntHashIterator", "gnu.trove.map.hash", "TIntObjectHashMap$KeyView", 0x0, 2, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap_KeyView_TIntHashIterator)

@implementation GnuTroveMapHashTIntObjectHashMap_MapBackedView

- (id<JavaUtilIterator>)iterator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)removeElementWithId:(id)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)containsElementWithId:(id)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)containsWithId:(id)key {
  return [self containsElementWithId:(id) key];
}

- (jboolean)removeWithId:(id)o {
  return [self removeElementWithId:(id) o];
}

- (void)clear {
  [this$0_ clear];
}

- (jboolean)addWithId:(id)obj {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jint)size {
  return [this$0_ size];
}

- (IOSObjectArray *)toArray {
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:[self size] type:NSObject_class_()];
  id<JavaUtilIterator> e = [self iterator];
  for (jint i = 0; [((id<JavaUtilIterator>) nil_chk(e)) hasNext]; i++) {
    IOSObjectArray_Set(result, i, [e next]);
  }
  return result;
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  jint size = [self size];
  if (((IOSObjectArray *) nil_chk(a))->size_ < size) {
    a = (IOSObjectArray *) check_class_cast(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[a getClass] getComponentType], size), [IOSObjectArray class]);
  }
  id<JavaUtilIterator> it = [self iterator];
  IOSObjectArray *result = a;
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(nil_chk(result), i, [((id<JavaUtilIterator>) nil_chk(it)) next]);
  }
  if (((IOSObjectArray *) nil_chk(a))->size_ > size) {
    IOSObjectArray_Set(a, size, nil);
  }
  return a;
}

- (jboolean)isEmpty {
  return [this$0_ isEmpty];
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  id<JavaUtilIterator> i = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:[i next]]) {
      [i remove];
      changed = YES;
    }
  }
  return changed;
}

- (instancetype)initWithGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)outer$ {
  GnuTroveMapHashTIntObjectHashMap_MapBackedView_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap_MapBackedView *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntObjectHashMap_MapBackedView_set_this$0_(other, this$0_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Ljava.util.Iterator;", 0x401, NULL },
    { "removeElementWithId:", "removeElement", "Z", 0x401, NULL },
    { "containsElementWithId:", "containsElement", "Z", 0x401, NULL },
    { "containsWithId:", "contains", "Z", 0x1, NULL },
    { "removeWithId:", "remove", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "toArray", NULL, "[Ljava.lang.Object;", 0x1, NULL },
    { "toArrayWithNSObjectArray:", "toArray", "[Ljava.lang.Object;", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "initWithGnuTroveMapHashTIntObjectHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntObjectHashMap;", NULL,  },
  };
  static const char *superclass_type_args[] = {"TE;"};
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap_MapBackedView = { 1, "MapBackedView", "gnu.trove.map.hash", "TIntObjectHashMap", 0x402, 14, methods, 1, fields, 1, superclass_type_args};
  return &_GnuTroveMapHashTIntObjectHashMap_MapBackedView;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap_MapBackedView)

@implementation GnuTroveMapHashTIntObjectHashMap_ValueView

- (id<JavaUtilIterator>)iterator {
  return [[[GnuTroveMapHashTIntObjectHashMap_ValueView_$1 alloc] initWithGnuTroveMapHashTIntObjectHashMap_ValueView:self withGnuTroveMapHashTIntObjectHashMap:this$1_] autorelease];
}

- (jboolean)containsElementWithId:(id)value {
  return [this$1_ containsValueWithId:value];
}

- (jboolean)removeElementWithId:(id)value {
  IOSObjectArray *values = this$1_->_values_;
  IOSByteArray *states = this$1_->_states_;
  for (jint i = ((IOSObjectArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      if (value == IOSObjectArray_Get(values, i) || (nil != IOSObjectArray_Get(values, i) && [nil_chk(IOSObjectArray_Get(values, i)) isEqual:value])) {
        [this$1_ removeAtWithInt:i];
        return YES;
      }
    }
  }
  return NO;
}

- (instancetype)initWithGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)outer$ {
  GnuTroveMapHashTIntObjectHashMap_ValueView_set_this$1_(self, outer$);
  return [super initWithGnuTroveMapHashTIntObjectHashMap:outer$];
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap_ValueView *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntObjectHashMap_ValueView_set_this$1_(other, this$1_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL },
    { "containsElementWithId:", "containsElement", "Z", 0x1, NULL },
    { "removeElementWithId:", "removeElement", "Z", 0x1, NULL },
    { "initWithGnuTroveMapHashTIntObjectHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntObjectHashMap;", NULL,  },
  };
  static const char *superclass_type_args[] = {"TV;"};
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap_ValueView = { 1, "ValueView", "gnu.trove.map.hash", "TIntObjectHashMap", 0x4, 4, methods, 1, fields, 1, superclass_type_args};
  return &_GnuTroveMapHashTIntObjectHashMap_ValueView;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap_ValueView)

@implementation GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator

- (instancetype)initWithGnuTroveMapHashTIntObjectHashMap_ValueView:(GnuTroveMapHashTIntObjectHashMap_ValueView *)outer$
                              withGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)map {
  GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator_set_this$0_(self, outer$);
  if (self = [super initWithGnuTroveImplHashTPrimitiveHash:map]) {
    GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator_set__map_(self, map);
  }
  return self;
}

- (id)objectAtIndexWithInt:(jint)index {
  IOSByteArray *states = this$0_->this$1_->_states_;
  id value = IOSObjectArray_Get(nil_chk(((GnuTroveMapHashTIntObjectHashMap *) nil_chk(_map_))->_values_), index);
  if (IOSByteArray_Get(nil_chk(states), index) != GnuTroveImplHashTPrimitiveHash_FULL) {
    return nil;
  }
  return (id) value;
}

- (id)next {
  [self moveToNextIndex];
  return (id) IOSObjectArray_Get(nil_chk(((GnuTroveMapHashTIntObjectHashMap *) nil_chk(_map_))->_values_), _index_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(_map_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator_set_this$0_(other, this$0_);
  GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator_set__map_(other, _map_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTIntObjectHashMap_ValueView:withGnuTroveMapHashTIntObjectHashMap:", "TIntObjectValueHashIterator", NULL, 0x1, NULL },
    { "objectAtIndexWithInt:", "objectAtIndex", "TV;", 0x4, NULL },
    { "next", NULL, "TV;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntObjectHashMap$ValueView;", NULL,  },
    { "_map_", NULL, 0x14, "Lgnu.trove.map.hash.TIntObjectHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator = { 1, "TIntObjectValueHashIterator", "gnu.trove.map.hash", "TIntObjectHashMap$ValueView", 0x0, 3, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap_ValueView_TIntObjectValueHashIterator)

@implementation GnuTroveMapHashTIntObjectHashMap_ValueView_$1

- (id)objectAtIndexWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(this$1_->this$1_->_values_), index);
}

- (instancetype)initWithGnuTroveMapHashTIntObjectHashMap_ValueView:(GnuTroveMapHashTIntObjectHashMap_ValueView *)outer$
                              withGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)arg$0 {
  GnuTroveMapHashTIntObjectHashMap_ValueView_$1_set_this$1_(self, outer$);
  return [super initWithGnuTroveMapHashTIntObjectHashMap_ValueView:outer$ withGnuTroveMapHashTIntObjectHashMap:arg$0];
}

- (void)dealloc {
  RELEASE_(this$1_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap_ValueView_$1 *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntObjectHashMap_ValueView_$1_set_this$1_(other, this$1_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "objectAtIndexWithInt:", "objectAtIndex", "TV;", 0x4, NULL },
    { "initWithGnuTroveMapHashTIntObjectHashMap_ValueView:withGnuTroveMapHashTIntObjectHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntObjectHashMap$ValueView;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap_ValueView_$1 = { 1, "$1", "gnu.trove.map.hash", "TIntObjectHashMap$ValueView", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntObjectHashMap_ValueView_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap_ValueView_$1)

@implementation GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator

- (instancetype)initWithGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)outer$
                    withGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)map {
  if (self = [super initWithGnuTroveImplHashTPrimitiveHash:map]) {
    GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator_set__map_(self, map);
  }
  return self;
}

- (void)advance {
  [self moveToNextIndex];
}

- (jint)key {
  return IOSIntArray_Get(nil_chk(((GnuTroveMapHashTIntObjectHashMap *) nil_chk(_map_))->_set_), _index_);
}

- (id)value {
  return IOSObjectArray_Get(nil_chk(((GnuTroveMapHashTIntObjectHashMap *) nil_chk(_map_))->_values_), _index_);
}

- (id)setValueWithId:(id)val {
  id old = [self value];
  IOSObjectArray_Set(nil_chk(((GnuTroveMapHashTIntObjectHashMap *) nil_chk(_map_))->_values_), _index_, val);
  return old;
}

- (void)dealloc {
  RELEASE_(_map_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator_set__map_(other, _map_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTIntObjectHashMap:withGnuTroveMapHashTIntObjectHashMap:", "TIntObjectHashIterator", NULL, 0x1, NULL },
    { "advance", NULL, "V", 0x1, NULL },
    { "key", NULL, "I", 0x1, NULL },
    { "value", NULL, "TV;", 0x1, NULL },
    { "setValueWithId:", "setValue", "TV;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "_map_", NULL, 0x12, "Lgnu.trove.map.hash.TIntObjectHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator = { 1, "TIntObjectHashIterator", "gnu.trove.map.hash", "TIntObjectHashMap", 0x0, 5, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap_TIntObjectHashIterator)

@implementation GnuTroveMapHashTIntObjectHashMap_$1

- (jboolean)executeWithInt:(jint)key
                    withId:(id)value {
  [this$0_ putWithInt:key withId:value];
  return YES;
}

- (instancetype)initWithGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)outer$ {
  GnuTroveMapHashTIntObjectHashMap_$1_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap_$1 *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntObjectHashMap_$1_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithInt:withId:", "execute", "Z", 0x1, NULL },
    { "initWithGnuTroveMapHashTIntObjectHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntObjectHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap_$1 = { 1, "$1", "gnu.trove.map.hash", "TIntObjectHashMap", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntObjectHashMap_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap_$1)

@implementation GnuTroveMapHashTIntObjectHashMap_$2

- (jboolean)executeWithInt:(jint)key
                    withId:(id)value {
  if (first_) first_ = NO;
  else [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@","];
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithInt:key];
  [val$buf_ appendWithNSString:@"="];
  [val$buf_ appendWithId:value];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTIntObjectHashMap_$2_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntObjectHashMap_$2 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTIntObjectHashMap_$2_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithInt:withId:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntObjectHashMap_$2 = { 1, "$2", "gnu.trove.map.hash", "TIntObjectHashMap", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTIntObjectHashMap_$2;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntObjectHashMap_$2)
