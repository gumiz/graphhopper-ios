//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/map/hash/TLongIntHashMap.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/TIntCollection.h"
#include "gnu/trove/TLongCollection.h"
#include "gnu/trove/function/TIntFunction.h"
#include "gnu/trove/impl/HashFunctions.h"
#include "gnu/trove/impl/hash/THash.h"
#include "gnu/trove/impl/hash/THashPrimitiveIterator.h"
#include "gnu/trove/impl/hash/TLongIntHash.h"
#include "gnu/trove/impl/hash/TPrimitiveHash.h"
#include "gnu/trove/iterator/TIntIterator.h"
#include "gnu/trove/iterator/TLongIntIterator.h"
#include "gnu/trove/iterator/TLongIterator.h"
#include "gnu/trove/map/TLongIntMap.h"
#include "gnu/trove/map/hash/TLongIntHashMap.h"
#include "gnu/trove/procedure/TIntProcedure.h"
#include "gnu/trove/procedure/TLongIntProcedure.h"
#include "gnu/trove/procedure/TLongProcedure.h"
#include "gnu/trove/set/TLongSet.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

__attribute__((unused)) static jint GnuTroveMapHashTLongIntHashMap_doPutWithLong_withInt_withInt_(GnuTroveMapHashTLongIntHashMap *self, jlong key, jint value, jint index);

@interface GnuTroveMapHashTLongIntHashMap ()

- (jint)doPutWithLong:(jlong)key
              withInt:(jint)value
              withInt:(jint)index;
@end

@interface GnuTroveMapHashTLongIntHashMap_TKeyView () {
 @public
  GnuTroveMapHashTLongIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongIntHashMap_TKeyView, this$0_, GnuTroveMapHashTLongIntHashMap *)

@interface GnuTroveMapHashTLongIntHashMap_TKeyView_$1 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongIntHashMap_TKeyView_$1, val$buf_, JavaLangStringBuilder *)

@interface GnuTroveMapHashTLongIntHashMap_TValueView () {
 @public
  GnuTroveMapHashTLongIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongIntHashMap_TValueView, this$0_, GnuTroveMapHashTLongIntHashMap *)

@interface GnuTroveMapHashTLongIntHashMap_TValueView_$1 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongIntHashMap_TValueView_$1, val$buf_, JavaLangStringBuilder *)

@interface GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator () {
 @public
  GnuTroveMapHashTLongIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator, this$0_, GnuTroveMapHashTLongIntHashMap *)

@interface GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator () {
 @public
  GnuTroveMapHashTLongIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator, this$0_, GnuTroveMapHashTLongIntHashMap *)

@interface GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator () {
 @public
  GnuTroveMapHashTLongIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator, this$0_, GnuTroveMapHashTLongIntHashMap *)

@interface GnuTroveMapHashTLongIntHashMap_$1 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTLongIntHashMap_$1, val$buf_, JavaLangStringBuilder *)

@implementation GnuTroveMapHashTLongIntHashMap

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithInt:(jint)initialCapacity {
  return [super initWithInt:initialCapacity];
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor {
  return [super initWithInt:initialCapacity withFloat:loadFactor];
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor
                   withLong:(jlong)noEntryKey
                    withInt:(jint)noEntryValue {
  return [super initWithInt:initialCapacity withFloat:loadFactor withLong:noEntryKey withInt:noEntryValue];
}

- (instancetype)initWithLongArray:(IOSLongArray *)keys
                     withIntArray:(IOSIntArray *)values {
  if (self = [super initWithInt:JavaLangMath_maxWithInt_withInt_(((IOSLongArray *) nil_chk(keys))->size_, ((IOSIntArray *) nil_chk(values))->size_)]) {
    jint size = JavaLangMath_minWithInt_withInt_(keys->size_, values->size_);
    for (jint i = 0; i < size; i++) {
      [self putWithLong:IOSLongArray_Get(keys, i) withInt:IOSIntArray_Get(values, i)];
    }
  }
  return self;
}

- (instancetype)initWithGnuTroveMapTLongIntMap:(id<GnuTroveMapTLongIntMap>)map {
  if (self = [super initWithInt:[((id<GnuTroveMapTLongIntMap>) nil_chk(map)) size]]) {
    if ([map isKindOfClass:[GnuTroveMapHashTLongIntHashMap class]]) {
      GnuTroveMapHashTLongIntHashMap *hashmap = (GnuTroveMapHashTLongIntHashMap *) check_class_cast(map, [GnuTroveMapHashTLongIntHashMap class]);
      self->_loadFactor_ = hashmap->_loadFactor_;
      self->no_entry_key_ = hashmap->no_entry_key_;
      self->no_entry_value_ = hashmap->no_entry_value_;
      if (self->no_entry_key_ != (jlong) 0) {
        JavaUtilArrays_fillWithLongArray_withLong_(_set_, self->no_entry_key_);
      }
      if (self->no_entry_value_ != (jint) 0) {
        JavaUtilArrays_fillWithIntArray_withInt_(_values_, self->no_entry_value_);
      }
      [self setUpWithInt:J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(GnuTroveImplHashTHash_DEFAULT_CAPACITY / _loadFactor_))];
    }
    [self putAllWithGnuTroveMapTLongIntMap:map];
  }
  return self;
}

- (jint)setUpWithInt:(jint)initialCapacity {
  jint capacity;
  capacity = [super setUpWithInt:initialCapacity];
  GnuTroveMapHashTLongIntHashMap_setAndConsume__values_(self, [IOSIntArray newArrayWithLength:capacity]);
  return capacity;
}

- (void)rehashWithInt:(jint)newCapacity {
  jint oldCapacity = ((IOSLongArray *) nil_chk(_set_))->size_;
  IOSLongArray *oldKeys = _set_;
  IOSIntArray *oldVals = _values_;
  IOSByteArray *oldStates = _states_;
  GnuTroveImplHashTLongIntHash_setAndConsume__set_(self, [IOSLongArray newArrayWithLength:newCapacity]);
  GnuTroveMapHashTLongIntHashMap_setAndConsume__values_(self, [IOSIntArray newArrayWithLength:newCapacity]);
  GnuTroveImplHashTPrimitiveHash_setAndConsume__states_(self, [IOSByteArray newArrayWithLength:newCapacity]);
  for (jint i = oldCapacity; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(oldStates), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      jlong o = IOSLongArray_Get(oldKeys, i);
      jint index = [self insertKeyWithLong:o];
      *IOSIntArray_GetRef(_values_, index) = IOSIntArray_Get(nil_chk(oldVals), i);
    }
  }
}

- (jint)putWithLong:(jlong)key
            withInt:(jint)value {
  jint index = [self insertKeyWithLong:key];
  return GnuTroveMapHashTLongIntHashMap_doPutWithLong_withInt_withInt_(self, key, value, index);
}

- (jint)putIfAbsentWithLong:(jlong)key
                    withInt:(jint)value {
  jint index = [self insertKeyWithLong:key];
  if (index < 0) return IOSIntArray_Get(nil_chk(_values_), -index - 1);
  return GnuTroveMapHashTLongIntHashMap_doPutWithLong_withInt_withInt_(self, key, value, index);
}

- (jint)doPutWithLong:(jlong)key
              withInt:(jint)value
              withInt:(jint)index {
  return GnuTroveMapHashTLongIntHashMap_doPutWithLong_withInt_withInt_(self, key, value, index);
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  [self ensureCapacityWithInt:[((id<JavaUtilMap>) nil_chk(map)) size]];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([map entrySet])) {
    [self putWithLong:[((JavaLangLong *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) longLongValue] withInt:[((JavaLangInteger *) nil_chk([entry_ getValue])) intValue]];
  }
}

- (void)putAllWithGnuTroveMapTLongIntMap:(id<GnuTroveMapTLongIntMap>)map {
  [self ensureCapacityWithInt:[((id<GnuTroveMapTLongIntMap>) nil_chk(map)) size]];
  id<GnuTroveIteratorTLongIntIterator> iter = [map iterator];
  while ([((id<GnuTroveIteratorTLongIntIterator>) nil_chk(iter)) hasNext]) {
    [iter advance];
    [self putWithLong:[iter key] withInt:[iter value]];
  }
}

- (jint)getWithLong:(jlong)key {
  jint index = [self indexWithLong:key];
  return index < 0 ? no_entry_value_ : IOSIntArray_Get(nil_chk(_values_), index);
}

- (void)clear {
  [super clear];
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(_set_, 0, ((IOSLongArray *) nil_chk(_set_))->size_, no_entry_key_);
  JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(_values_, 0, ((IOSIntArray *) nil_chk(_values_))->size_, no_entry_value_);
  JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(_states_, 0, ((IOSByteArray *) nil_chk(_states_))->size_, GnuTroveImplHashTPrimitiveHash_FREE);
}

- (jboolean)isEmpty {
  return 0 == _size_;
}

- (jint)removeWithLong:(jlong)key {
  jint prev = no_entry_value_;
  jint index = [self indexWithLong:key];
  if (index >= 0) {
    prev = IOSIntArray_Get(nil_chk(_values_), index);
    [self removeAtWithInt:index];
  }
  return prev;
}

- (void)removeAtWithInt:(jint)index {
  *IOSIntArray_GetRef(nil_chk(_values_), index) = no_entry_value_;
  [super removeAtWithInt:index];
}

- (id<GnuTroveSetTLongSet>)keySet {
  return [[[GnuTroveMapHashTLongIntHashMap_TKeyView alloc] initWithGnuTroveMapHashTLongIntHashMap:self] autorelease];
}

- (IOSLongArray *)keys {
  IOSLongArray *keys = [IOSLongArray arrayWithLength:[self size]];
  if (keys->size_ == 0) {
    return keys;
  }
  IOSLongArray *k = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSLongArray *) nil_chk(k))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSLongArray_GetRef(keys, j++) = IOSLongArray_Get(k, i);
    }
  }
  return keys;
}

- (IOSLongArray *)keysWithLongArray:(IOSLongArray *)array {
  jint size = [self size];
  if (size == 0) {
    return array;
  }
  if (((IOSLongArray *) nil_chk(array))->size_ < size) {
    array = [IOSLongArray arrayWithLength:size];
  }
  IOSLongArray *keys = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSLongArray *) nil_chk(keys))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSLongArray_GetRef(array, j++) = IOSLongArray_Get(keys, i);
    }
  }
  return array;
}

- (id<GnuTroveTIntCollection>)valueCollection {
  return [[[GnuTroveMapHashTLongIntHashMap_TValueView alloc] initWithGnuTroveMapHashTLongIntHashMap:self] autorelease];
}

- (IOSIntArray *)values {
  IOSIntArray *vals = [IOSIntArray arrayWithLength:[self size]];
  if (vals->size_ == 0) {
    return vals;
  }
  IOSIntArray *v = _values_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(v))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(vals, j++) = IOSIntArray_Get(v, i);
    }
  }
  return vals;
}

- (IOSIntArray *)valuesWithIntArray:(IOSIntArray *)array {
  jint size = [self size];
  if (size == 0) {
    return array;
  }
  if (((IOSIntArray *) nil_chk(array))->size_ < size) {
    array = [IOSIntArray arrayWithLength:size];
  }
  IOSIntArray *v = _values_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(v))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(array, j++) = IOSIntArray_Get(v, i);
    }
  }
  return array;
}

- (jboolean)containsValueWithInt:(jint)val {
  IOSByteArray *states = _states_;
  IOSIntArray *vals = _values_;
  for (jint i = ((IOSIntArray *) nil_chk(vals))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && val == IOSIntArray_Get(vals, i)) {
      return YES;
    }
  }
  return NO;
}

- (jboolean)containsKeyWithLong:(jlong)key {
  return [self containsWithLong:key];
}

- (id<GnuTroveIteratorTLongIntIterator>)iterator {
  return [[[GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator alloc] initWithGnuTroveMapHashTLongIntHashMap:self withGnuTroveMapHashTLongIntHashMap:self] autorelease];
}

- (jboolean)forEachKeyWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure {
  return [self forEachWithGnuTroveProcedureTLongProcedure:procedure];
}

- (jboolean)forEachValueWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure {
  IOSByteArray *states = _states_;
  IOSIntArray *values = _values_;
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTIntProcedure>) nil_chk(procedure)) executeWithInt:IOSIntArray_Get(values, i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)forEachEntryWithGnuTroveProcedureTLongIntProcedure:(id<GnuTroveProcedureTLongIntProcedure>)procedure {
  IOSByteArray *states = _states_;
  IOSLongArray *keys = _set_;
  IOSIntArray *values = _values_;
  for (jint i = ((IOSLongArray *) nil_chk(keys))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTLongIntProcedure>) nil_chk(procedure)) executeWithLong:IOSLongArray_Get(keys, i) withInt:IOSIntArray_Get(nil_chk(values), i)]) {
      return NO;
    }
  }
  return YES;
}

- (void)transformValuesWithGnuTroveFunctionTIntFunction:(id<GnuTroveFunctionTIntFunction>)function {
  IOSByteArray *states = _states_;
  IOSIntArray *values = _values_;
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(values, i) = [((id<GnuTroveFunctionTIntFunction>) nil_chk(function)) executeWithInt:IOSIntArray_Get(values, i)];
    }
  }
}

- (jboolean)retainEntriesWithGnuTroveProcedureTLongIntProcedure:(id<GnuTroveProcedureTLongIntProcedure>)procedure {
  jboolean modified = NO;
  IOSByteArray *states = _states_;
  IOSLongArray *keys = _set_;
  IOSIntArray *values = _values_;
  [self tempDisableAutoCompaction];
  @try {
    for (jint i = ((IOSLongArray *) nil_chk(keys))->size_; i-- > 0; ) {
      if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTLongIntProcedure>) nil_chk(procedure)) executeWithLong:IOSLongArray_Get(keys, i) withInt:IOSIntArray_Get(nil_chk(values), i)]) {
        [self removeAtWithInt:i];
        modified = YES;
      }
    }
  }
  @finally {
    [self reenableAutoCompactionWithBoolean:YES];
  }
  return modified;
}

- (jboolean)incrementWithLong:(jlong)key {
  return [self adjustValueWithLong:key withInt:(jint) 1];
}

- (jboolean)adjustValueWithLong:(jlong)key
                        withInt:(jint)amount {
  jint index = [self indexWithLong:key];
  if (index < 0) {
    return NO;
  }
  else {
    *IOSIntArray_GetRef(nil_chk(_values_), index) += amount;
    return YES;
  }
}

- (jint)adjustOrPutValueWithLong:(jlong)key
                         withInt:(jint)adjust_amount
                         withInt:(jint)put_amount {
  jint index = [self insertKeyWithLong:key];
  jboolean isNewMapping;
  jint newValue;
  if (index < 0) {
    index = -index - 1;
    newValue = (*IOSIntArray_GetRef(nil_chk(_values_), index) += adjust_amount);
    isNewMapping = NO;
  }
  else {
    newValue = (*IOSIntArray_GetRef(nil_chk(_values_), index) = put_amount);
    isNewMapping = YES;
  }
  jbyte previousState = IOSByteArray_Get(nil_chk(_states_), index);
  if (isNewMapping) {
    [self postInsertHookWithBoolean:consumeFreeSlot_];
  }
  return newValue;
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveMapTLongIntMap_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveMapTLongIntMap> that = (id<GnuTroveMapTLongIntMap>) check_protocol_cast(other, @protocol(GnuTroveMapTLongIntMap));
  if ([((id<GnuTroveMapTLongIntMap>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  IOSIntArray *values = _values_;
  IOSByteArray *states = _states_;
  jint this_no_entry_value = [self getNoEntryValue];
  jint that_no_entry_value = [that getNoEntryValue];
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      jlong key = IOSLongArray_Get(nil_chk(_set_), i);
      jint that_value = [that getWithLong:key];
      jint this_value = IOSIntArray_Get(values, i);
      if ((this_value != that_value) && (this_value != this_no_entry_value) && (that_value != that_no_entry_value)) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(_values_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithLong_(IOSLongArray_Get(nil_chk(_set_), i)) ^ GnuTroveImplHashFunctions_hash__WithInt_(IOSIntArray_Get(_values_, i));
    }
  }
  return hashcode;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [self forEachEntryWithGnuTroveProcedureTLongIntProcedure:[[[GnuTroveMapHashTLongIntHashMap_$1 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeByteWithInt:0];
  [super writeExternalWithJavaIoObjectOutput:outArg];
  [outArg writeIntWithInt:_size_];
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      [outArg writeLongWithLong:IOSLongArray_Get(nil_chk(_set_), i)];
      [outArg writeIntWithInt:IOSIntArray_Get(nil_chk(_values_), i)];
    }
  }
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  [((id<JavaIoObjectInput>) nil_chk(inArg)) readByte];
  [super readExternalWithJavaIoObjectInput:inArg];
  jint size = [inArg readInt];
  [self setUpWithInt:size];
  while (size-- > 0) {
    jlong key = [inArg readLong];
    jint val = [inArg readInt];
    [self putWithLong:key withInt:val];
  }
}

- (void)dealloc {
  RELEASE_(_values_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongIntHashMap *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongIntHashMap_set__values_(other, _values_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TLongIntHashMap", NULL, 0x1, NULL },
    { "initWithInt:", "TLongIntHashMap", NULL, 0x1, NULL },
    { "initWithInt:withFloat:", "TLongIntHashMap", NULL, 0x1, NULL },
    { "initWithInt:withFloat:withLong:withInt:", "TLongIntHashMap", NULL, 0x1, NULL },
    { "initWithLongArray:withIntArray:", "TLongIntHashMap", NULL, 0x1, NULL },
    { "initWithGnuTroveMapTLongIntMap:", "TLongIntHashMap", NULL, 0x1, NULL },
    { "setUpWithInt:", "setUp", "I", 0x4, NULL },
    { "rehashWithInt:", "rehash", "V", 0x4, NULL },
    { "putWithLong:withInt:", "put", "I", 0x1, NULL },
    { "putIfAbsentWithLong:withInt:", "putIfAbsent", "I", 0x1, NULL },
    { "doPutWithLong:withInt:withInt:", "doPut", "I", 0x2, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL },
    { "putAllWithGnuTroveMapTLongIntMap:", "putAll", "V", 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "removeWithLong:", "remove", "I", 0x1, NULL },
    { "removeAtWithInt:", "removeAt", "V", 0x4, NULL },
    { "keySet", NULL, "Lgnu.trove.set.TLongSet;", 0x1, NULL },
    { "keys", NULL, "[J", 0x1, NULL },
    { "keysWithLongArray:", "keys", "[J", 0x1, NULL },
    { "valueCollection", NULL, "Lgnu.trove.TIntCollection;", 0x1, NULL },
    { "values", NULL, "[I", 0x1, NULL },
    { "valuesWithIntArray:", "values", "[I", 0x1, NULL },
    { "containsValueWithInt:", "containsValue", "Z", 0x1, NULL },
    { "containsKeyWithLong:", "containsKey", "Z", 0x1, NULL },
    { "iterator", NULL, "Lgnu.trove.iterator.TLongIntIterator;", 0x1, NULL },
    { "forEachKeyWithGnuTroveProcedureTLongProcedure:", "forEachKey", "Z", 0x1, NULL },
    { "forEachValueWithGnuTroveProcedureTIntProcedure:", "forEachValue", "Z", 0x1, NULL },
    { "forEachEntryWithGnuTroveProcedureTLongIntProcedure:", "forEachEntry", "Z", 0x1, NULL },
    { "transformValuesWithGnuTroveFunctionTIntFunction:", "transformValues", "V", 0x1, NULL },
    { "retainEntriesWithGnuTroveProcedureTLongIntProcedure:", "retainEntries", "Z", 0x1, NULL },
    { "incrementWithLong:", "increment", "Z", 0x1, NULL },
    { "adjustValueWithLong:withInt:", "adjustValue", "Z", 0x1, NULL },
    { "adjustOrPutValueWithLong:withInt:withInt:", "adjustOrPutValue", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;" },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, .constantValue.asLong = GnuTroveMapHashTLongIntHashMap_serialVersionUID },
    { "_values_", NULL, 0x84, "[I", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongIntHashMap = { 1, "TLongIntHashMap", "gnu.trove.map.hash", NULL, 0x1, 40, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTLongIntHashMap;
}

@end

jint GnuTroveMapHashTLongIntHashMap_doPutWithLong_withInt_withInt_(GnuTroveMapHashTLongIntHashMap *self, jlong key, jint value, jint index) {
  jint previous = self->no_entry_value_;
  jboolean isNewMapping = YES;
  if (index < 0) {
    index = -index - 1;
    previous = IOSIntArray_Get(nil_chk(self->_values_), index);
    isNewMapping = NO;
  }
  *IOSIntArray_GetRef(nil_chk(self->_values_), index) = value;
  if (isNewMapping) {
    [self postInsertHookWithBoolean:self->consumeFreeSlot_];
  }
  return previous;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongIntHashMap)

@implementation GnuTroveMapHashTLongIntHashMap_TKeyView

- (id<GnuTroveIteratorTLongIterator>)iterator {
  return [[[GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator alloc] initWithGnuTroveMapHashTLongIntHashMap:this$0_ withGnuTroveImplHashTPrimitiveHash:this$0_] autorelease];
}

- (jlong)getNoEntryValue {
  return this$0_->no_entry_key_;
}

- (jint)size {
  return this$0_->_size_;
}

- (jboolean)isEmpty {
  return 0 == this$0_->_size_;
}

- (jboolean)containsWithLong:(jlong)entry_ {
  return [this$0_ containsWithLong:entry_];
}

- (IOSLongArray *)toArray {
  return [this$0_ keys];
}

- (IOSLongArray *)toArrayWithLongArray:(IOSLongArray *)dest {
  return [this$0_ keysWithLongArray:dest];
}

- (jboolean)addWithLong:(jlong)entry_ {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)removeWithLong:(jlong)entry_ {
  return this$0_->no_entry_value_ != [this$0_ removeWithLong:entry_];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong ele = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if (![this$0_ containsKeyWithLong:ele]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![this$0_ containsKeyWithLong:[iter next]]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithLongArray:(IOSLongArray *)array {
  {
    IOSLongArray *a__ = array;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong element = *b__++;
      if (![this$0_ containsWithLong:element]) {
        return NO;
      }
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithLongArray:(IOSLongArray *)array {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangLong_valueOfWithLong_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTLongCollection>) nil_chk(collection)) containsWithLong:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithLongArray_(array);
  IOSLongArray *set = this$0_->_set_;
  IOSByteArray *states = this$0_->_states_;
  for (jint i = ((IOSLongArray *) nil_chk(set))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (JavaUtilArrays_binarySearchWithLongArray_withLong_(array, IOSLongArray_Get(set, i)) < 0)) {
      [this$0_ removeAtWithInt:i];
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong c = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if ([self removeWithLong:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self == collection) {
    [self clear];
    return YES;
  }
  jboolean changed = NO;
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    jlong element = [iter next];
    if ([self removeWithLong:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSLongArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithLong:IOSLongArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)clear {
  [this$0_ clear];
}

- (jboolean)forEachWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure {
  return [this$0_ forEachKeyWithGnuTroveProcedureTLongProcedure:procedure];
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveSetTLongSet_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveSetTLongSet> that = (id<GnuTroveSetTLongSet>) check_protocol_cast(other, @protocol(GnuTroveSetTLongSet));
  if ([((id<GnuTroveSetTLongSet>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  for (jint i = ((IOSByteArray *) nil_chk(this$0_->_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(this$0_->_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      if (![that containsWithLong:IOSLongArray_Get(nil_chk(this$0_->_set_), i)]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  for (jint i = ((IOSByteArray *) nil_chk(this$0_->_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(this$0_->_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithLong_(IOSLongArray_Get(nil_chk(this$0_->_set_), i));
    }
  }
  return hashcode;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [this$0_ forEachKeyWithGnuTroveProcedureTLongProcedure:[[[GnuTroveMapHashTLongIntHashMap_TKeyView_$1 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (instancetype)initWithGnuTroveMapHashTLongIntHashMap:(GnuTroveMapHashTLongIntHashMap *)outer$ {
  GnuTroveMapHashTLongIntHashMap_TKeyView_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongIntHashMap_TKeyView *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongIntHashMap_TKeyView_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Lgnu.trove.iterator.TLongIterator;", 0x1, NULL },
    { "getNoEntryValue", NULL, "J", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "containsWithLong:", "contains", "Z", 0x1, NULL },
    { "toArray", NULL, "[J", 0x1, NULL },
    { "toArrayWithLongArray:", "toArray", "[J", 0x1, NULL },
    { "addWithLong:", "add", "Z", 0x1, NULL },
    { "removeWithLong:", "remove", "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTLongCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithLongArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTLongCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithLongArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTLongCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithLongArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTLongCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithLongArray:", "removeAll", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "forEachWithGnuTroveProcedureTLongProcedure:", "forEach", "Z", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "initWithGnuTroveMapHashTLongIntHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongIntHashMap_TKeyView = { 1, "TKeyView", "gnu.trove.map.hash", "TLongIntHashMap", 0x4, 27, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongIntHashMap_TKeyView;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongIntHashMap_TKeyView)

@implementation GnuTroveMapHashTLongIntHashMap_TKeyView_$1

- (jboolean)executeWithLong:(jlong)key {
  if (first_) {
    first_ = NO;
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@", "];
  }
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithLong:key];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTLongIntHashMap_TKeyView_$1_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongIntHashMap_TKeyView_$1 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTLongIntHashMap_TKeyView_$1_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithLong:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongIntHashMap_TKeyView_$1 = { 1, "$1", "gnu.trove.map.hash", "TLongIntHashMap$TKeyView", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTLongIntHashMap_TKeyView_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongIntHashMap_TKeyView_$1)

@implementation GnuTroveMapHashTLongIntHashMap_TValueView

- (id<GnuTroveIteratorTIntIterator>)iterator {
  return [[[GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator alloc] initWithGnuTroveMapHashTLongIntHashMap:this$0_ withGnuTroveImplHashTPrimitiveHash:this$0_] autorelease];
}

- (jint)getNoEntryValue {
  return this$0_->no_entry_value_;
}

- (jint)size {
  return this$0_->_size_;
}

- (jboolean)isEmpty {
  return 0 == this$0_->_size_;
}

- (jboolean)containsWithInt:(jint)entry_ {
  return [this$0_ containsValueWithInt:entry_];
}

- (IOSIntArray *)toArray {
  return [this$0_ values];
}

- (IOSIntArray *)toArrayWithIntArray:(IOSIntArray *)dest {
  return [this$0_ valuesWithIntArray:dest];
}

- (jboolean)addWithInt:(jint)entry_ {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)removeWithInt:(jint)entry_ {
  IOSIntArray *values = this$0_->_values_;
  IOSLongArray *set = this$0_->_set_;
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if ((IOSLongArray_Get(nil_chk(set), i) != GnuTroveImplHashTPrimitiveHash_FREE && IOSLongArray_Get(set, i) != GnuTroveImplHashTPrimitiveHash_REMOVED) && entry_ == IOSIntArray_Get(values, i)) {
      [this$0_ removeAtWithInt:i];
      return YES;
    }
  }
  return NO;
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangInteger class]]) {
      jint ele = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue];
      if (![this$0_ containsValueWithInt:ele]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![this$0_ containsValueWithInt:[iter next]]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithIntArray:(IOSIntArray *)array {
  {
    IOSIntArray *a__ = array;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint element = *b__++;
      if (![this$0_ containsValueWithInt:element]) {
        return NO;
      }
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithIntArray:(IOSIntArray *)array {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangInteger_valueOfWithInt_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTIntCollection>) nil_chk(collection)) containsWithInt:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithIntArray_(array);
  IOSIntArray *values = this$0_->_values_;
  IOSByteArray *states = this$0_->_states_;
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (JavaUtilArrays_binarySearchWithIntArray_withInt_(array, IOSIntArray_Get(values, i)) < 0)) {
      [this$0_ removeAtWithInt:i];
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangInteger class]]) {
      jint c = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue];
      if ([self removeWithInt:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (self == collection) {
    [self clear];
    return YES;
  }
  jboolean changed = NO;
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    jint element = [iter next];
    if ([self removeWithInt:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSIntArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithInt:IOSIntArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)clear {
  [this$0_ clear];
}

- (jboolean)forEachWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure {
  return [this$0_ forEachValueWithGnuTroveProcedureTIntProcedure:procedure];
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [this$0_ forEachValueWithGnuTroveProcedureTIntProcedure:[[[GnuTroveMapHashTLongIntHashMap_TValueView_$1 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (instancetype)initWithGnuTroveMapHashTLongIntHashMap:(GnuTroveMapHashTLongIntHashMap *)outer$ {
  GnuTroveMapHashTLongIntHashMap_TValueView_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongIntHashMap_TValueView *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongIntHashMap_TValueView_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Lgnu.trove.iterator.TIntIterator;", 0x1, NULL },
    { "getNoEntryValue", NULL, "I", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "containsWithInt:", "contains", "Z", 0x1, NULL },
    { "toArray", NULL, "[I", 0x1, NULL },
    { "toArrayWithIntArray:", "toArray", "[I", 0x1, NULL },
    { "addWithInt:", "add", "Z", 0x1, NULL },
    { "removeWithInt:", "remove", "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTIntCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithIntArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTIntCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithIntArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTIntCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithIntArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTIntCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithIntArray:", "removeAll", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "forEachWithGnuTroveProcedureTIntProcedure:", "forEach", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "initWithGnuTroveMapHashTLongIntHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongIntHashMap_TValueView = { 1, "TValueView", "gnu.trove.map.hash", "TLongIntHashMap", 0x4, 25, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongIntHashMap_TValueView;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongIntHashMap_TValueView)

@implementation GnuTroveMapHashTLongIntHashMap_TValueView_$1

- (jboolean)executeWithInt:(jint)value {
  if (first_) {
    first_ = NO;
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@", "];
  }
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithInt:value];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTLongIntHashMap_TValueView_$1_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongIntHashMap_TValueView_$1 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTLongIntHashMap_TValueView_$1_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithInt:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongIntHashMap_TValueView_$1 = { 1, "$1", "gnu.trove.map.hash", "TLongIntHashMap$TValueView", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTLongIntHashMap_TValueView_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongIntHashMap_TValueView_$1)

@implementation GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator

- (instancetype)initWithGnuTroveMapHashTLongIntHashMap:(GnuTroveMapHashTLongIntHashMap *)outer$
                    withGnuTroveImplHashTPrimitiveHash:(GnuTroveImplHashTPrimitiveHash *)hash_ {
  GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator_set_this$0_(self, outer$);
  return [super initWithGnuTroveImplHashTPrimitiveHash:hash_];
}

- (jlong)next {
  [self moveToNextIndex];
  return IOSLongArray_Get(nil_chk(this$0_->_set_), _index_);
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [this$0_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTLongIntHashMap:withGnuTroveImplHashTPrimitiveHash:", "TLongIntKeyHashIterator", NULL, 0x0, NULL },
    { "next", NULL, "J", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator = { 1, "TLongIntKeyHashIterator", "gnu.trove.map.hash", "TLongIntHashMap", 0x0, 3, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongIntHashMap_TLongIntKeyHashIterator)

@implementation GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator

- (instancetype)initWithGnuTroveMapHashTLongIntHashMap:(GnuTroveMapHashTLongIntHashMap *)outer$
                    withGnuTroveImplHashTPrimitiveHash:(GnuTroveImplHashTPrimitiveHash *)hash_ {
  GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator_set_this$0_(self, outer$);
  return [super initWithGnuTroveImplHashTPrimitiveHash:hash_];
}

- (jint)next {
  [self moveToNextIndex];
  return IOSIntArray_Get(nil_chk(this$0_->_values_), _index_);
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [this$0_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTLongIntHashMap:withGnuTroveImplHashTPrimitiveHash:", "TLongIntValueHashIterator", NULL, 0x0, NULL },
    { "next", NULL, "I", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator = { 1, "TLongIntValueHashIterator", "gnu.trove.map.hash", "TLongIntHashMap", 0x0, 3, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongIntHashMap_TLongIntValueHashIterator)

@implementation GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator

- (instancetype)initWithGnuTroveMapHashTLongIntHashMap:(GnuTroveMapHashTLongIntHashMap *)outer$
                    withGnuTroveMapHashTLongIntHashMap:(GnuTroveMapHashTLongIntHashMap *)map {
  GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator_set_this$0_(self, outer$);
  return [super initWithGnuTroveImplHashTPrimitiveHash:map];
}

- (void)advance {
  [self moveToNextIndex];
}

- (jlong)key {
  return IOSLongArray_Get(nil_chk(this$0_->_set_), _index_);
}

- (jint)value {
  return IOSIntArray_Get(nil_chk(this$0_->_values_), _index_);
}

- (jint)setValueWithInt:(jint)val {
  jint old = [self value];
  *IOSIntArray_GetRef(nil_chk(this$0_->_values_), _index_) = val;
  return old;
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [this$0_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTLongIntHashMap:withGnuTroveMapHashTLongIntHashMap:", "TLongIntHashIterator", NULL, 0x0, NULL },
    { "advance", NULL, "V", 0x1, NULL },
    { "key", NULL, "J", 0x1, NULL },
    { "value", NULL, "I", 0x1, NULL },
    { "setValueWithInt:", "setValue", "I", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TLongIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator = { 1, "TLongIntHashIterator", "gnu.trove.map.hash", "TLongIntHashMap", 0x0, 6, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongIntHashMap_TLongIntHashIterator)

@implementation GnuTroveMapHashTLongIntHashMap_$1

- (jboolean)executeWithLong:(jlong)key
                    withInt:(jint)value {
  if (first_) first_ = NO;
  else [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithLong:key];
  [val$buf_ appendWithNSString:@"="];
  [val$buf_ appendWithInt:value];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTLongIntHashMap_$1_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTLongIntHashMap_$1 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTLongIntHashMap_$1_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithLong:withInt:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTLongIntHashMap_$1 = { 1, "$1", "gnu.trove.map.hash", "TLongIntHashMap", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTLongIntHashMap_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTLongIntHashMap_$1)
