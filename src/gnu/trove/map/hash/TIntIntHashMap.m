//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/map/hash/TIntIntHashMap.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/TIntCollection.h"
#include "gnu/trove/function/TIntFunction.h"
#include "gnu/trove/impl/HashFunctions.h"
#include "gnu/trove/impl/hash/THash.h"
#include "gnu/trove/impl/hash/THashPrimitiveIterator.h"
#include "gnu/trove/impl/hash/TIntIntHash.h"
#include "gnu/trove/impl/hash/TPrimitiveHash.h"
#include "gnu/trove/iterator/TIntIntIterator.h"
#include "gnu/trove/iterator/TIntIterator.h"
#include "gnu/trove/map/TIntIntMap.h"
#include "gnu/trove/map/hash/TIntIntHashMap.h"
#include "gnu/trove/procedure/TIntIntProcedure.h"
#include "gnu/trove/procedure/TIntProcedure.h"
#include "gnu/trove/set/TIntSet.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

__attribute__((unused)) static jint GnuTroveMapHashTIntIntHashMap_doPutWithInt_withInt_withInt_(GnuTroveMapHashTIntIntHashMap *self, jint key, jint value, jint index);

@interface GnuTroveMapHashTIntIntHashMap ()

- (jint)doPutWithInt:(jint)key
             withInt:(jint)value
             withInt:(jint)index;
@end

@interface GnuTroveMapHashTIntIntHashMap_TKeyView () {
 @public
  GnuTroveMapHashTIntIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntIntHashMap_TKeyView, this$0_, GnuTroveMapHashTIntIntHashMap *)

@interface GnuTroveMapHashTIntIntHashMap_TKeyView_$1 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntIntHashMap_TKeyView_$1, val$buf_, JavaLangStringBuilder *)

@interface GnuTroveMapHashTIntIntHashMap_TValueView () {
 @public
  GnuTroveMapHashTIntIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntIntHashMap_TValueView, this$0_, GnuTroveMapHashTIntIntHashMap *)

@interface GnuTroveMapHashTIntIntHashMap_TValueView_$1 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntIntHashMap_TValueView_$1, val$buf_, JavaLangStringBuilder *)

@interface GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator () {
 @public
  GnuTroveMapHashTIntIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator, this$0_, GnuTroveMapHashTIntIntHashMap *)

@interface GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator () {
 @public
  GnuTroveMapHashTIntIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator, this$0_, GnuTroveMapHashTIntIntHashMap *)

@interface GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator () {
 @public
  GnuTroveMapHashTIntIntHashMap *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator, this$0_, GnuTroveMapHashTIntIntHashMap *)

@interface GnuTroveMapHashTIntIntHashMap_$1 () {
 @public
  jboolean first_;
  JavaLangStringBuilder *val$buf_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveMapHashTIntIntHashMap_$1, val$buf_, JavaLangStringBuilder *)

@implementation GnuTroveMapHashTIntIntHashMap

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithInt:(jint)initialCapacity {
  return [super initWithInt:initialCapacity];
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor {
  return [super initWithInt:initialCapacity withFloat:loadFactor];
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor
                    withInt:(jint)noEntryKey
                    withInt:(jint)noEntryValue {
  return [super initWithInt:initialCapacity withFloat:loadFactor withInt:noEntryKey withInt:noEntryValue];
}

- (instancetype)initWithIntArray:(IOSIntArray *)keys
                    withIntArray:(IOSIntArray *)values {
  if (self = [super initWithInt:JavaLangMath_maxWithInt_withInt_(((IOSIntArray *) nil_chk(keys))->size_, ((IOSIntArray *) nil_chk(values))->size_)]) {
    jint size = JavaLangMath_minWithInt_withInt_(keys->size_, values->size_);
    for (jint i = 0; i < size; i++) {
      [self putWithInt:IOSIntArray_Get(keys, i) withInt:IOSIntArray_Get(values, i)];
    }
  }
  return self;
}

- (instancetype)initWithGnuTroveMapTIntIntMap:(id<GnuTroveMapTIntIntMap>)map {
  if (self = [super initWithInt:[((id<GnuTroveMapTIntIntMap>) nil_chk(map)) size]]) {
    if ([map isKindOfClass:[GnuTroveMapHashTIntIntHashMap class]]) {
      GnuTroveMapHashTIntIntHashMap *hashmap = (GnuTroveMapHashTIntIntHashMap *) check_class_cast(map, [GnuTroveMapHashTIntIntHashMap class]);
      self->_loadFactor_ = hashmap->_loadFactor_;
      self->no_entry_key_ = hashmap->no_entry_key_;
      self->no_entry_value_ = hashmap->no_entry_value_;
      if (self->no_entry_key_ != (jint) 0) {
        JavaUtilArrays_fillWithIntArray_withInt_(_set_, self->no_entry_key_);
      }
      if (self->no_entry_value_ != (jint) 0) {
        JavaUtilArrays_fillWithIntArray_withInt_(_values_, self->no_entry_value_);
      }
      [self setUpWithInt:J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(GnuTroveImplHashTHash_DEFAULT_CAPACITY / _loadFactor_))];
    }
    [self putAllWithGnuTroveMapTIntIntMap:map];
  }
  return self;
}

- (jint)setUpWithInt:(jint)initialCapacity {
  jint capacity;
  capacity = [super setUpWithInt:initialCapacity];
  GnuTroveMapHashTIntIntHashMap_setAndConsume__values_(self, [IOSIntArray newArrayWithLength:capacity]);
  return capacity;
}

- (void)rehashWithInt:(jint)newCapacity {
  jint oldCapacity = ((IOSIntArray *) nil_chk(_set_))->size_;
  IOSIntArray *oldKeys = _set_;
  IOSIntArray *oldVals = _values_;
  IOSByteArray *oldStates = _states_;
  GnuTroveImplHashTIntIntHash_setAndConsume__set_(self, [IOSIntArray newArrayWithLength:newCapacity]);
  GnuTroveMapHashTIntIntHashMap_setAndConsume__values_(self, [IOSIntArray newArrayWithLength:newCapacity]);
  GnuTroveImplHashTPrimitiveHash_setAndConsume__states_(self, [IOSByteArray newArrayWithLength:newCapacity]);
  for (jint i = oldCapacity; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(oldStates), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      jint o = IOSIntArray_Get(oldKeys, i);
      jint index = [self insertKeyWithInt:o];
      *IOSIntArray_GetRef(_values_, index) = IOSIntArray_Get(nil_chk(oldVals), i);
    }
  }
}

- (jint)putWithInt:(jint)key
           withInt:(jint)value {
  jint index = [self insertKeyWithInt:key];
  return GnuTroveMapHashTIntIntHashMap_doPutWithInt_withInt_withInt_(self, key, value, index);
}

- (jint)putIfAbsentWithInt:(jint)key
                   withInt:(jint)value {
  jint index = [self insertKeyWithInt:key];
  if (index < 0) return IOSIntArray_Get(nil_chk(_values_), -index - 1);
  return GnuTroveMapHashTIntIntHashMap_doPutWithInt_withInt_withInt_(self, key, value, index);
}

- (jint)doPutWithInt:(jint)key
             withInt:(jint)value
             withInt:(jint)index {
  return GnuTroveMapHashTIntIntHashMap_doPutWithInt_withInt_withInt_(self, key, value, index);
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  [self ensureCapacityWithInt:[((id<JavaUtilMap>) nil_chk(map)) size]];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([map entrySet])) {
    [self putWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) intValue] withInt:[((JavaLangInteger *) nil_chk([entry_ getValue])) intValue]];
  }
}

- (void)putAllWithGnuTroveMapTIntIntMap:(id<GnuTroveMapTIntIntMap>)map {
  [self ensureCapacityWithInt:[((id<GnuTroveMapTIntIntMap>) nil_chk(map)) size]];
  id<GnuTroveIteratorTIntIntIterator> iter = [map iterator];
  while ([((id<GnuTroveIteratorTIntIntIterator>) nil_chk(iter)) hasNext]) {
    [iter advance];
    [self putWithInt:[iter key] withInt:[iter value]];
  }
}

- (jint)getWithInt:(jint)key {
  jint index = [self indexWithInt:key];
  return index < 0 ? no_entry_value_ : IOSIntArray_Get(nil_chk(_values_), index);
}

- (void)clear {
  [super clear];
  JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(_set_, 0, ((IOSIntArray *) nil_chk(_set_))->size_, no_entry_key_);
  JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(_values_, 0, ((IOSIntArray *) nil_chk(_values_))->size_, no_entry_value_);
  JavaUtilArrays_fillWithByteArray_withInt_withInt_withByte_(_states_, 0, ((IOSByteArray *) nil_chk(_states_))->size_, GnuTroveImplHashTPrimitiveHash_FREE);
}

- (jboolean)isEmpty {
  return 0 == _size_;
}

- (jint)removeWithInt:(jint)key {
  jint prev = no_entry_value_;
  jint index = [self indexWithInt:key];
  if (index >= 0) {
    prev = IOSIntArray_Get(nil_chk(_values_), index);
    [self removeAtWithInt:index];
  }
  return prev;
}

- (void)removeAtWithInt:(jint)index {
  *IOSIntArray_GetRef(nil_chk(_values_), index) = no_entry_value_;
  [super removeAtWithInt:index];
}

- (id<GnuTroveSetTIntSet>)keySet {
  return [[[GnuTroveMapHashTIntIntHashMap_TKeyView alloc] initWithGnuTroveMapHashTIntIntHashMap:self] autorelease];
}

- (IOSIntArray *)keys {
  IOSIntArray *keys = [IOSIntArray arrayWithLength:[self size]];
  if (keys->size_ == 0) {
    return keys;
  }
  IOSIntArray *k = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(k))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(keys, j++) = IOSIntArray_Get(k, i);
    }
  }
  return keys;
}

- (IOSIntArray *)keysWithIntArray:(IOSIntArray *)array {
  jint size = [self size];
  if (size == 0) {
    return array;
  }
  if (((IOSIntArray *) nil_chk(array))->size_ < size) {
    array = [IOSIntArray arrayWithLength:size];
  }
  IOSIntArray *keys = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(keys))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(array, j++) = IOSIntArray_Get(keys, i);
    }
  }
  return array;
}

- (id<GnuTroveTIntCollection>)valueCollection {
  return [[[GnuTroveMapHashTIntIntHashMap_TValueView alloc] initWithGnuTroveMapHashTIntIntHashMap:self] autorelease];
}

- (IOSIntArray *)values {
  IOSIntArray *vals = [IOSIntArray arrayWithLength:[self size]];
  if (vals->size_ == 0) {
    return vals;
  }
  IOSIntArray *v = _values_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(v))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(vals, j++) = IOSIntArray_Get(v, i);
    }
  }
  return vals;
}

- (IOSIntArray *)valuesWithIntArray:(IOSIntArray *)array {
  jint size = [self size];
  if (size == 0) {
    return array;
  }
  if (((IOSIntArray *) nil_chk(array))->size_ < size) {
    array = [IOSIntArray arrayWithLength:size];
  }
  IOSIntArray *v = _values_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(v))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(array, j++) = IOSIntArray_Get(v, i);
    }
  }
  return array;
}

- (jboolean)containsValueWithInt:(jint)val {
  IOSByteArray *states = _states_;
  IOSIntArray *vals = _values_;
  for (jint i = ((IOSIntArray *) nil_chk(vals))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && val == IOSIntArray_Get(vals, i)) {
      return YES;
    }
  }
  return NO;
}

- (jboolean)containsKeyWithInt:(jint)key {
  return [self containsWithInt:key];
}

- (id<GnuTroveIteratorTIntIntIterator>)iterator {
  return [[[GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator alloc] initWithGnuTroveMapHashTIntIntHashMap:self withGnuTroveMapHashTIntIntHashMap:self] autorelease];
}

- (jboolean)forEachKeyWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure {
  return [self forEachWithGnuTroveProcedureTIntProcedure:procedure];
}

- (jboolean)forEachValueWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure {
  IOSByteArray *states = _states_;
  IOSIntArray *values = _values_;
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTIntProcedure>) nil_chk(procedure)) executeWithInt:IOSIntArray_Get(values, i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)forEachEntryWithGnuTroveProcedureTIntIntProcedure:(id<GnuTroveProcedureTIntIntProcedure>)procedure {
  IOSByteArray *states = _states_;
  IOSIntArray *keys = _set_;
  IOSIntArray *values = _values_;
  for (jint i = ((IOSIntArray *) nil_chk(keys))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTIntIntProcedure>) nil_chk(procedure)) executeWithInt:IOSIntArray_Get(keys, i) withInt:IOSIntArray_Get(nil_chk(values), i)]) {
      return NO;
    }
  }
  return YES;
}

- (void)transformValuesWithGnuTroveFunctionTIntFunction:(id<GnuTroveFunctionTIntFunction>)function {
  IOSByteArray *states = _states_;
  IOSIntArray *values = _values_;
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(values, i) = [((id<GnuTroveFunctionTIntFunction>) nil_chk(function)) executeWithInt:IOSIntArray_Get(values, i)];
    }
  }
}

- (jboolean)retainEntriesWithGnuTroveProcedureTIntIntProcedure:(id<GnuTroveProcedureTIntIntProcedure>)procedure {
  jboolean modified = NO;
  IOSByteArray *states = _states_;
  IOSIntArray *keys = _set_;
  IOSIntArray *values = _values_;
  [self tempDisableAutoCompaction];
  @try {
    for (jint i = ((IOSIntArray *) nil_chk(keys))->size_; i-- > 0; ) {
      if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && ![((id<GnuTroveProcedureTIntIntProcedure>) nil_chk(procedure)) executeWithInt:IOSIntArray_Get(keys, i) withInt:IOSIntArray_Get(nil_chk(values), i)]) {
        [self removeAtWithInt:i];
        modified = YES;
      }
    }
  }
  @finally {
    [self reenableAutoCompactionWithBoolean:YES];
  }
  return modified;
}

- (jboolean)incrementWithInt:(jint)key {
  return [self adjustValueWithInt:key withInt:(jint) 1];
}

- (jboolean)adjustValueWithInt:(jint)key
                       withInt:(jint)amount {
  jint index = [self indexWithInt:key];
  if (index < 0) {
    return NO;
  }
  else {
    *IOSIntArray_GetRef(nil_chk(_values_), index) += amount;
    return YES;
  }
}

- (jint)adjustOrPutValueWithInt:(jint)key
                        withInt:(jint)adjust_amount
                        withInt:(jint)put_amount {
  jint index = [self insertKeyWithInt:key];
  jboolean isNewMapping;
  jint newValue;
  if (index < 0) {
    index = -index - 1;
    newValue = (*IOSIntArray_GetRef(nil_chk(_values_), index) += adjust_amount);
    isNewMapping = NO;
  }
  else {
    newValue = (*IOSIntArray_GetRef(nil_chk(_values_), index) = put_amount);
    isNewMapping = YES;
  }
  jbyte previousState = IOSByteArray_Get(nil_chk(_states_), index);
  if (isNewMapping) {
    [self postInsertHookWithBoolean:consumeFreeSlot_];
  }
  return newValue;
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveMapTIntIntMap_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveMapTIntIntMap> that = (id<GnuTroveMapTIntIntMap>) check_protocol_cast(other, @protocol(GnuTroveMapTIntIntMap));
  if ([((id<GnuTroveMapTIntIntMap>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  IOSIntArray *values = _values_;
  IOSByteArray *states = _states_;
  jint this_no_entry_value = [self getNoEntryValue];
  jint that_no_entry_value = [that getNoEntryValue];
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      jint key = IOSIntArray_Get(nil_chk(_set_), i);
      jint that_value = [that getWithInt:key];
      jint this_value = IOSIntArray_Get(values, i);
      if ((this_value != that_value) && (this_value != this_no_entry_value) && (that_value != that_no_entry_value)) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(_values_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithInt_(IOSIntArray_Get(nil_chk(_set_), i)) ^ GnuTroveImplHashFunctions_hash__WithInt_(IOSIntArray_Get(_values_, i));
    }
  }
  return hashcode;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [self forEachEntryWithGnuTroveProcedureTIntIntProcedure:[[[GnuTroveMapHashTIntIntHashMap_$1 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeByteWithInt:0];
  [super writeExternalWithJavaIoObjectOutput:outArg];
  [outArg writeIntWithInt:_size_];
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      [outArg writeIntWithInt:IOSIntArray_Get(nil_chk(_set_), i)];
      [outArg writeIntWithInt:IOSIntArray_Get(nil_chk(_values_), i)];
    }
  }
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  [((id<JavaIoObjectInput>) nil_chk(inArg)) readByte];
  [super readExternalWithJavaIoObjectInput:inArg];
  jint size = [inArg readInt];
  [self setUpWithInt:size];
  while (size-- > 0) {
    jint key = [inArg readInt];
    jint val = [inArg readInt];
    [self putWithInt:key withInt:val];
  }
}

- (void)dealloc {
  RELEASE_(_values_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntIntHashMap *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntIntHashMap_set__values_(other, _values_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TIntIntHashMap", NULL, 0x1, NULL },
    { "initWithInt:", "TIntIntHashMap", NULL, 0x1, NULL },
    { "initWithInt:withFloat:", "TIntIntHashMap", NULL, 0x1, NULL },
    { "initWithInt:withFloat:withInt:withInt:", "TIntIntHashMap", NULL, 0x1, NULL },
    { "initWithIntArray:withIntArray:", "TIntIntHashMap", NULL, 0x1, NULL },
    { "initWithGnuTroveMapTIntIntMap:", "TIntIntHashMap", NULL, 0x1, NULL },
    { "setUpWithInt:", "setUp", "I", 0x4, NULL },
    { "rehashWithInt:", "rehash", "V", 0x4, NULL },
    { "putWithInt:withInt:", "put", "I", 0x1, NULL },
    { "putIfAbsentWithInt:withInt:", "putIfAbsent", "I", 0x1, NULL },
    { "doPutWithInt:withInt:withInt:", "doPut", "I", 0x2, NULL },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL },
    { "putAllWithGnuTroveMapTIntIntMap:", "putAll", "V", 0x1, NULL },
    { "getWithInt:", "get", "I", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "removeWithInt:", "remove", "I", 0x1, NULL },
    { "removeAtWithInt:", "removeAt", "V", 0x4, NULL },
    { "keySet", NULL, "Lgnu.trove.set.TIntSet;", 0x1, NULL },
    { "keys", NULL, "[I", 0x1, NULL },
    { "keysWithIntArray:", "keys", "[I", 0x1, NULL },
    { "valueCollection", NULL, "Lgnu.trove.TIntCollection;", 0x1, NULL },
    { "values", NULL, "[I", 0x1, NULL },
    { "valuesWithIntArray:", "values", "[I", 0x1, NULL },
    { "containsValueWithInt:", "containsValue", "Z", 0x1, NULL },
    { "containsKeyWithInt:", "containsKey", "Z", 0x1, NULL },
    { "iterator", NULL, "Lgnu.trove.iterator.TIntIntIterator;", 0x1, NULL },
    { "forEachKeyWithGnuTroveProcedureTIntProcedure:", "forEachKey", "Z", 0x1, NULL },
    { "forEachValueWithGnuTroveProcedureTIntProcedure:", "forEachValue", "Z", 0x1, NULL },
    { "forEachEntryWithGnuTroveProcedureTIntIntProcedure:", "forEachEntry", "Z", 0x1, NULL },
    { "transformValuesWithGnuTroveFunctionTIntFunction:", "transformValues", "V", 0x1, NULL },
    { "retainEntriesWithGnuTroveProcedureTIntIntProcedure:", "retainEntries", "Z", 0x1, NULL },
    { "incrementWithInt:", "increment", "Z", 0x1, NULL },
    { "adjustValueWithInt:withInt:", "adjustValue", "Z", 0x1, NULL },
    { "adjustOrPutValueWithInt:withInt:withInt:", "adjustOrPutValue", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;" },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, .constantValue.asLong = GnuTroveMapHashTIntIntHashMap_serialVersionUID },
    { "_values_", NULL, 0x84, "[I", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntIntHashMap = { 1, "TIntIntHashMap", "gnu.trove.map.hash", NULL, 0x1, 40, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTIntIntHashMap;
}

@end

jint GnuTroveMapHashTIntIntHashMap_doPutWithInt_withInt_withInt_(GnuTroveMapHashTIntIntHashMap *self, jint key, jint value, jint index) {
  jint previous = self->no_entry_value_;
  jboolean isNewMapping = YES;
  if (index < 0) {
    index = -index - 1;
    previous = IOSIntArray_Get(nil_chk(self->_values_), index);
    isNewMapping = NO;
  }
  *IOSIntArray_GetRef(nil_chk(self->_values_), index) = value;
  if (isNewMapping) {
    [self postInsertHookWithBoolean:self->consumeFreeSlot_];
  }
  return previous;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntIntHashMap)

@implementation GnuTroveMapHashTIntIntHashMap_TKeyView

- (id<GnuTroveIteratorTIntIterator>)iterator {
  return [[[GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator alloc] initWithGnuTroveMapHashTIntIntHashMap:this$0_ withGnuTroveImplHashTPrimitiveHash:this$0_] autorelease];
}

- (jint)getNoEntryValue {
  return this$0_->no_entry_key_;
}

- (jint)size {
  return this$0_->_size_;
}

- (jboolean)isEmpty {
  return 0 == this$0_->_size_;
}

- (jboolean)containsWithInt:(jint)entry_ {
  return [this$0_ containsWithInt:entry_];
}

- (IOSIntArray *)toArray {
  return [this$0_ keys];
}

- (IOSIntArray *)toArrayWithIntArray:(IOSIntArray *)dest {
  return [this$0_ keysWithIntArray:dest];
}

- (jboolean)addWithInt:(jint)entry_ {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)removeWithInt:(jint)entry_ {
  return this$0_->no_entry_value_ != [this$0_ removeWithInt:entry_];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangInteger class]]) {
      jint ele = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue];
      if (![this$0_ containsKeyWithInt:ele]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![this$0_ containsKeyWithInt:[iter next]]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithIntArray:(IOSIntArray *)array {
  {
    IOSIntArray *a__ = array;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint element = *b__++;
      if (![this$0_ containsWithInt:element]) {
        return NO;
      }
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithIntArray:(IOSIntArray *)array {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangInteger_valueOfWithInt_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTIntCollection>) nil_chk(collection)) containsWithInt:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithIntArray_(array);
  IOSIntArray *set = this$0_->_set_;
  IOSByteArray *states = this$0_->_states_;
  for (jint i = ((IOSIntArray *) nil_chk(set))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (JavaUtilArrays_binarySearchWithIntArray_withInt_(array, IOSIntArray_Get(set, i)) < 0)) {
      [this$0_ removeAtWithInt:i];
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangInteger class]]) {
      jint c = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue];
      if ([self removeWithInt:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (self == collection) {
    [self clear];
    return YES;
  }
  jboolean changed = NO;
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    jint element = [iter next];
    if ([self removeWithInt:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSIntArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithInt:IOSIntArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)clear {
  [this$0_ clear];
}

- (jboolean)forEachWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure {
  return [this$0_ forEachKeyWithGnuTroveProcedureTIntProcedure:procedure];
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveSetTIntSet_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveSetTIntSet> that = (id<GnuTroveSetTIntSet>) check_protocol_cast(other, @protocol(GnuTroveSetTIntSet));
  if ([((id<GnuTroveSetTIntSet>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  for (jint i = ((IOSByteArray *) nil_chk(this$0_->_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(this$0_->_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      if (![that containsWithInt:IOSIntArray_Get(nil_chk(this$0_->_set_), i)]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  for (jint i = ((IOSByteArray *) nil_chk(this$0_->_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(this$0_->_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithInt_(IOSIntArray_Get(nil_chk(this$0_->_set_), i));
    }
  }
  return hashcode;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [this$0_ forEachKeyWithGnuTroveProcedureTIntProcedure:[[[GnuTroveMapHashTIntIntHashMap_TKeyView_$1 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (instancetype)initWithGnuTroveMapHashTIntIntHashMap:(GnuTroveMapHashTIntIntHashMap *)outer$ {
  GnuTroveMapHashTIntIntHashMap_TKeyView_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntIntHashMap_TKeyView *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntIntHashMap_TKeyView_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Lgnu.trove.iterator.TIntIterator;", 0x1, NULL },
    { "getNoEntryValue", NULL, "I", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "containsWithInt:", "contains", "Z", 0x1, NULL },
    { "toArray", NULL, "[I", 0x1, NULL },
    { "toArrayWithIntArray:", "toArray", "[I", 0x1, NULL },
    { "addWithInt:", "add", "Z", 0x1, NULL },
    { "removeWithInt:", "remove", "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTIntCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithIntArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTIntCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithIntArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTIntCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithIntArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTIntCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithIntArray:", "removeAll", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "forEachWithGnuTroveProcedureTIntProcedure:", "forEach", "Z", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "initWithGnuTroveMapHashTIntIntHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntIntHashMap_TKeyView = { 1, "TKeyView", "gnu.trove.map.hash", "TIntIntHashMap", 0x4, 27, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntIntHashMap_TKeyView;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntIntHashMap_TKeyView)

@implementation GnuTroveMapHashTIntIntHashMap_TKeyView_$1

- (jboolean)executeWithInt:(jint)key {
  if (first_) {
    first_ = NO;
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@", "];
  }
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithInt:key];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTIntIntHashMap_TKeyView_$1_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntIntHashMap_TKeyView_$1 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTIntIntHashMap_TKeyView_$1_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithInt:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntIntHashMap_TKeyView_$1 = { 1, "$1", "gnu.trove.map.hash", "TIntIntHashMap$TKeyView", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTIntIntHashMap_TKeyView_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntIntHashMap_TKeyView_$1)

@implementation GnuTroveMapHashTIntIntHashMap_TValueView

- (id<GnuTroveIteratorTIntIterator>)iterator {
  return [[[GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator alloc] initWithGnuTroveMapHashTIntIntHashMap:this$0_ withGnuTroveImplHashTPrimitiveHash:this$0_] autorelease];
}

- (jint)getNoEntryValue {
  return this$0_->no_entry_value_;
}

- (jint)size {
  return this$0_->_size_;
}

- (jboolean)isEmpty {
  return 0 == this$0_->_size_;
}

- (jboolean)containsWithInt:(jint)entry_ {
  return [this$0_ containsValueWithInt:entry_];
}

- (IOSIntArray *)toArray {
  return [this$0_ values];
}

- (IOSIntArray *)toArrayWithIntArray:(IOSIntArray *)dest {
  return [this$0_ valuesWithIntArray:dest];
}

- (jboolean)addWithInt:(jint)entry_ {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)removeWithInt:(jint)entry_ {
  IOSIntArray *values = this$0_->_values_;
  IOSIntArray *set = this$0_->_set_;
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if ((IOSIntArray_Get(nil_chk(set), i) != GnuTroveImplHashTPrimitiveHash_FREE && IOSIntArray_Get(set, i) != GnuTroveImplHashTPrimitiveHash_REMOVED) && entry_ == IOSIntArray_Get(values, i)) {
      [this$0_ removeAtWithInt:i];
      return YES;
    }
  }
  return NO;
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangInteger class]]) {
      jint ele = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue];
      if (![this$0_ containsValueWithInt:ele]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![this$0_ containsValueWithInt:[iter next]]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithIntArray:(IOSIntArray *)array {
  {
    IOSIntArray *a__ = array;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint element = *b__++;
      if (![this$0_ containsValueWithInt:element]) {
        return NO;
      }
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)addAllWithIntArray:(IOSIntArray *)array {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangInteger_valueOfWithInt_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTIntCollection>) nil_chk(collection)) containsWithInt:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithIntArray_(array);
  IOSIntArray *values = this$0_->_values_;
  IOSByteArray *states = this$0_->_states_;
  for (jint i = ((IOSIntArray *) nil_chk(values))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (JavaUtilArrays_binarySearchWithIntArray_withInt_(array, IOSIntArray_Get(values, i)) < 0)) {
      [this$0_ removeAtWithInt:i];
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangInteger class]]) {
      jint c = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue];
      if ([self removeWithInt:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (self == collection) {
    [self clear];
    return YES;
  }
  jboolean changed = NO;
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    jint element = [iter next];
    if ([self removeWithInt:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSIntArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithInt:IOSIntArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)clear {
  [this$0_ clear];
}

- (jboolean)forEachWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure {
  return [this$0_ forEachValueWithGnuTroveProcedureTIntProcedure:procedure];
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  [this$0_ forEachValueWithGnuTroveProcedureTIntProcedure:[[[GnuTroveMapHashTIntIntHashMap_TValueView_$1 alloc] initWithJavaLangStringBuilder:buf] autorelease]];
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (instancetype)initWithGnuTroveMapHashTIntIntHashMap:(GnuTroveMapHashTIntIntHashMap *)outer$ {
  GnuTroveMapHashTIntIntHashMap_TValueView_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntIntHashMap_TValueView *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntIntHashMap_TValueView_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "iterator", NULL, "Lgnu.trove.iterator.TIntIterator;", 0x1, NULL },
    { "getNoEntryValue", NULL, "I", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "containsWithInt:", "contains", "Z", 0x1, NULL },
    { "toArray", NULL, "[I", 0x1, NULL },
    { "toArrayWithIntArray:", "toArray", "[I", 0x1, NULL },
    { "addWithInt:", "add", "Z", 0x1, NULL },
    { "removeWithInt:", "remove", "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTIntCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithIntArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTIntCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithIntArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTIntCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithIntArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTIntCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithIntArray:", "removeAll", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "forEachWithGnuTroveProcedureTIntProcedure:", "forEach", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "initWithGnuTroveMapHashTIntIntHashMap:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntIntHashMap_TValueView = { 1, "TValueView", "gnu.trove.map.hash", "TIntIntHashMap", 0x4, 25, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntIntHashMap_TValueView;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntIntHashMap_TValueView)

@implementation GnuTroveMapHashTIntIntHashMap_TValueView_$1

- (jboolean)executeWithInt:(jint)value {
  if (first_) {
    first_ = NO;
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@", "];
  }
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithInt:value];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTIntIntHashMap_TValueView_$1_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntIntHashMap_TValueView_$1 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTIntIntHashMap_TValueView_$1_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithInt:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntIntHashMap_TValueView_$1 = { 1, "$1", "gnu.trove.map.hash", "TIntIntHashMap$TValueView", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTIntIntHashMap_TValueView_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntIntHashMap_TValueView_$1)

@implementation GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator

- (instancetype)initWithGnuTroveMapHashTIntIntHashMap:(GnuTroveMapHashTIntIntHashMap *)outer$
                   withGnuTroveImplHashTPrimitiveHash:(GnuTroveImplHashTPrimitiveHash *)hash_ {
  GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator_set_this$0_(self, outer$);
  return [super initWithGnuTroveImplHashTPrimitiveHash:hash_];
}

- (jint)next {
  [self moveToNextIndex];
  return IOSIntArray_Get(nil_chk(this$0_->_set_), _index_);
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [this$0_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTIntIntHashMap:withGnuTroveImplHashTPrimitiveHash:", "TIntIntKeyHashIterator", NULL, 0x0, NULL },
    { "next", NULL, "I", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator = { 1, "TIntIntKeyHashIterator", "gnu.trove.map.hash", "TIntIntHashMap", 0x0, 3, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntIntHashMap_TIntIntKeyHashIterator)

@implementation GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator

- (instancetype)initWithGnuTroveMapHashTIntIntHashMap:(GnuTroveMapHashTIntIntHashMap *)outer$
                   withGnuTroveImplHashTPrimitiveHash:(GnuTroveImplHashTPrimitiveHash *)hash_ {
  GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator_set_this$0_(self, outer$);
  return [super initWithGnuTroveImplHashTPrimitiveHash:hash_];
}

- (jint)next {
  [self moveToNextIndex];
  return IOSIntArray_Get(nil_chk(this$0_->_values_), _index_);
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [this$0_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTIntIntHashMap:withGnuTroveImplHashTPrimitiveHash:", "TIntIntValueHashIterator", NULL, 0x0, NULL },
    { "next", NULL, "I", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator = { 1, "TIntIntValueHashIterator", "gnu.trove.map.hash", "TIntIntHashMap", 0x0, 3, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntIntHashMap_TIntIntValueHashIterator)

@implementation GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator

- (instancetype)initWithGnuTroveMapHashTIntIntHashMap:(GnuTroveMapHashTIntIntHashMap *)outer$
                    withGnuTroveMapHashTIntIntHashMap:(GnuTroveMapHashTIntIntHashMap *)map {
  GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator_set_this$0_(self, outer$);
  return [super initWithGnuTroveImplHashTPrimitiveHash:map];
}

- (void)advance {
  [self moveToNextIndex];
}

- (jint)key {
  return IOSIntArray_Get(nil_chk(this$0_->_set_), _index_);
}

- (jint)value {
  return IOSIntArray_Get(nil_chk(this$0_->_values_), _index_);
}

- (jint)setValueWithInt:(jint)val {
  jint old = [self value];
  *IOSIntArray_GetRef(nil_chk(this$0_->_values_), _index_) = val;
  return old;
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [this$0_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveMapHashTIntIntHashMap:withGnuTroveMapHashTIntIntHashMap:", "TIntIntHashIterator", NULL, 0x0, NULL },
    { "advance", NULL, "V", 0x1, NULL },
    { "key", NULL, "I", 0x1, NULL },
    { "value", NULL, "I", 0x1, NULL },
    { "setValueWithInt:", "setValue", "I", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntIntHashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator = { 1, "TIntIntHashIterator", "gnu.trove.map.hash", "TIntIntHashMap", 0x0, 6, methods, 1, fields, 0, NULL};
  return &_GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntIntHashMap_TIntIntHashIterator)

@implementation GnuTroveMapHashTIntIntHashMap_$1

- (jboolean)executeWithInt:(jint)key
                   withInt:(jint)value {
  if (first_) first_ = NO;
  else [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk(val$buf_)) appendWithInt:key];
  [val$buf_ appendWithNSString:@"="];
  [val$buf_ appendWithInt:value];
  return YES;
}

- (instancetype)initWithJavaLangStringBuilder:(JavaLangStringBuilder *)capture$0 {
  GnuTroveMapHashTIntIntHashMap_$1_set_val$buf_(self, capture$0);
  if (self = [super init]) {
    first_ = YES;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(val$buf_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveMapHashTIntIntHashMap_$1 *)other {
  [super copyAllFieldsTo:other];
  other->first_ = first_;
  GnuTroveMapHashTIntIntHashMap_$1_set_val$buf_(other, val$buf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithInt:withInt:", "execute", "Z", 0x1, NULL },
    { "initWithJavaLangStringBuilder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "first_", NULL, 0x2, "Z", NULL,  },
    { "val$buf_", NULL, 0x1012, "Ljava.lang.StringBuilder;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveMapHashTIntIntHashMap_$1 = { 1, "$1", "gnu.trove.map.hash", "TIntIntHashMap", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GnuTroveMapHashTIntIntHashMap_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveMapHashTIntIntHashMap_$1)
