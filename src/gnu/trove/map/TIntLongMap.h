//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/map/TIntLongMap.java
//

#ifndef _GnuTroveMapTIntLongMap_H_
#define _GnuTroveMapTIntLongMap_H_

@class IOSIntArray;
@class IOSLongArray;
@protocol GnuTroveFunctionTLongFunction;
@protocol GnuTroveIteratorTIntLongIterator;
@protocol GnuTroveProcedureTIntLongProcedure;
@protocol GnuTroveProcedureTIntProcedure;
@protocol GnuTroveProcedureTLongProcedure;
@protocol GnuTroveSetTIntSet;
@protocol GnuTroveTLongCollection;
@protocol JavaUtilMap;

#include "J2ObjC_header.h"

/**
 @brief Interface for a primitive map of int keys and long values.
 */
@protocol GnuTroveMapTIntLongMap < NSObject, JavaObject >

/**
 @brief Returns the value that will be returned from #get or #put if no entry exists for a given key.
 The default value is generally zero, but can be changed during construction of the collection.
 @return the value that represents a null key in this collection.
 */
- (jint)getNoEntryKey;

/**
 @brief Returns the value that will be returned from #get or #put if no entry exists for a given key.
 The default value is generally zero, but can be changed during construction of the collection.
 @return the value that represents a null value in this collection.
 */
- (jlong)getNoEntryValue;

/**
 @brief Inserts a key/value pair into the map.
 @param key an <code>int</code> value
 @param value an <code>long</code> value
 @return the previous value associated with <tt>key</tt>, or the "no entry" value if none was found (see #getNoEntryValue ).
 */
- (jlong)putWithInt:(jint)key
           withLong:(jlong)value;

/**
 @brief Inserts a key/value pair into the map if the specified key is not already associated with a value.
 @param key an <code>int</code> value
 @param value an <code>long</code> value
 @return the previous value associated with <tt>key</tt>, or the "no entry" value if none was found (see #getNoEntryValue ).
 */
- (jlong)putIfAbsentWithInt:(jint)key
                   withLong:(jlong)value;

/**
 @brief Put all the entries from the given Map into this map.
 @param map The Map from which entries will be obtained to put into this map.
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map;

/**
 @brief Put all the entries from the given map into this map.
 @param map The map from which entries will be obtained to put into this map.
 */
- (void)putAllWithGnuTroveMapTIntLongMap:(id<GnuTroveMapTIntLongMap>)map;

/**
 @brief Retrieves the value for <tt>key</tt>
 @param key an <code>int</code> value
 @return the previous value associated with <tt>key</tt>, or the "no entry" value if none was found (see #getNoEntryValue ).
 */
- (jlong)getWithInt:(jint)key;

/**
 @brief Empties the map.
 */
- (void)clear;

/**
 @brief Returns <tt>true</tt> if this map contains no key-value mappings.
 @return <tt>true</tt> if this map contains no key-value mappings
 */
- (jboolean)isEmpty;

/**
 @brief Deletes a key/value pair from the map.
 @param key an <code>int</code> value
 @return the previous value associated with <tt>key</tt>, or the "no entry" value if none was found (see #getNoEntryValue ).
 */
- (jlong)removeWithInt:(jint)key;

/**
 @brief Returns an <tt>int</tt> value that is the number of elements in the map.
 @return an <tt>int</tt> value that is the number of elements in the map.
 */
- (jint)size;

/**
 @brief Returns the keys of the map as a <tt>TIntSet</tt>
 @return the keys of the map as a <tt>TIntSet</tt>
 */
- (id<GnuTroveSetTIntSet>)keySet;

/**
 @brief Returns the keys of the map as an array of <tt>int</tt> values.
 @return the keys of the map as an array of <tt>int</tt> values.
 */
- (IOSIntArray *)keys;

/**
 @brief Returns the keys of the map.
 @param array the array into which the elements of the list are to be stored, if it is big enough; otherwise, a new array of the same type is allocated for this purpose.
 @return the keys of the map as an array.
 */
- (IOSIntArray *)keysWithIntArray:(IOSIntArray *)array;

/**
 @brief Returns the values of the map as a <tt>TLongCollection</tt>
 @return the values of the map as a <tt>TLongCollection</tt>
 */
- (id<GnuTroveTLongCollection>)valueCollection;

/**
 @brief Returns the values of the map as an array of <tt>#e#</tt> values.
 @return the values of the map as an array of <tt>#e#</tt> values.
 */
- (IOSLongArray *)values;

/**
 @brief Returns the values of the map using an existing array.
 @param array the array into which the elements of the list are to be stored, if it is big enough; otherwise, a new array of the same type is allocated for this purpose.
 @return the values of the map as an array of <tt>#e#</tt> values.
 */
- (IOSLongArray *)valuesWithLongArray:(IOSLongArray *)array;

/**
 @brief Checks for the presence of <tt>val</tt> in the values of the map.
 @param val an <code>long</code> value
 @return a <code>boolean</code> value
 */
- (jboolean)containsValueWithLong:(jlong)val;

/**
 @brief Checks for the present of <tt>key</tt> in the keys of the map.
 @param key an <code>int</code> value
 @return a <code>boolean</code> value
 */
- (jboolean)containsKeyWithInt:(jint)key;

/**
 @return a TIntLongIterator with access to this map's keys and values
 */
- (id<GnuTroveIteratorTIntLongIterator>)iterator;

/**
 @brief Executes <tt>procedure</tt> for each key in the map.
 @param procedure a <code>TIntProcedure</code> value
 @return false if the loop over the keys terminated because the procedure returned false for some key.
 */
- (jboolean)forEachKeyWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure;

/**
 @brief Executes <tt>procedure</tt> for each value in the map.
 @param procedure a <code>T#F#Procedure</code> value
 @return false if the loop over the values terminated because the procedure returned false for some value.
 */
- (jboolean)forEachValueWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure;

/**
 @brief Executes <tt>procedure</tt> for each key/value entry in the map.
 @param procedure a <code>TOIntLongProcedure</code> value
 @return false if the loop over the entries terminated because the procedure returned false for some entry.
 */
- (jboolean)forEachEntryWithGnuTroveProcedureTIntLongProcedure:(id<GnuTroveProcedureTIntLongProcedure>)procedure;

/**
 @brief Transform the values in this map using <tt>function</tt>.
 @param function a <code>TLongFunction</code> value
 */
- (void)transformValuesWithGnuTroveFunctionTLongFunction:(id<GnuTroveFunctionTLongFunction>)function;

/**
 @brief Retains only those entries in the map for which the procedure returns a true value.
 @param procedure determines which entries to keep
 @return true if the map was modified.
 */
- (jboolean)retainEntriesWithGnuTroveProcedureTIntLongProcedure:(id<GnuTroveProcedureTIntLongProcedure>)procedure;

/**
 @brief Increments the primitive value mapped to key by 1
 @param key the key of the value to increment
 @return true if a mapping was found and modified.
 */
- (jboolean)incrementWithInt:(jint)key;

/**
 @brief Adjusts the primitive value mapped to key.
 @param key the key of the value to increment
 @param amount the amount to adjust the value by.
 @return true if a mapping was found and modified.
 */
- (jboolean)adjustValueWithInt:(jint)key
                      withLong:(jlong)amount;

/**
 @brief Adjusts the primitive value mapped to the key if the key is present in the map.
 Otherwise, the <tt>initial_value</tt> is put in the map.
 @param key the key of the value to increment
 @param adjust_amount the amount to adjust the value by
 @param put_amount the value put into the map if the key is not initial present
 @return the value present in the map after the adjustment or put operation
 */
- (jlong)adjustOrPutValueWithInt:(jint)key
                        withLong:(jlong)adjust_amount
                        withLong:(jlong)put_amount;

@end

J2OBJC_EMPTY_STATIC_INIT(GnuTroveMapTIntLongMap)

J2OBJC_TYPE_LITERAL_HEADER(GnuTroveMapTIntLongMap)

#endif // _GnuTroveMapTIntLongMap_H_
