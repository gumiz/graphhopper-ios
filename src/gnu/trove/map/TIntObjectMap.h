//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/map/TIntObjectMap.java
//

#ifndef _GnuTroveMapTIntObjectMap_H_
#define _GnuTroveMapTIntObjectMap_H_

@class IOSIntArray;
@class IOSObjectArray;
@protocol GnuTroveFunctionTObjectFunction;
@protocol GnuTroveIteratorTIntObjectIterator;
@protocol GnuTroveProcedureTIntObjectProcedure;
@protocol GnuTroveProcedureTIntProcedure;
@protocol GnuTroveProcedureTObjectProcedure;
@protocol GnuTroveSetTIntSet;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;

#include "J2ObjC_header.h"

/**
 @brief Interface for a primitive map of int keys and Object values.
 */
@protocol GnuTroveMapTIntObjectMap < NSObject, JavaObject >

/**
 @brief Returns the value that represents null in the #keySet() .
 The default value is generally zero, but can be changed during construction of the collection.
 @return the value that represents a null value in this collection.
 */
- (jint)getNoEntryKey;

/**
 @brief Returns the number of key-value mappings in this map.
 If the map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns <tt>Integer.MAX_VALUE</tt>.
 @return the number of key-value mappings in this map
 */
- (jint)size;

/**
 @brief Returns <tt>true</tt> if this map contains no key-value mappings.
 @return <tt>true</tt> if this map contains no key-value mappings
 */
- (jboolean)isEmpty;

/**
 @brief Returns <tt>true</tt> if this map contains a mapping for the specified key.
 More formally, returns <tt>true</tt> if and only if this map contains a mapping for a key <tt>k</tt> such that <tt>key.equals(k)</tt>.  (There can be at most one such mapping.)
 @param key key whose presence in this map is to be tested
 @return <tt>true</tt> if this map contains a mapping for the specified key
 @throws ClassCastException if the key is of an inappropriate type for this map (optional)
 @throws NullPointerException if the specified key is null and this map does not permit null keys (optional)
 */
- (jboolean)containsKeyWithInt:(jint)key;

/**
 @brief Returns <tt>true</tt> if this map maps one or more keys to the specified value.
 More formally, returns <tt>true</tt> if and only if this map contains at least one mapping to a value <tt>v</tt> such that <tt>(value==null ? v==null : value.equals(v))</tt>.  This operation will probably require time linear in the map size for most implementations of the <tt>Map</tt> interface.
 @param value value whose presence in this map is to be tested
 @return <tt>true</tt> if this map maps one or more keys to the specified value
 @throws ClassCastException if the value is of an inappropriate type for this map (optional)
 @throws NullPointerException if the specified value is null and this map does not permit null values (optional)
 */
- (jboolean)containsValueWithId:(id)value;

/**
 @brief Returns the value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key.
 <p>More formally, if this map contains a mapping from a key <code>k</code> to a value <code>v</code> such that <code>(key==null ? k==null : key.equals(k))</code> , then this method returns <code>v</code> ; otherwise it returns <code>null</code> .  (There can be at most one such mapping.) <p>If this map permits null values, then a return value of <code>null</code> does not <i>necessarily</i> indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to <code>null</code> .  The #containsKey containsKey operation may be used to distinguish these two cases.
 @param key the key whose associated value is to be returned
 @return the <tt>int</tt> value to which the specified key is mapped, or <code>null</code> if this map contains no mapping for the key
 @throws ClassCastException if the key is of an inappropriate type for this map (optional)
 @throws NullPointerException if the specified key is null and this map does not permit null keys (optional)
 */
- (id)getWithInt:(jint)key;

/**
 @brief Associates the specified value with the specified key in this map (optional operation).
 If the map previously contained a mapping for the key, the old value is replaced by the specified value.  (A map <tt>m</tt> is said to contain a mapping for a key <tt>k</tt> if and only if #containsKey(int) m.containsKey(k) would return <tt>true</tt>.)
 @param key key with which the specified value is to be associated
 @param value an <tt>int</tt> value value to be associated with the specified key
 @return the previous value associated with <tt>key</tt>, or <tt>no_entry_value</tt> if there was no mapping for <tt>key</tt>. (A <tt>no_entry_value</tt> return can also indicate that the map previously associated <tt>null</tt> with <tt>key</tt>, if the implementation supports <tt>null</tt> values.)
 @throws UnsupportedOperationException if the <tt>put</tt> operation is not supported by this map
 @throws ClassCastException if the class of the specified key or value prevents it from being stored in this map
 @throws NullPointerException if the specified key or value is null and this map does not permit null keys or values
 @throws IllegalArgumentException if some property of the specified key or value prevents it from being stored in this map
 */
- (id)putWithInt:(jint)key
          withId:(id)value;

/**
 @brief Inserts a key/value pair into the map if the specified key is not already associated with a value.
 @param key key with which the specified value is to be associated
 @param value an <tt>int</tt> value to be associated with the specified key
 @return the previous value associated with <tt>key</tt>, or null if none was found.
 */
- (id)putIfAbsentWithInt:(jint)key
                  withId:(id)value;

/**
 @brief Removes the mapping for a key from this map if it is present (optional operation).
 More formally, if this map contains a mapping from key <tt>k</tt> to value <tt>v</tt> such that <code>key.equals(k)</code>, that mapping is removed.  (The map can contain at most one such mapping.) <p>Returns the value to which this map previously associated the key, or <tt>null</tt> if the map contained no mapping for the key. <p>If this map permits null values, then a return value of <tt>null</tt> does not <i>necessarily</i> indicate that the map contained no mapping for the key; it's also possible that the map explicitly mapped the key to <tt>null</tt>. <p>The map will not contain a mapping for the specified key once the call returns.
 @param key key whose mapping is to be removed from the map
 @return the previous <tt>int</tt> value associated with <tt>key</tt>, or <tt>null</tt> if there was no mapping for <tt>key</tt>.
 @throws UnsupportedOperationException if the <tt>remove</tt> operation is not supported by this map
 @throws ClassCastException if the key is of an inappropriate type for this map (optional)
 @throws NullPointerException if the specified key is null and this map does not permit null keys (optional)
 */
- (id)removeWithInt:(jint)key;

/**
 @brief Copies all of the mappings from the specified map to this map (optional operation).
 The effect of this call is equivalent to that of calling #put(int,Object) put(k, v) on this map once for each mapping from key <tt>k</tt> to value <tt>v</tt> in the specified map.  The behavior of this operation is undefined if the specified map is modified while the operation is in progress.
 @param m mappings to be stored in this map
 @throws UnsupportedOperationException if the <tt>putAll</tt> operation is not supported by this map
 @throws ClassCastException if the class of a key or value in the specified map prevents it from being stored in this map
 @throws NullPointerException if the specified map is null, or if this map does not permit null keys or values, and the specified map contains null keys or values
 @throws IllegalArgumentException if some property of a key or value in the specified map prevents it from being stored in this map
 */
- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m;

/**
 @brief Put all the entries from the given map into this map.
 @param map The map from which entries will be obtained to put into this map.
 */
- (void)putAllWithGnuTroveMapTIntObjectMap:(id<GnuTroveMapTIntObjectMap>)map;

/**
 @brief Removes all of the mappings from this map (optional operation).
 The map will be empty after this call returns.
 @throws UnsupportedOperationException if the <tt>clear</tt> operation is not supported by this map
 */
- (void)clear;

/**
 @brief Returns a TIntSet view of the keys contained in this map.
 The set is backed by the map, so changes to the map are reflected in the set, and vice-versa.  If the map is modified while an iteration over the set is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined.  The set supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
 @return a set view of the keys contained in this map
 */
- (id<GnuTroveSetTIntSet>)keySet;

/**
 @brief Returns a copy of the keys of the map as an array.
 Changes to the array of keys will not be reflected in the map nor vice-versa.
 @return a copy of the keys of the map as an array.
 */
- (IOSIntArray *)keys;

/**
 @brief Returns a copy of the keys of the map as an array.
 Changes to the array of keys will not be reflected in the map nor vice-versa.
 @param array the array into which the elements of the list are to be stored, if it is big enough; otherwise, a new array of the same type is allocated for this purpose.
 @return the keys of the map as an array.
 */
- (IOSIntArray *)keysWithIntArray:(IOSIntArray *)array;

/**
 @brief Returns a Collection view of the values contained in this map.
 The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa.  If the map is modified while an iteration over the collection is in progress (except through the iterator's own <tt>remove</tt> operation), the results of the iteration are undefined.  The collection supports element removal, which removes the corresponding mapping from the map, via the <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>, <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.  It does not support the <tt>add</tt> or <tt>addAll</tt> operations.
 @return a collection view of the values contained in this map
 */
- (id<JavaUtilCollection>)valueCollection;

/**
 @brief Returns the values of the map as an Object array.
 Note that the array returned is typed as an Object[] and may not be cast to a more specific type. See #values(V[]) for a version which allows specifically typed arrays. Changes to the array of values will not be reflected in the map nor vice-versa.
 @return the values of the map as an array of <tt>int</tt> values.
 */
- (IOSObjectArray *)values;

/**
 @brief Returns the values of the map using an existing array.
 Changes to the array of values will not be reflected in the map nor vice-versa.
 @param array the array into which the elements of the list are to be stored, if it is big enough; otherwise, a new array of the same type is allocated for this purpose.
 @return the values of the map as an array of <tt>int</tt> values.
 */
- (IOSObjectArray *)valuesWithNSObjectArray:(IOSObjectArray *)array;

/**
 @brief Returns a <tt>TIntObjectIterator</tt> with access to this map's keys and values.
 @return a <tt>TIntObjectIterator</tt> with access to this map's keys and values.
 */
- (id<GnuTroveIteratorTIntObjectIterator>)iterator;

/**
 @brief Executes <tt>procedure</tt> for each key in the map.
 @param procedure a <code>TObjectProcedure</code> value
 @return false if the loop over the keys terminated because the procedure returned false for some key.
 */
- (jboolean)forEachKeyWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure;

/**
 @brief Executes <tt>procedure</tt> for each value in the map.
 @param procedure a <code>TObjectProcedure</code> value
 @return false if the loop over the values terminated because the procedure returned false for some value.
 */
- (jboolean)forEachValueWithGnuTroveProcedureTObjectProcedure:(id<GnuTroveProcedureTObjectProcedure>)procedure;

/**
 @brief Executes <tt>procedure</tt> for each key/value entry in the map.
 @param procedure a <code>TIntObjectProcedure</code> value
 @return false if the loop over the entries terminated because the procedure returned false for some entry.
 */
- (jboolean)forEachEntryWithGnuTroveProcedureTIntObjectProcedure:(id<GnuTroveProcedureTIntObjectProcedure>)procedure;

/**
 @brief Transform the values in this map using <tt>function</tt>.
 @param function a <code>TObjectFunction</code> value
 */
- (void)transformValuesWithGnuTroveFunctionTObjectFunction:(id<GnuTroveFunctionTObjectFunction>)function;

/**
 @brief Retains only those entries in the map for which the procedure returns a true value.
 @param procedure determines which entries to keep
 @return true if the map was modified.
 */
- (jboolean)retainEntriesWithGnuTroveProcedureTIntObjectProcedure:(id<GnuTroveProcedureTIntObjectProcedure>)procedure;

/**
 @brief Compares the specified object with this map for equality.
 Returns <tt>true</tt> if the given object is also a map and the two maps represent the same mappings.  More formally, two maps <tt>m1</tt> and <tt>m2</tt> represent the same mappings if <tt>m1.entrySet().equals(m2.entrySet())</tt>.  This ensures that the <tt>equals</tt> method works properly across different implementations of the <tt>Map</tt> interface.
 @param o object to be compared for equality with this map
 @return <tt>true</tt> if the specified object is equal to this map
 */
- (jboolean)isEqual:(id)o;

/**
 @brief Returns the hash code value for this map.
 The hash code of a map is defined to be the sum of the hash codes of each entry in the map's <tt>entrySet()</tt> view.  This ensures that <tt>m1.equals(m2)</tt> implies that <tt>m1.hashCode()==m2.hashCode()</tt> for any two maps <tt>m1</tt> and <tt>m2</tt>, as required by the general contract of Object#hashCode .
 @return the hash code value for this map
 */
- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(GnuTroveMapTIntObjectMap)

J2OBJC_TYPE_LITERAL_HEADER(GnuTroveMapTIntObjectMap)

#endif // _GnuTroveMapTIntObjectMap_H_
