//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/impl/hash/THashPrimitiveIterator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/impl/hash/THashPrimitiveIterator.h"
#include "gnu/trove/impl/hash/TPrimitiveHash.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/NoSuchElementException.h"

__attribute__((unused)) static jint GnuTroveImplHashTHashPrimitiveIterator_nextIndex(GnuTroveImplHashTHashPrimitiveIterator *self);

@implementation GnuTroveImplHashTHashPrimitiveIterator

- (instancetype)initWithGnuTroveImplHashTPrimitiveHash:(GnuTroveImplHashTPrimitiveHash *)hash_ {
  if (self = [super init]) {
    GnuTroveImplHashTHashPrimitiveIterator_set__hash_(self, hash_);
    _expectedSize_ = [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size];
    _index_ = [_hash_ capacity];
  }
  return self;
}

- (jint)nextIndex {
  return GnuTroveImplHashTHashPrimitiveIterator_nextIndex(self);
}

- (jboolean)hasNext {
  return GnuTroveImplHashTHashPrimitiveIterator_nextIndex(self) >= 0;
}

- (void)remove {
  if (_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  @try {
    [_hash_ tempDisableAutoCompaction];
    [_hash_ removeAtWithInt:_index_];
  }
  @finally {
    [_hash_ reenableAutoCompactionWithBoolean:NO];
  }
  _expectedSize_--;
}

- (void)moveToNextIndex {
  if ((_index_ = GnuTroveImplHashTHashPrimitiveIterator_nextIndex(self)) < 0) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
}

- (void)dealloc {
  RELEASE_(_hash_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveImplHashTHashPrimitiveIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveImplHashTHashPrimitiveIterator_set__hash_(other, _hash_);
  other->_expectedSize_ = _expectedSize_;
  other->_index_ = _index_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveImplHashTPrimitiveHash:", "THashPrimitiveIterator", NULL, 0x1, NULL },
    { "nextIndex", NULL, "I", 0x14, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
    { "moveToNextIndex", NULL, "V", 0x14, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "_hash_", NULL, 0x14, "Lgnu.trove.impl.hash.TPrimitiveHash;", NULL,  },
    { "_expectedSize_", NULL, 0x4, "I", NULL,  },
    { "_index_", NULL, 0x4, "I", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveImplHashTHashPrimitiveIterator = { 1, "THashPrimitiveIterator", "gnu.trove.impl.hash", NULL, 0x401, 5, methods, 3, fields, 0, NULL};
  return &_GnuTroveImplHashTHashPrimitiveIterator;
}

@end

jint GnuTroveImplHashTHashPrimitiveIterator_nextIndex(GnuTroveImplHashTHashPrimitiveIterator *self) {
  if (self->_expectedSize_ != [((GnuTroveImplHashTPrimitiveHash *) nil_chk(self->_hash_)) size]) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  IOSByteArray *states = self->_hash_->_states_;
  jint i = self->_index_;
  while (i-- > 0 && (IOSByteArray_Get(nil_chk(states), i) != GnuTroveImplHashTPrimitiveHash_FULL)) {
    ;
  }
  return i;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveImplHashTHashPrimitiveIterator)
