//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/impl/hash/TLongHash.java
//

#ifndef _GnuTroveImplHashTLongHash_H_
#define _GnuTroveImplHashTLongHash_H_

@class IOSLongArray;
@protocol GnuTroveProcedureTLongProcedure;

#include "J2ObjC_header.h"
#include "gnu/trove/impl/hash/TPrimitiveHash.h"

#define GnuTroveImplHashTLongHash_serialVersionUID 1LL

/**
 @brief An open addressed hashing implementation for long primitives.
 Created: Sun Nov  4 08:56:06 2001
 @author Eric D. Friedman, Rob Eden, Jeff Randall
 @version $Id: _E_Hash.template,v 1.1.2.6 2009/11/07 03:36:44 robeden Exp $
 */
@interface GnuTroveImplHashTLongHash : GnuTroveImplHashTPrimitiveHash {
 @public
  /**
   @brief the set of longs
   */
  IOSLongArray *_set_;
  /**
   @brief value that represents null NOTE: should not be modified after the Hash is created, but is not final because of Externalization
   */
  jlong no_entry_value_;
  jboolean consumeFreeSlot_;
}

/**
 @brief Creates a new <code>TLongHash</code> instance with the default capacity and load factor.
 */
- (instancetype)init;

/**
 @brief Creates a new <code>TLongHash</code> instance whose capacity is the next highest prime above <tt>initialCapacity + 1</tt> unless that value is already prime.
 @param initialCapacity an <code>int</code> value
 */
- (instancetype)initWithInt:(jint)initialCapacity;

/**
 @brief Creates a new <code>TLongHash</code> instance with a prime value at or near the specified capacity and load factor.
 @param initialCapacity used to find a prime capacity for the table.
 @param loadFactor used to calculate the threshold over which rehashing takes place.
 */
- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor;

/**
 @brief Creates a new <code>TLongHash</code> instance with a prime value at or near the specified capacity and load factor.
 @param initialCapacity used to find a prime capacity for the table.
 @param loadFactor used to calculate the threshold over which rehashing takes place.
 @param no_entry_value value that represents null
 */
- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)loadFactor
                   withLong:(jlong)no_entry_value;

/**
 @brief Returns the value that is used to represent null.
 The default value is generally zero, but can be changed during construction of the collection.
 @return the value that represents null
 */
- (jlong)getNoEntryValue;

/**
 @brief initializes the hashtable to a prime capacity which is at least <tt>initialCapacity + 1</tt>.
 @param initialCapacity an <code>int</code> value
 @return the actual capacity chosen
 */
- (jint)setUpWithInt:(jint)initialCapacity;

/**
 @brief Searches the set for <tt>val</tt>
 @param val an <code>long</code> value
 @return a <code>boolean</code> value
 */
- (jboolean)containsWithLong:(jlong)val;

/**
 @brief Executes <tt>procedure</tt> for each element in the set.
 @param procedure a <code>TObjectProcedure</code> value
 @return false if the loop over the set terminated because the procedure returned false for some value.
 */
- (jboolean)forEachWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure;

/**
 @brief Releases the element currently stored at <tt>index</tt>.
 @param index an <code>int</code> value
 */
- (void)removeAtWithInt:(jint)index;

/**
 @brief Locates the index of <tt>val</tt>.
 @param val an <code>long</code> value
 @return the index of <tt>val</tt> or -1 if it isn't in the set.
 */
- (jint)indexWithLong:(jlong)val;

- (jint)indexRehashedWithLong:(jlong)key
                      withInt:(jint)index
                      withInt:(jint)hash_
                     withByte:(jbyte)state;

/**
 @brief Locates the index at which <tt>val</tt> can be inserted.
 if there is already a value equal()ing <tt>val</tt> in the set, returns that value as a negative integer.
 @param val an <code>long</code> value
 @return an <code>int</code> value
 */
- (jint)insertKeyWithLong:(jlong)val;

- (jint)insertKeyRehashWithLong:(jlong)val
                        withInt:(jint)index
                        withInt:(jint)hash_
                       withByte:(jbyte)state;

- (void)insertKeyAtWithInt:(jint)index
                  withLong:(jlong)val;

@end

J2OBJC_EMPTY_STATIC_INIT(GnuTroveImplHashTLongHash)

J2OBJC_FIELD_SETTER(GnuTroveImplHashTLongHash, _set_, IOSLongArray *)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(GnuTroveImplHashTLongHash, serialVersionUID, jlong)
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(GnuTroveImplHashTLongHash)

#endif // _GnuTroveImplHashTLongHash_H_
