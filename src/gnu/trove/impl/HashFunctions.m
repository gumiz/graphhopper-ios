//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/impl/HashFunctions.java
//

#include "J2ObjC_source.h"
#include "gnu/trove/impl/HashFunctions.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"

@implementation GnuTroveImplHashFunctions

+ (jint)hash__WithDouble:(jdouble)value {
  return GnuTroveImplHashFunctions_hash__WithDouble_(value);
}

+ (jint)hash__WithFloat:(jfloat)value {
  return GnuTroveImplHashFunctions_hash__WithFloat_(value);
}

+ (jint)hash__WithInt:(jint)value {
  return GnuTroveImplHashFunctions_hash__WithInt_(value);
}

+ (jint)hash__WithLong:(jlong)value {
  return GnuTroveImplHashFunctions_hash__WithLong_(value);
}

+ (jint)hash__WithId:(id)object {
  return GnuTroveImplHashFunctions_hash__WithId_(object);
}

+ (jint)fastCeilWithFloat:(jfloat)v {
  return GnuTroveImplHashFunctions_fastCeilWithFloat_(v);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "hash__WithDouble:", "hash", "I", 0x9, NULL },
    { "hash__WithFloat:", "hash", "I", 0x9, NULL },
    { "hash__WithInt:", "hash", "I", 0x9, NULL },
    { "hash__WithLong:", "hash", "I", 0x9, NULL },
    { "hash__WithId:", "hash", "I", 0x9, NULL },
    { "fastCeilWithFloat:", "fastCeil", "I", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _GnuTroveImplHashFunctions = { 1, "HashFunctions", "gnu.trove.impl", NULL, 0x11, 7, methods, 0, NULL, 0, NULL};
  return &_GnuTroveImplHashFunctions;
}

@end

jint GnuTroveImplHashFunctions_hash__WithDouble_(jdouble value) {
  GnuTroveImplHashFunctions_init();
  NSCAssert(!JavaLangDouble_isNaNWithDouble_(value), @"Values of NaN are not supported.");
  jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(value);
  return (jint) (bits ^ (URShift64(bits, 32)));
}

jint GnuTroveImplHashFunctions_hash__WithFloat_(jfloat value) {
  GnuTroveImplHashFunctions_init();
  NSCAssert(!JavaLangFloat_isNaNWithFloat_(value), @"Values of NaN are not supported.");
  return JavaLangFloat_floatToIntBitsWithFloat_(value * 663608941.737f);
}

jint GnuTroveImplHashFunctions_hash__WithInt_(jint value) {
  GnuTroveImplHashFunctions_init();
  return value;
}

jint GnuTroveImplHashFunctions_hash__WithLong_(jlong value) {
  GnuTroveImplHashFunctions_init();
  return ((jint) (value ^ (URShift64(value, 32))));
}

jint GnuTroveImplHashFunctions_hash__WithId_(id object) {
  GnuTroveImplHashFunctions_init();
  return object == nil ? 0 : ((jint) [object hash]);
}

jint GnuTroveImplHashFunctions_fastCeilWithFloat_(jfloat v) {
  GnuTroveImplHashFunctions_init();
  jint possible_result = J2ObjCFpToInt(v);
  if (v - possible_result > 0) possible_result++;
  return possible_result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveImplHashFunctions)
