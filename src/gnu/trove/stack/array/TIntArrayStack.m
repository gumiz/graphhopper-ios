//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/stack/array/TIntArrayStack.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/impl/Constants.h"
#include "gnu/trove/list/array/TIntArrayList.h"
#include "gnu/trove/stack/TIntStack.h"
#include "gnu/trove/stack/array/TIntArrayStack.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"

__attribute__((unused)) static void GnuTroveStackArrayTIntArrayStack_reverseWithIntArray_withInt_withInt_(GnuTroveStackArrayTIntArrayStack *self, IOSIntArray *dest, jint from, jint to);
__attribute__((unused)) static void GnuTroveStackArrayTIntArrayStack_swapWithIntArray_withInt_withInt_(GnuTroveStackArrayTIntArrayStack *self, IOSIntArray *dest, jint i, jint j);

@interface GnuTroveStackArrayTIntArrayStack ()

/**
 @brief Reverse the order of the elements in the range of the list.
 @param dest the array of data
 @param from the inclusive index at which to start reversing
 @param to the exclusive index at which to stop reversing
 */
- (void)reverseWithIntArray:(IOSIntArray *)dest
                    withInt:(jint)from
                    withInt:(jint)to;

/**
 @brief Swap the values at offsets <tt>i</tt> and <tt>j</tt>.
 @param dest the array of data
 @param i an offset into the data array
 @param j an offset into the data array
 */
- (void)swapWithIntArray:(IOSIntArray *)dest
                 withInt:(jint)i
                 withInt:(jint)j;
@end

@implementation GnuTroveStackArrayTIntArrayStack

- (instancetype)init {
  return [self initGnuTroveStackArrayTIntArrayStackWithInt:GnuTroveStackArrayTIntArrayStack_DEFAULT_CAPACITY];
}

- (instancetype)initGnuTroveStackArrayTIntArrayStackWithInt:(jint)capacity {
  if (self = [super init]) {
    GnuTroveStackArrayTIntArrayStack_setAndConsume__list_(self, [[GnuTroveListArrayTIntArrayList alloc] initWithInt:capacity]);
  }
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  return [self initGnuTroveStackArrayTIntArrayStackWithInt:capacity];
}

- (instancetype)initWithInt:(jint)capacity
                    withInt:(jint)no_entry_value {
  if (self = [super init]) {
    GnuTroveStackArrayTIntArrayStack_setAndConsume__list_(self, [[GnuTroveListArrayTIntArrayList alloc] initWithInt:capacity withInt:no_entry_value]);
  }
  return self;
}

- (instancetype)initWithGnuTroveStackTIntStack:(id<GnuTroveStackTIntStack>)stack {
  if (self = [super init]) {
    if ([stack isKindOfClass:[GnuTroveStackArrayTIntArrayStack class]]) {
      GnuTroveStackArrayTIntArrayStack *array_stack = (GnuTroveStackArrayTIntArrayStack *) check_class_cast(stack, [GnuTroveStackArrayTIntArrayStack class]);
      GnuTroveStackArrayTIntArrayStack_setAndConsume__list_(self, [[GnuTroveListArrayTIntArrayList alloc] initWithGnuTroveTIntCollection:((GnuTroveStackArrayTIntArrayStack *) nil_chk(array_stack))->_list_]);
    }
    else {
      @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Only support TIntArrayStack"] autorelease];
    }
  }
  return self;
}

- (jint)getNoEntryValue {
  return [((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) getNoEntryValue];
}

- (void)pushWithInt:(jint)val {
  [((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) addWithInt:val];
}

- (jint)pop {
  return [_list_ removeAtWithInt:[((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) size] - 1];
}

- (jint)peek {
  return [_list_ getWithInt:[((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) size] - 1];
}

- (jint)size {
  return [((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) size];
}

- (void)clear {
  [((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) clear];
}

- (IOSIntArray *)toArray {
  IOSIntArray *retval = [((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) toArray];
  GnuTroveStackArrayTIntArrayStack_reverseWithIntArray_withInt_withInt_(self, retval, 0, [self size]);
  return retval;
}

- (void)toArrayWithIntArray:(IOSIntArray *)dest {
  jint size = [self size];
  jint start = size - ((IOSIntArray *) nil_chk(dest))->size_;
  if (start < 0) {
    start = 0;
  }
  jint length = JavaLangMath_minWithInt_withInt_(size, dest->size_);
  [((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) toArrayWithIntArray:dest withInt:start withInt:length];
  GnuTroveStackArrayTIntArrayStack_reverseWithIntArray_withInt_withInt_(self, dest, 0, length);
  if (dest->size_ > size) {
    *IOSIntArray_GetRef(dest, size) = [_list_ getNoEntryValue];
  }
}

- (void)reverseWithIntArray:(IOSIntArray *)dest
                    withInt:(jint)from
                    withInt:(jint)to {
  GnuTroveStackArrayTIntArrayStack_reverseWithIntArray_withInt_withInt_(self, dest, from, to);
}

- (void)swapWithIntArray:(IOSIntArray *)dest
                 withInt:(jint)i
                 withInt:(jint)j {
  GnuTroveStackArrayTIntArrayStack_swapWithIntArray_withInt_withInt_(self, dest, i, j);
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  for (jint i = [((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) size] - 1; i > 0; i--) {
    [buf appendWithInt:[_list_ getWithInt:i]];
    [buf appendWithNSString:@", "];
  }
  if ([self size] > 0) {
    [buf appendWithInt:[_list_ getWithInt:0]];
  }
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return YES;
  }
  if (o == nil || [self getClass] != [o getClass]) {
    return NO;
  }
  GnuTroveStackArrayTIntArrayStack *that = (GnuTroveStackArrayTIntArrayStack *) check_class_cast(o, [GnuTroveStackArrayTIntArrayStack class]);
  return [((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) isEqual:((GnuTroveStackArrayTIntArrayStack *) nil_chk(that))->_list_];
}

- (NSUInteger)hash {
  return ((jint) [((GnuTroveListArrayTIntArrayList *) nil_chk(_list_)) hash]);
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeByteWithInt:0];
  [outArg writeObjectWithId:_list_];
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  [((id<JavaIoObjectInput>) nil_chk(inArg)) readByte];
  GnuTroveStackArrayTIntArrayStack_set__list_(self, (GnuTroveListArrayTIntArrayList *) check_class_cast([inArg readObject], [GnuTroveListArrayTIntArrayList class]));
}

- (void)dealloc {
  RELEASE_(_list_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveStackArrayTIntArrayStack *)other {
  [super copyAllFieldsTo:other];
  GnuTroveStackArrayTIntArrayStack_set__list_(other, _list_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TIntArrayStack", NULL, 0x1, NULL },
    { "initWithInt:", "TIntArrayStack", NULL, 0x1, NULL },
    { "initWithInt:withInt:", "TIntArrayStack", NULL, 0x1, NULL },
    { "initWithGnuTroveStackTIntStack:", "TIntArrayStack", NULL, 0x1, NULL },
    { "getNoEntryValue", NULL, "I", 0x1, NULL },
    { "pushWithInt:", "push", "V", 0x1, NULL },
    { "pop", NULL, "I", 0x1, NULL },
    { "peek", NULL, "I", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "toArray", NULL, "[I", 0x1, NULL },
    { "toArrayWithIntArray:", "toArray", "V", 0x1, NULL },
    { "reverseWithIntArray:withInt:withInt:", "reverse", "V", 0x2, NULL },
    { "swapWithIntArray:withInt:withInt:", "swap", "V", 0x2, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;" },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, .constantValue.asLong = GnuTroveStackArrayTIntArrayStack_serialVersionUID },
    { "_list_", NULL, 0x4, "Lgnu.trove.list.array.TIntArrayList;", NULL,  },
    { "DEFAULT_CAPACITY_", NULL, 0x19, "I", NULL, .constantValue.asInt = GnuTroveStackArrayTIntArrayStack_DEFAULT_CAPACITY },
  };
  static const J2ObjcClassInfo _GnuTroveStackArrayTIntArrayStack = { 1, "TIntArrayStack", "gnu.trove.stack.array", NULL, 0x1, 19, methods, 3, fields, 0, NULL};
  return &_GnuTroveStackArrayTIntArrayStack;
}

@end

void GnuTroveStackArrayTIntArrayStack_reverseWithIntArray_withInt_withInt_(GnuTroveStackArrayTIntArrayStack *self, IOSIntArray *dest, jint from, jint to) {
  if (from == to) {
    return;
  }
  if (from > to) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"from cannot be greater than to"] autorelease];
  }
  for (jint i = from, j = to - 1; i < j; i++, j--) {
    GnuTroveStackArrayTIntArrayStack_swapWithIntArray_withInt_withInt_(self, dest, i, j);
  }
}

void GnuTroveStackArrayTIntArrayStack_swapWithIntArray_withInt_withInt_(GnuTroveStackArrayTIntArrayStack *self, IOSIntArray *dest, jint i, jint j) {
  jint tmp = IOSIntArray_Get(nil_chk(dest), i);
  *IOSIntArray_GetRef(dest, i) = IOSIntArray_Get(dest, j);
  *IOSIntArray_GetRef(dest, j) = tmp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveStackArrayTIntArrayStack)
