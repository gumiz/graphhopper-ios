//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/list/array/TLongArrayList.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/TLongCollection.h"
#include "gnu/trove/function/TLongFunction.h"
#include "gnu/trove/impl/Constants.h"
#include "gnu/trove/impl/HashFunctions.h"
#include "gnu/trove/iterator/TLongIterator.h"
#include "gnu/trove/list/TLongList.h"
#include "gnu/trove/list/array/TLongArrayList.h"
#include "gnu/trove/procedure/TLongProcedure.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Random.h"

__attribute__((unused)) static void GnuTroveListArrayTLongArrayList_swapWithInt_withInt_(GnuTroveListArrayTLongArrayList *self, jint i, jint j);

@interface GnuTroveListArrayTLongArrayList_TLongArrayIterator () {
 @public
  GnuTroveListArrayTLongArrayList *this$0_;
  /**
   @brief Index of element to be returned by subsequent call to next.
   */
  jint cursor_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveListArrayTLongArrayList_TLongArrayIterator, this$0_, GnuTroveListArrayTLongArrayList *)

@interface GnuTroveListArrayTLongArrayList ()

/**
 @brief Swap the values at offsets <tt>i</tt> and <tt>j</tt>.
 @param i an offset into the data array
 @param j an offset into the data array
 */
- (void)swapWithInt:(jint)i
            withInt:(jint)j;
@end

@implementation GnuTroveListArrayTLongArrayList_TLongArrayIterator

- (instancetype)initWithGnuTroveListArrayTLongArrayList:(GnuTroveListArrayTLongArrayList *)outer$
                                                withInt:(jint)index {
  GnuTroveListArrayTLongArrayList_TLongArrayIterator_set_this$0_(self, outer$);
  if (self = [super init]) {
    cursor_ = 0;
    lastRet_ = -1;
    cursor_ = index;
  }
  return self;
}

- (jboolean)hasNext {
  return cursor_ < [this$0_ size];
}

- (jlong)next {
  @try {
    jlong next = [this$0_ getWithInt:cursor_];
    lastRet_ = cursor_++;
    return next;
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
}

- (void)remove {
  if (lastRet_ == -1) @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  @try {
    [this$0_ removeWithInt:lastRet_ withInt:1];
    if (lastRet_ < cursor_) cursor_--;
    lastRet_ = -1;
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveListArrayTLongArrayList_TLongArrayIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveListArrayTLongArrayList_TLongArrayIterator_set_this$0_(other, this$0_);
  other->cursor_ = cursor_;
  other->lastRet_ = lastRet_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveListArrayTLongArrayList:withInt:", "TLongArrayIterator", NULL, 0x0, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL },
    { "next", NULL, "J", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.list.array.TLongArrayList;", NULL,  },
    { "cursor_", NULL, 0x2, "I", NULL,  },
    { "lastRet_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveListArrayTLongArrayList_TLongArrayIterator = { 1, "TLongArrayIterator", "gnu.trove.list.array", "TLongArrayList", 0x0, 4, methods, 3, fields, 0, NULL};
  return &_GnuTroveListArrayTLongArrayList_TLongArrayIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveListArrayTLongArrayList_TLongArrayIterator)

@implementation GnuTroveListArrayTLongArrayList

- (instancetype)init {
  return [self initGnuTroveListArrayTLongArrayListWithInt:GnuTroveListArrayTLongArrayList_DEFAULT_CAPACITY withLong:(jlong) 0];
}

- (instancetype)initGnuTroveListArrayTLongArrayListWithInt:(jint)capacity {
  return [self initGnuTroveListArrayTLongArrayListWithInt:capacity withLong:(jlong) 0];
}

- (instancetype)initWithInt:(jint)capacity {
  return [self initGnuTroveListArrayTLongArrayListWithInt:capacity];
}

- (instancetype)initGnuTroveListArrayTLongArrayListWithInt:(jint)capacity
                                                  withLong:(jlong)no_entry_value {
  if (self = [super init]) {
    GnuTroveListArrayTLongArrayList_setAndConsume__data_(self, [IOSLongArray newArrayWithLength:capacity]);
    _pos_ = 0;
    self->no_entry_value_ = no_entry_value;
  }
  return self;
}

- (instancetype)initWithInt:(jint)capacity
                   withLong:(jlong)no_entry_value {
  return [self initGnuTroveListArrayTLongArrayListWithInt:capacity withLong:no_entry_value];
}

- (instancetype)initWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self = [self initGnuTroveListArrayTLongArrayListWithInt:[((id<GnuTroveTLongCollection>) nil_chk(collection)) size]]) {
    [self addAllWithGnuTroveTLongCollection:collection];
  }
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)values {
  if (self = [self initGnuTroveListArrayTLongArrayListWithInt:((IOSLongArray *) nil_chk(values))->size_]) {
    [self addWithLongArray:values];
  }
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)values
                         withLong:(jlong)no_entry_value
                      withBoolean:(jboolean)wrap {
  if (self = [super init]) {
    if (!wrap) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Wrong call"] autorelease];
    if (values == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"values can not be null"] autorelease];
    GnuTroveListArrayTLongArrayList_set__data_(self, values);
    _pos_ = ((IOSLongArray *) nil_chk(values))->size_;
    self->no_entry_value_ = no_entry_value;
  }
  return self;
}

+ (GnuTroveListArrayTLongArrayList *)wrapWithLongArray:(IOSLongArray *)values {
  return GnuTroveListArrayTLongArrayList_wrapWithLongArray_(values);
}

+ (GnuTroveListArrayTLongArrayList *)wrapWithLongArray:(IOSLongArray *)values
                                              withLong:(jlong)no_entry_value {
  return GnuTroveListArrayTLongArrayList_wrapWithLongArray_withLong_(values, no_entry_value);
}

- (jlong)getNoEntryValue {
  return no_entry_value_;
}

- (void)ensureCapacityWithInt:(jint)capacity {
  if (capacity > ((IOSLongArray *) nil_chk(_data_))->size_) {
    jint newCap = JavaLangMath_maxWithInt_withInt_(LShift32(_data_->size_, 1), capacity);
    IOSLongArray *tmp = [IOSLongArray arrayWithLength:newCap];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, 0, tmp, 0, _data_->size_);
    GnuTroveListArrayTLongArrayList_set__data_(self, tmp);
  }
}

- (jint)size {
  return _pos_;
}

- (jboolean)isEmpty {
  return _pos_ == 0;
}

- (void)trimToSize {
  if (((IOSLongArray *) nil_chk(_data_))->size_ > [self size]) {
    IOSLongArray *tmp = [IOSLongArray arrayWithLength:[self size]];
    [self toArrayWithLongArray:tmp withInt:0 withInt:tmp->size_];
    GnuTroveListArrayTLongArrayList_set__data_(self, tmp);
  }
}

- (jboolean)addWithLong:(jlong)val {
  [self ensureCapacityWithInt:_pos_ + 1];
  *IOSLongArray_GetRef(nil_chk(_data_), _pos_++) = val;
  return YES;
}

- (void)addWithLongArray:(IOSLongArray *)vals {
  [self addWithLongArray:vals withInt:0 withInt:((IOSLongArray *) nil_chk(vals))->size_];
}

- (void)addWithLongArray:(IOSLongArray *)vals
                 withInt:(jint)offset
                 withInt:(jint)length {
  [self ensureCapacityWithInt:_pos_ + length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(vals, offset, _data_, _pos_, length);
  _pos_ += length;
}

- (void)insertWithInt:(jint)offset
             withLong:(jlong)value {
  if (offset == _pos_) {
    [self addWithLong:value];
    return;
  }
  [self ensureCapacityWithInt:_pos_ + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, offset, _data_, offset + 1, _pos_ - offset);
  *IOSLongArray_GetRef(nil_chk(_data_), offset) = value;
  _pos_++;
}

- (void)insertWithInt:(jint)offset
        withLongArray:(IOSLongArray *)values {
  [self insertWithInt:offset withLongArray:values withInt:0 withInt:((IOSLongArray *) nil_chk(values))->size_];
}

- (void)insertWithInt:(jint)offset
        withLongArray:(IOSLongArray *)values
              withInt:(jint)valOffset
              withInt:(jint)len {
  if (offset == _pos_) {
    [self addWithLongArray:values withInt:valOffset withInt:len];
    return;
  }
  [self ensureCapacityWithInt:_pos_ + len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, offset, _data_, offset + len, _pos_ - offset);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, valOffset, _data_, offset, len);
  _pos_ += len;
}

- (jlong)getWithInt:(jint)offset {
  if (offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  return IOSLongArray_Get(nil_chk(_data_), offset);
}

- (jlong)getQuickWithInt:(jint)offset {
  return IOSLongArray_Get(nil_chk(_data_), offset);
}

- (jlong)setWithInt:(jint)offset
           withLong:(jlong)val {
  if (offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  jlong prev_val = IOSLongArray_Get(nil_chk(_data_), offset);
  *IOSLongArray_GetRef(_data_, offset) = val;
  return prev_val;
}

- (jlong)replaceWithInt:(jint)offset
               withLong:(jlong)val {
  if (offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  jlong old = IOSLongArray_Get(nil_chk(_data_), offset);
  *IOSLongArray_GetRef(_data_, offset) = val;
  return old;
}

- (void)setWithInt:(jint)offset
     withLongArray:(IOSLongArray *)values {
  [self setWithInt:offset withLongArray:values withInt:0 withInt:((IOSLongArray *) nil_chk(values))->size_];
}

- (void)setWithInt:(jint)offset
     withLongArray:(IOSLongArray *)values
           withInt:(jint)valOffset
           withInt:(jint)length {
  if (offset < 0 || offset + length > _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, valOffset, _data_, offset, length);
}

- (void)setQuickWithInt:(jint)offset
               withLong:(jlong)val {
  *IOSLongArray_GetRef(nil_chk(_data_), offset) = val;
}

- (void)clear {
  [self clearWithInt:GnuTroveListArrayTLongArrayList_DEFAULT_CAPACITY];
}

- (void)clearWithInt:(jint)capacity {
  GnuTroveListArrayTLongArrayList_setAndConsume__data_(self, [IOSLongArray newArrayWithLength:capacity]);
  _pos_ = 0;
}

- (void)reset {
  _pos_ = 0;
  JavaUtilArrays_fillWithLongArray_withLong_(_data_, no_entry_value_);
}

- (void)resetQuick {
  _pos_ = 0;
}

- (jboolean)removeWithLong:(jlong)value {
  for (jint index = 0; index < _pos_; index++) {
    if (value == IOSLongArray_Get(nil_chk(_data_), index)) {
      [self removeWithInt:index withInt:1];
      return YES;
    }
  }
  return NO;
}

- (jlong)removeAtWithInt:(jint)offset {
  jlong old = [self getWithInt:offset];
  [self removeWithInt:offset withInt:1];
  return old;
}

- (void)removeWithInt:(jint)offset
              withInt:(jint)length {
  if (length == 0) return;
  if (offset < 0 || offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  if (offset == 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, length, _data_, 0, _pos_ - length);
  }
  else if (_pos_ - length == offset) {
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, offset + length, _data_, offset, _pos_ - (offset + length));
  }
  _pos_ -= length;
}

- (id<GnuTroveIteratorTLongIterator>)iterator {
  return [[[GnuTroveListArrayTLongArrayList_TLongArrayIterator alloc] initWithGnuTroveListArrayTLongArrayList:self withInt:0] autorelease];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong c = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if (![self containsWithLong:c]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self == collection) {
    return YES;
  }
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    jlong element = [iter next];
    if (![self containsWithLong:element]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithLongArray:(IOSLongArray *)array {
  for (jint i = ((IOSLongArray *) nil_chk(array))->size_; i-- > 0; ) {
    if (![self containsWithLong:IOSLongArray_Get(array, i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (JavaLangLong * __strong element in nil_chk(collection)) {
    jlong e = [((JavaLangLong *) nil_chk(element)) longLongValue];
    if ([self addWithLong:e]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)addAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  jboolean changed = NO;
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    jlong element = [iter next];
    if ([self addWithLong:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)addAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  {
    IOSLongArray *a__ = array;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong element = *b__++;
      if ([self addWithLong:element]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangLong_valueOfWithLong_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTLongCollection>) nil_chk(collection)) containsWithLong:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithLongArray_(array);
  IOSLongArray *data = _data_;
  for (jint i = _pos_; i-- > 0; ) {
    if (JavaUtilArrays_binarySearchWithLongArray_withLong_(array, IOSLongArray_Get(nil_chk(data), i)) < 0) {
      [self removeWithInt:i withInt:1];
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong c = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if ([self removeWithLong:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (collection == self) {
    [self clear];
    return YES;
  }
  jboolean changed = NO;
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    jlong element = [iter next];
    if ([self removeWithLong:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSLongArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithLong:IOSLongArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)transformValuesWithGnuTroveFunctionTLongFunction:(id<GnuTroveFunctionTLongFunction>)function {
  for (jint i = _pos_; i-- > 0; ) {
    *IOSLongArray_GetRef(nil_chk(_data_), i) = [((id<GnuTroveFunctionTLongFunction>) nil_chk(function)) executeWithLong:IOSLongArray_Get(_data_, i)];
  }
}

- (void)reverse {
  [self reverseWithInt:0 withInt:_pos_];
}

- (void)reverseWithInt:(jint)from
               withInt:(jint)to {
  if (from == to) {
    return;
  }
  if (from > to) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"from cannot be greater than to"] autorelease];
  }
  for (jint i = from, j = to - 1; i < j; i++, j--) {
    GnuTroveListArrayTLongArrayList_swapWithInt_withInt_(self, i, j);
  }
}

- (void)shuffleWithJavaUtilRandom:(JavaUtilRandom *)rand {
  for (jint i = _pos_; i-- > 1; ) {
    GnuTroveListArrayTLongArrayList_swapWithInt_withInt_(self, i, [((JavaUtilRandom *) nil_chk(rand)) nextIntWithInt:i]);
  }
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  GnuTroveListArrayTLongArrayList_swapWithInt_withInt_(self, i, j);
}

- (id<GnuTroveListTLongList>)subListWithInt:(jint)begin
                                    withInt:(jint)end {
  if (end < begin) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I$I", @"end index ", end, @" greater than begin index ", begin)] autorelease];
  }
  if (begin < 0) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"begin index can not be < 0"] autorelease];
  }
  if (end > ((IOSLongArray *) nil_chk(_data_))->size_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:JreStrcat("$I", @"end index < ", _data_->size_)] autorelease];
  }
  GnuTroveListArrayTLongArrayList *list = [[[GnuTroveListArrayTLongArrayList alloc] initWithInt:end - begin] autorelease];
  for (jint i = begin; i < end; i++) {
    [list addWithLong:IOSLongArray_Get(_data_, i)];
  }
  return list;
}

- (IOSLongArray *)toArray {
  return [self toArrayWithInt:0 withInt:_pos_];
}

- (IOSLongArray *)toArrayWithInt:(jint)offset
                         withInt:(jint)len {
  IOSLongArray *rv = [IOSLongArray arrayWithLength:len];
  [self toArrayWithLongArray:rv withInt:offset withInt:len];
  return rv;
}

- (IOSLongArray *)toArrayWithLongArray:(IOSLongArray *)dest {
  jint len = ((IOSLongArray *) nil_chk(dest))->size_;
  if (dest->size_ > _pos_) {
    len = _pos_;
    *IOSLongArray_GetRef(dest, len) = no_entry_value_;
  }
  [self toArrayWithLongArray:dest withInt:0 withInt:len];
  return dest;
}

- (IOSLongArray *)toArrayWithLongArray:(IOSLongArray *)dest
                               withInt:(jint)offset
                               withInt:(jint)len {
  if (len == 0) {
    return dest;
  }
  if (offset < 0 || offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, offset, dest, 0, len);
  return dest;
}

- (IOSLongArray *)toArrayWithLongArray:(IOSLongArray *)dest
                               withInt:(jint)source_pos
                               withInt:(jint)dest_pos
                               withInt:(jint)len {
  if (len == 0) {
    return dest;
  }
  if (source_pos < 0 || source_pos >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:source_pos] autorelease];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, source_pos, dest, dest_pos, len);
  return dest;
}

- (jboolean)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!([GnuTroveListTLongList_class_() isInstance:other])) return NO;
  if ([other isKindOfClass:[GnuTroveListArrayTLongArrayList class]]) {
    GnuTroveListArrayTLongArrayList *that = (GnuTroveListArrayTLongArrayList *) check_class_cast(other, [GnuTroveListArrayTLongArrayList class]);
    if ([((GnuTroveListArrayTLongArrayList *) nil_chk(that)) size] != [self size]) return NO;
    for (jint i = _pos_; i-- > 0; ) {
      if (IOSLongArray_Get(nil_chk(self->_data_), i) != IOSLongArray_Get(that->_data_, i)) {
        return NO;
      }
    }
    return YES;
  }
  else {
    id<GnuTroveListTLongList> that = (id<GnuTroveListTLongList>) check_protocol_cast(other, @protocol(GnuTroveListTLongList));
    if ([((id<GnuTroveListTLongList>) nil_chk(that)) size] != [self size]) return NO;
    for (jint i = 0; i < _pos_; i++) {
      if (IOSLongArray_Get(nil_chk(self->_data_), i) != [that getWithInt:i]) {
        return NO;
      }
    }
    return YES;
  }
}

- (NSUInteger)hash {
  jint h = 0;
  for (jint i = _pos_; i-- > 0; ) {
    h += GnuTroveImplHashFunctions_hash__WithLong_(IOSLongArray_Get(nil_chk(_data_), i));
  }
  return h;
}

- (jboolean)forEachWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure {
  for (jint i = 0; i < _pos_; i++) {
    if (![((id<GnuTroveProcedureTLongProcedure>) nil_chk(procedure)) executeWithLong:IOSLongArray_Get(nil_chk(_data_), i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)forEachDescendingWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)procedure {
  for (jint i = _pos_; i-- > 0; ) {
    if (![((id<GnuTroveProcedureTLongProcedure>) nil_chk(procedure)) executeWithLong:IOSLongArray_Get(nil_chk(_data_), i)]) {
      return NO;
    }
  }
  return YES;
}

- (void)sort {
  JavaUtilArrays_sortWithLongArray_withInt_withInt_(_data_, 0, _pos_);
}

- (void)sortWithInt:(jint)fromIndex
            withInt:(jint)toIndex {
  JavaUtilArrays_sortWithLongArray_withInt_withInt_(_data_, fromIndex, toIndex);
}

- (void)fillWithLong:(jlong)val {
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(_data_, 0, _pos_, val);
}

- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
           withLong:(jlong)val {
  if (toIndex > _pos_) {
    [self ensureCapacityWithInt:toIndex];
    _pos_ = toIndex;
  }
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(_data_, fromIndex, toIndex, val);
}

- (jint)binarySearchWithLong:(jlong)value {
  return [self binarySearchWithLong:value withInt:0 withInt:_pos_];
}

- (jint)binarySearchWithLong:(jlong)value
                     withInt:(jint)fromIndex
                     withInt:(jint)toIndex {
  if (fromIndex < 0) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:fromIndex] autorelease];
  }
  if (toIndex > _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:toIndex] autorelease];
  }
  jint low = fromIndex;
  jint high = toIndex - 1;
  while (low <= high) {
    jint mid = URShift32((low + high), 1);
    jlong midVal = IOSLongArray_Get(nil_chk(_data_), mid);
    if (midVal < value) {
      low = mid + 1;
    }
    else if (midVal > value) {
      high = mid - 1;
    }
    else {
      return mid;
    }
  }
  return -(low + 1);
}

- (jint)indexOfWithLong:(jlong)value {
  return [self indexOfWithInt:0 withLong:value];
}

- (jint)indexOfWithInt:(jint)offset
              withLong:(jlong)value {
  for (jint i = offset; i < _pos_; i++) {
    if (IOSLongArray_Get(nil_chk(_data_), i) == value) {
      return i;
    }
  }
  return -1;
}

- (jint)lastIndexOfWithLong:(jlong)value {
  return [self lastIndexOfWithInt:_pos_ withLong:value];
}

- (jint)lastIndexOfWithInt:(jint)offset
                  withLong:(jlong)value {
  for (jint i = offset; i-- > 0; ) {
    if (IOSLongArray_Get(nil_chk(_data_), i) == value) {
      return i;
    }
  }
  return -1;
}

- (jboolean)containsWithLong:(jlong)value {
  return [self lastIndexOfWithLong:value] >= 0;
}

- (id<GnuTroveListTLongList>)grepWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)condition {
  GnuTroveListArrayTLongArrayList *list = [[[GnuTroveListArrayTLongArrayList alloc] init] autorelease];
  for (jint i = 0; i < _pos_; i++) {
    if ([((id<GnuTroveProcedureTLongProcedure>) nil_chk(condition)) executeWithLong:IOSLongArray_Get(nil_chk(_data_), i)]) {
      [list addWithLong:IOSLongArray_Get(_data_, i)];
    }
  }
  return list;
}

- (id<GnuTroveListTLongList>)inverseGrepWithGnuTroveProcedureTLongProcedure:(id<GnuTroveProcedureTLongProcedure>)condition {
  GnuTroveListArrayTLongArrayList *list = [[[GnuTroveListArrayTLongArrayList alloc] init] autorelease];
  for (jint i = 0; i < _pos_; i++) {
    if (![((id<GnuTroveProcedureTLongProcedure>) nil_chk(condition)) executeWithLong:IOSLongArray_Get(nil_chk(_data_), i)]) {
      [list addWithLong:IOSLongArray_Get(_data_, i)];
    }
  }
  return list;
}

- (jlong)max {
  if ([self size] == 0) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"cannot find maximum of an empty list"] autorelease];
  }
  jlong max = JavaLangLong_MIN_VALUE;
  for (jint i = 0; i < _pos_; i++) {
    if (IOSLongArray_Get(nil_chk(_data_), i) > max) {
      max = IOSLongArray_Get(_data_, i);
    }
  }
  return max;
}

- (jlong)min {
  if ([self size] == 0) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"cannot find minimum of an empty list"] autorelease];
  }
  jlong min = JavaLangLong_MAX_VALUE;
  for (jint i = 0; i < _pos_; i++) {
    if (IOSLongArray_Get(nil_chk(_data_), i) < min) {
      min = IOSLongArray_Get(_data_, i);
    }
  }
  return min;
}

- (jlong)sum {
  jlong sum = 0;
  for (jint i = 0; i < _pos_; i++) {
    sum += IOSLongArray_Get(nil_chk(_data_), i);
  }
  return sum;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  for (jint i = 0, end = _pos_ - 1; i < end; i++) {
    [buf appendWithLong:IOSLongArray_Get(nil_chk(_data_), i)];
    [buf appendWithNSString:@", "];
  }
  if ([self size] > 0) {
    [buf appendWithLong:IOSLongArray_Get(nil_chk(_data_), _pos_ - 1)];
  }
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeByteWithInt:0];
  [outArg writeIntWithInt:_pos_];
  [outArg writeLongWithLong:no_entry_value_];
  jint len = ((IOSLongArray *) nil_chk(_data_))->size_;
  [outArg writeIntWithInt:len];
  for (jint i = 0; i < len; i++) {
    [outArg writeLongWithLong:IOSLongArray_Get(_data_, i)];
  }
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  [((id<JavaIoObjectInput>) nil_chk(inArg)) readByte];
  _pos_ = [inArg readInt];
  no_entry_value_ = [inArg readLong];
  jint len = [inArg readInt];
  GnuTroveListArrayTLongArrayList_setAndConsume__data_(self, [IOSLongArray newArrayWithLength:len]);
  for (jint i = 0; i < len; i++) {
    *IOSLongArray_GetRef(_data_, i) = [inArg readLong];
  }
}

- (void)dealloc {
  RELEASE_(_data_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveListArrayTLongArrayList *)other {
  [super copyAllFieldsTo:other];
  GnuTroveListArrayTLongArrayList_set__data_(other, _data_);
  other->_pos_ = _pos_;
  other->no_entry_value_ = no_entry_value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TLongArrayList", NULL, 0x1, NULL },
    { "initWithInt:", "TLongArrayList", NULL, 0x1, NULL },
    { "initWithInt:withLong:", "TLongArrayList", NULL, 0x1, NULL },
    { "initWithGnuTroveTLongCollection:", "TLongArrayList", NULL, 0x1, NULL },
    { "initWithLongArray:", "TLongArrayList", NULL, 0x1, NULL },
    { "initWithLongArray:withLong:withBoolean:", "TLongArrayList", NULL, 0x4, NULL },
    { "wrapWithLongArray:", "wrap", "Lgnu.trove.list.array.TLongArrayList;", 0x9, NULL },
    { "wrapWithLongArray:withLong:", "wrap", "Lgnu.trove.list.array.TLongArrayList;", 0x9, NULL },
    { "getNoEntryValue", NULL, "J", 0x1, NULL },
    { "ensureCapacityWithInt:", "ensureCapacity", "V", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "trimToSize", NULL, "V", 0x1, NULL },
    { "addWithLong:", "add", "Z", 0x1, NULL },
    { "addWithLongArray:", "add", "V", 0x1, NULL },
    { "addWithLongArray:withInt:withInt:", "add", "V", 0x1, NULL },
    { "insertWithInt:withLong:", "insert", "V", 0x1, NULL },
    { "insertWithInt:withLongArray:", "insert", "V", 0x1, NULL },
    { "insertWithInt:withLongArray:withInt:withInt:", "insert", "V", 0x1, NULL },
    { "getWithInt:", "get", "J", 0x1, NULL },
    { "getQuickWithInt:", "getQuick", "J", 0x1, NULL },
    { "setWithInt:withLong:", "set", "J", 0x1, NULL },
    { "replaceWithInt:withLong:", "replace", "J", 0x1, NULL },
    { "setWithInt:withLongArray:", "set", "V", 0x1, NULL },
    { "setWithInt:withLongArray:withInt:withInt:", "set", "V", 0x1, NULL },
    { "setQuickWithInt:withLong:", "setQuick", "V", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "clearWithInt:", "clear", "V", 0x1, NULL },
    { "reset", NULL, "V", 0x1, NULL },
    { "resetQuick", NULL, "V", 0x1, NULL },
    { "removeWithLong:", "remove", "Z", 0x1, NULL },
    { "removeAtWithInt:", "removeAt", "J", 0x1, NULL },
    { "removeWithInt:withInt:", "remove", "V", 0x1, NULL },
    { "iterator", NULL, "Lgnu.trove.iterator.TLongIterator;", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTLongCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithLongArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTLongCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithLongArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTLongCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithLongArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTLongCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithLongArray:", "removeAll", "Z", 0x1, NULL },
    { "transformValuesWithGnuTroveFunctionTLongFunction:", "transformValues", "V", 0x1, NULL },
    { "reverse", NULL, "V", 0x1, NULL },
    { "reverseWithInt:withInt:", "reverse", "V", 0x1, NULL },
    { "shuffleWithJavaUtilRandom:", "shuffle", "V", 0x1, NULL },
    { "swapWithInt:withInt:", "swap", "V", 0x2, NULL },
    { "subListWithInt:withInt:", "subList", "Lgnu.trove.list.TLongList;", 0x1, NULL },
    { "toArray", NULL, "[J", 0x1, NULL },
    { "toArrayWithInt:withInt:", "toArray", "[J", 0x1, NULL },
    { "toArrayWithLongArray:", "toArray", "[J", 0x1, NULL },
    { "toArrayWithLongArray:withInt:withInt:", "toArray", "[J", 0x1, NULL },
    { "toArrayWithLongArray:withInt:withInt:withInt:", "toArray", "[J", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "forEachWithGnuTroveProcedureTLongProcedure:", "forEach", "Z", 0x1, NULL },
    { "forEachDescendingWithGnuTroveProcedureTLongProcedure:", "forEachDescending", "Z", 0x1, NULL },
    { "sort", NULL, "V", 0x1, NULL },
    { "sortWithInt:withInt:", "sort", "V", 0x1, NULL },
    { "fillWithLong:", "fill", "V", 0x1, NULL },
    { "fillWithInt:withInt:withLong:", "fill", "V", 0x1, NULL },
    { "binarySearchWithLong:", "binarySearch", "I", 0x1, NULL },
    { "binarySearchWithLong:withInt:withInt:", "binarySearch", "I", 0x1, NULL },
    { "indexOfWithLong:", "indexOf", "I", 0x1, NULL },
    { "indexOfWithInt:withLong:", "indexOf", "I", 0x1, NULL },
    { "lastIndexOfWithLong:", "lastIndexOf", "I", 0x1, NULL },
    { "lastIndexOfWithInt:withLong:", "lastIndexOf", "I", 0x1, NULL },
    { "containsWithLong:", "contains", "Z", 0x1, NULL },
    { "grepWithGnuTroveProcedureTLongProcedure:", "grep", "Lgnu.trove.list.TLongList;", 0x1, NULL },
    { "inverseGrepWithGnuTroveProcedureTLongProcedure:", "inverseGrep", "Lgnu.trove.list.TLongList;", 0x1, NULL },
    { "max", NULL, "J", 0x1, NULL },
    { "min", NULL, "J", 0x1, NULL },
    { "sum", NULL, "J", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;" },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, .constantValue.asLong = GnuTroveListArrayTLongArrayList_serialVersionUID },
    { "_data_", NULL, 0x4, "[J", NULL,  },
    { "_pos_", NULL, 0x4, "I", NULL,  },
    { "DEFAULT_CAPACITY_", NULL, 0x1c, "I", NULL, .constantValue.asInt = GnuTroveListArrayTLongArrayList_DEFAULT_CAPACITY },
    { "no_entry_value_", NULL, 0x4, "J", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveListArrayTLongArrayList = { 1, "TLongArrayList", "gnu.trove.list.array", NULL, 0x1, 80, methods, 5, fields, 0, NULL};
  return &_GnuTroveListArrayTLongArrayList;
}

@end

GnuTroveListArrayTLongArrayList *GnuTroveListArrayTLongArrayList_wrapWithLongArray_(IOSLongArray *values) {
  GnuTroveListArrayTLongArrayList_init();
  return GnuTroveListArrayTLongArrayList_wrapWithLongArray_withLong_(values, (jlong) 0);
}

GnuTroveListArrayTLongArrayList *GnuTroveListArrayTLongArrayList_wrapWithLongArray_withLong_(IOSLongArray *values, jlong no_entry_value) {
  GnuTroveListArrayTLongArrayList_init();
  return [[[GnuTroveListArrayTLongArrayList_$1 alloc] initWithLongArray:values withLong:no_entry_value withBoolean:YES] autorelease];
}

void GnuTroveListArrayTLongArrayList_swapWithInt_withInt_(GnuTroveListArrayTLongArrayList *self, jint i, jint j) {
  jlong tmp = IOSLongArray_Get(nil_chk(self->_data_), i);
  *IOSLongArray_GetRef(self->_data_, i) = IOSLongArray_Get(self->_data_, j);
  *IOSLongArray_GetRef(self->_data_, j) = tmp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveListArrayTLongArrayList)

@implementation GnuTroveListArrayTLongArrayList_$1

- (void)ensureCapacityWithInt:(jint)capacity {
  if (capacity > ((IOSLongArray *) nil_chk(_data_))->size_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Can not grow ArrayList wrapped external array"] autorelease];
}

- (instancetype)initWithLongArray:(IOSLongArray *)arg$0
                         withLong:(jlong)arg$1
                      withBoolean:(jboolean)arg$2 {
  return [super initWithLongArray:arg$0 withLong:arg$1 withBoolean:arg$2];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "ensureCapacityWithInt:", "ensureCapacity", "V", 0x1, NULL },
    { "initWithLongArray:withLong:withBoolean:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _GnuTroveListArrayTLongArrayList_$1 = { 1, "$1", "gnu.trove.list.array", "TLongArrayList", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_GnuTroveListArrayTLongArrayList_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveListArrayTLongArrayList_$1)
