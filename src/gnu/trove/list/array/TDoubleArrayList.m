//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/list/array/TDoubleArrayList.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/TDoubleCollection.h"
#include "gnu/trove/function/TDoubleFunction.h"
#include "gnu/trove/impl/Constants.h"
#include "gnu/trove/impl/HashFunctions.h"
#include "gnu/trove/iterator/TDoubleIterator.h"
#include "gnu/trove/list/TDoubleList.h"
#include "gnu/trove/list/array/TDoubleArrayList.h"
#include "gnu/trove/procedure/TDoubleProcedure.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Random.h"

__attribute__((unused)) static void GnuTroveListArrayTDoubleArrayList_swapWithInt_withInt_(GnuTroveListArrayTDoubleArrayList *self, jint i, jint j);

@interface GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator () {
 @public
  GnuTroveListArrayTDoubleArrayList *this$0_;
  /**
   @brief Index of element to be returned by subsequent call to next.
   */
  jint cursor_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator, this$0_, GnuTroveListArrayTDoubleArrayList *)

@interface GnuTroveListArrayTDoubleArrayList ()

/**
 @brief Swap the values at offsets <tt>i</tt> and <tt>j</tt>.
 @param i an offset into the data array
 @param j an offset into the data array
 */
- (void)swapWithInt:(jint)i
            withInt:(jint)j;
@end

@implementation GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator

- (instancetype)initWithGnuTroveListArrayTDoubleArrayList:(GnuTroveListArrayTDoubleArrayList *)outer$
                                                  withInt:(jint)index {
  GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator_set_this$0_(self, outer$);
  if (self = [super init]) {
    cursor_ = 0;
    lastRet_ = -1;
    cursor_ = index;
  }
  return self;
}

- (jboolean)hasNext {
  return cursor_ < [this$0_ size];
}

- (jdouble)next {
  @try {
    jdouble next = [this$0_ getWithInt:cursor_];
    lastRet_ = cursor_++;
    return next;
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
}

- (void)remove {
  if (lastRet_ == -1) @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  @try {
    [this$0_ removeWithInt:lastRet_ withInt:1];
    if (lastRet_ < cursor_) cursor_--;
    lastRet_ = -1;
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator_set_this$0_(other, this$0_);
  other->cursor_ = cursor_;
  other->lastRet_ = lastRet_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveListArrayTDoubleArrayList:withInt:", "TDoubleArrayIterator", NULL, 0x0, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL },
    { "next", NULL, "D", 0x1, NULL },
    { "remove", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgnu.trove.list.array.TDoubleArrayList;", NULL,  },
    { "cursor_", NULL, 0x2, "I", NULL,  },
    { "lastRet_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator = { 1, "TDoubleArrayIterator", "gnu.trove.list.array", "TDoubleArrayList", 0x0, 4, methods, 3, fields, 0, NULL};
  return &_GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator)

@implementation GnuTroveListArrayTDoubleArrayList

- (instancetype)init {
  return [self initGnuTroveListArrayTDoubleArrayListWithInt:GnuTroveListArrayTDoubleArrayList_DEFAULT_CAPACITY withDouble:(jdouble) 0];
}

- (instancetype)initGnuTroveListArrayTDoubleArrayListWithInt:(jint)capacity {
  return [self initGnuTroveListArrayTDoubleArrayListWithInt:capacity withDouble:(jdouble) 0];
}

- (instancetype)initWithInt:(jint)capacity {
  return [self initGnuTroveListArrayTDoubleArrayListWithInt:capacity];
}

- (instancetype)initGnuTroveListArrayTDoubleArrayListWithInt:(jint)capacity
                                                  withDouble:(jdouble)no_entry_value {
  if (self = [super init]) {
    GnuTroveListArrayTDoubleArrayList_setAndConsume__data_(self, [IOSDoubleArray newArrayWithLength:capacity]);
    _pos_ = 0;
    self->no_entry_value_ = no_entry_value;
  }
  return self;
}

- (instancetype)initWithInt:(jint)capacity
                 withDouble:(jdouble)no_entry_value {
  return [self initGnuTroveListArrayTDoubleArrayListWithInt:capacity withDouble:no_entry_value];
}

- (instancetype)initWithGnuTroveTDoubleCollection:(id<GnuTroveTDoubleCollection>)collection {
  if (self = [self initGnuTroveListArrayTDoubleArrayListWithInt:[((id<GnuTroveTDoubleCollection>) nil_chk(collection)) size]]) {
    [self addAllWithGnuTroveTDoubleCollection:collection];
  }
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)values {
  if (self = [self initGnuTroveListArrayTDoubleArrayListWithInt:((IOSDoubleArray *) nil_chk(values))->size_]) {
    [self addWithDoubleArray:values];
  }
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)values
                         withDouble:(jdouble)no_entry_value
                        withBoolean:(jboolean)wrap {
  if (self = [super init]) {
    if (!wrap) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Wrong call"] autorelease];
    if (values == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"values can not be null"] autorelease];
    GnuTroveListArrayTDoubleArrayList_set__data_(self, values);
    _pos_ = ((IOSDoubleArray *) nil_chk(values))->size_;
    self->no_entry_value_ = no_entry_value;
  }
  return self;
}

+ (GnuTroveListArrayTDoubleArrayList *)wrapWithDoubleArray:(IOSDoubleArray *)values {
  return GnuTroveListArrayTDoubleArrayList_wrapWithDoubleArray_(values);
}

+ (GnuTroveListArrayTDoubleArrayList *)wrapWithDoubleArray:(IOSDoubleArray *)values
                                                withDouble:(jdouble)no_entry_value {
  return GnuTroveListArrayTDoubleArrayList_wrapWithDoubleArray_withDouble_(values, no_entry_value);
}

- (jdouble)getNoEntryValue {
  return no_entry_value_;
}

- (void)ensureCapacityWithInt:(jint)capacity {
  if (capacity > ((IOSDoubleArray *) nil_chk(_data_))->size_) {
    jint newCap = JavaLangMath_maxWithInt_withInt_(LShift32(_data_->size_, 1), capacity);
    IOSDoubleArray *tmp = [IOSDoubleArray arrayWithLength:newCap];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, 0, tmp, 0, _data_->size_);
    GnuTroveListArrayTDoubleArrayList_set__data_(self, tmp);
  }
}

- (jint)size {
  return _pos_;
}

- (jboolean)isEmpty {
  return _pos_ == 0;
}

- (void)trimToSize {
  if (((IOSDoubleArray *) nil_chk(_data_))->size_ > [self size]) {
    IOSDoubleArray *tmp = [IOSDoubleArray arrayWithLength:[self size]];
    [self toArrayWithDoubleArray:tmp withInt:0 withInt:tmp->size_];
    GnuTroveListArrayTDoubleArrayList_set__data_(self, tmp);
  }
}

- (jboolean)addWithDouble:(jdouble)val {
  [self ensureCapacityWithInt:_pos_ + 1];
  *IOSDoubleArray_GetRef(nil_chk(_data_), _pos_++) = val;
  return YES;
}

- (void)addWithDoubleArray:(IOSDoubleArray *)vals {
  [self addWithDoubleArray:vals withInt:0 withInt:((IOSDoubleArray *) nil_chk(vals))->size_];
}

- (void)addWithDoubleArray:(IOSDoubleArray *)vals
                   withInt:(jint)offset
                   withInt:(jint)length {
  [self ensureCapacityWithInt:_pos_ + length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(vals, offset, _data_, _pos_, length);
  _pos_ += length;
}

- (void)insertWithInt:(jint)offset
           withDouble:(jdouble)value {
  if (offset == _pos_) {
    [self addWithDouble:value];
    return;
  }
  [self ensureCapacityWithInt:_pos_ + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, offset, _data_, offset + 1, _pos_ - offset);
  *IOSDoubleArray_GetRef(nil_chk(_data_), offset) = value;
  _pos_++;
}

- (void)insertWithInt:(jint)offset
      withDoubleArray:(IOSDoubleArray *)values {
  [self insertWithInt:offset withDoubleArray:values withInt:0 withInt:((IOSDoubleArray *) nil_chk(values))->size_];
}

- (void)insertWithInt:(jint)offset
      withDoubleArray:(IOSDoubleArray *)values
              withInt:(jint)valOffset
              withInt:(jint)len {
  if (offset == _pos_) {
    [self addWithDoubleArray:values withInt:valOffset withInt:len];
    return;
  }
  [self ensureCapacityWithInt:_pos_ + len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, offset, _data_, offset + len, _pos_ - offset);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, valOffset, _data_, offset, len);
  _pos_ += len;
}

- (jdouble)getWithInt:(jint)offset {
  if (offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  return IOSDoubleArray_Get(nil_chk(_data_), offset);
}

- (jdouble)getQuickWithInt:(jint)offset {
  return IOSDoubleArray_Get(nil_chk(_data_), offset);
}

- (jdouble)setWithInt:(jint)offset
           withDouble:(jdouble)val {
  if (offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  jdouble prev_val = IOSDoubleArray_Get(nil_chk(_data_), offset);
  *IOSDoubleArray_GetRef(_data_, offset) = val;
  return prev_val;
}

- (jdouble)replaceWithInt:(jint)offset
               withDouble:(jdouble)val {
  if (offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  jdouble old = IOSDoubleArray_Get(nil_chk(_data_), offset);
  *IOSDoubleArray_GetRef(_data_, offset) = val;
  return old;
}

- (void)setWithInt:(jint)offset
   withDoubleArray:(IOSDoubleArray *)values {
  [self setWithInt:offset withDoubleArray:values withInt:0 withInt:((IOSDoubleArray *) nil_chk(values))->size_];
}

- (void)setWithInt:(jint)offset
   withDoubleArray:(IOSDoubleArray *)values
           withInt:(jint)valOffset
           withInt:(jint)length {
  if (offset < 0 || offset + length > _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, valOffset, _data_, offset, length);
}

- (void)setQuickWithInt:(jint)offset
             withDouble:(jdouble)val {
  *IOSDoubleArray_GetRef(nil_chk(_data_), offset) = val;
}

- (void)clear {
  [self clearWithInt:GnuTroveListArrayTDoubleArrayList_DEFAULT_CAPACITY];
}

- (void)clearWithInt:(jint)capacity {
  GnuTroveListArrayTDoubleArrayList_setAndConsume__data_(self, [IOSDoubleArray newArrayWithLength:capacity]);
  _pos_ = 0;
}

- (void)reset {
  _pos_ = 0;
  JavaUtilArrays_fillWithDoubleArray_withDouble_(_data_, no_entry_value_);
}

- (void)resetQuick {
  _pos_ = 0;
}

- (jboolean)removeWithDouble:(jdouble)value {
  for (jint index = 0; index < _pos_; index++) {
    if (value == IOSDoubleArray_Get(nil_chk(_data_), index)) {
      [self removeWithInt:index withInt:1];
      return YES;
    }
  }
  return NO;
}

- (jdouble)removeAtWithInt:(jint)offset {
  jdouble old = [self getWithInt:offset];
  [self removeWithInt:offset withInt:1];
  return old;
}

- (void)removeWithInt:(jint)offset
              withInt:(jint)length {
  if (length == 0) return;
  if (offset < 0 || offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  if (offset == 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, length, _data_, 0, _pos_ - length);
  }
  else if (_pos_ - length == offset) {
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, offset + length, _data_, offset, _pos_ - (offset + length));
  }
  _pos_ -= length;
}

- (id<GnuTroveIteratorTDoubleIterator>)iterator {
  return [[[GnuTroveListArrayTDoubleArrayList_TDoubleArrayIterator alloc] initWithGnuTroveListArrayTDoubleArrayList:self withInt:0] autorelease];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangDouble class]]) {
      jdouble c = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) check_class_cast(element, [JavaLangDouble class])))) doubleValue];
      if (![self containsWithDouble:c]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTDoubleCollection:(id<GnuTroveTDoubleCollection>)collection {
  if (self == collection) {
    return YES;
  }
  id<GnuTroveIteratorTDoubleIterator> iter = [((id<GnuTroveTDoubleCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTDoubleIterator>) nil_chk(iter)) hasNext]) {
    jdouble element = [iter next];
    if (![self containsWithDouble:element]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithDoubleArray:(IOSDoubleArray *)array {
  for (jint i = ((IOSDoubleArray *) nil_chk(array))->size_; i-- > 0; ) {
    if (![self containsWithDouble:IOSDoubleArray_Get(array, i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (JavaLangDouble * __strong element in nil_chk(collection)) {
    jdouble e = [((JavaLangDouble *) nil_chk(element)) doubleValue];
    if ([self addWithDouble:e]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)addAllWithGnuTroveTDoubleCollection:(id<GnuTroveTDoubleCollection>)collection {
  jboolean changed = NO;
  id<GnuTroveIteratorTDoubleIterator> iter = [((id<GnuTroveTDoubleCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTDoubleIterator>) nil_chk(iter)) hasNext]) {
    jdouble element = [iter next];
    if ([self addWithDouble:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)addAllWithDoubleArray:(IOSDoubleArray *)array {
  jboolean changed = NO;
  {
    IOSDoubleArray *a__ = array;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble element = *b__++;
      if ([self addWithDouble:element]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTDoubleIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTDoubleIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangDouble_valueOfWithDouble_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTDoubleCollection:(id<GnuTroveTDoubleCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTDoubleIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTDoubleIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTDoubleCollection>) nil_chk(collection)) containsWithDouble:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithDoubleArray:(IOSDoubleArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithDoubleArray_(array);
  IOSDoubleArray *data = _data_;
  for (jint i = _pos_; i-- > 0; ) {
    if (JavaUtilArrays_binarySearchWithDoubleArray_withDouble_(array, IOSDoubleArray_Get(nil_chk(data), i)) < 0) {
      [self removeWithInt:i withInt:1];
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangDouble class]]) {
      jdouble c = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) check_class_cast(element, [JavaLangDouble class])))) doubleValue];
      if ([self removeWithDouble:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTDoubleCollection:(id<GnuTroveTDoubleCollection>)collection {
  if (collection == self) {
    [self clear];
    return YES;
  }
  jboolean changed = NO;
  id<GnuTroveIteratorTDoubleIterator> iter = [((id<GnuTroveTDoubleCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTDoubleIterator>) nil_chk(iter)) hasNext]) {
    jdouble element = [iter next];
    if ([self removeWithDouble:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithDoubleArray:(IOSDoubleArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSDoubleArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithDouble:IOSDoubleArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)transformValuesWithGnuTroveFunctionTDoubleFunction:(id<GnuTroveFunctionTDoubleFunction>)function {
  for (jint i = _pos_; i-- > 0; ) {
    *IOSDoubleArray_GetRef(nil_chk(_data_), i) = [((id<GnuTroveFunctionTDoubleFunction>) nil_chk(function)) executeWithDouble:IOSDoubleArray_Get(_data_, i)];
  }
}

- (void)reverse {
  [self reverseWithInt:0 withInt:_pos_];
}

- (void)reverseWithInt:(jint)from
               withInt:(jint)to {
  if (from == to) {
    return;
  }
  if (from > to) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"from cannot be greater than to"] autorelease];
  }
  for (jint i = from, j = to - 1; i < j; i++, j--) {
    GnuTroveListArrayTDoubleArrayList_swapWithInt_withInt_(self, i, j);
  }
}

- (void)shuffleWithJavaUtilRandom:(JavaUtilRandom *)rand {
  for (jint i = _pos_; i-- > 1; ) {
    GnuTroveListArrayTDoubleArrayList_swapWithInt_withInt_(self, i, [((JavaUtilRandom *) nil_chk(rand)) nextIntWithInt:i]);
  }
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  GnuTroveListArrayTDoubleArrayList_swapWithInt_withInt_(self, i, j);
}

- (id<GnuTroveListTDoubleList>)subListWithInt:(jint)begin
                                      withInt:(jint)end {
  if (end < begin) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I$I", @"end index ", end, @" greater than begin index ", begin)] autorelease];
  }
  if (begin < 0) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:@"begin index can not be < 0"] autorelease];
  }
  if (end > ((IOSDoubleArray *) nil_chk(_data_))->size_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] initWithNSString:JreStrcat("$I", @"end index < ", _data_->size_)] autorelease];
  }
  GnuTroveListArrayTDoubleArrayList *list = [[[GnuTroveListArrayTDoubleArrayList alloc] initWithInt:end - begin] autorelease];
  for (jint i = begin; i < end; i++) {
    [list addWithDouble:IOSDoubleArray_Get(_data_, i)];
  }
  return list;
}

- (IOSDoubleArray *)toArray {
  return [self toArrayWithInt:0 withInt:_pos_];
}

- (IOSDoubleArray *)toArrayWithInt:(jint)offset
                           withInt:(jint)len {
  IOSDoubleArray *rv = [IOSDoubleArray arrayWithLength:len];
  [self toArrayWithDoubleArray:rv withInt:offset withInt:len];
  return rv;
}

- (IOSDoubleArray *)toArrayWithDoubleArray:(IOSDoubleArray *)dest {
  jint len = ((IOSDoubleArray *) nil_chk(dest))->size_;
  if (dest->size_ > _pos_) {
    len = _pos_;
    *IOSDoubleArray_GetRef(dest, len) = no_entry_value_;
  }
  [self toArrayWithDoubleArray:dest withInt:0 withInt:len];
  return dest;
}

- (IOSDoubleArray *)toArrayWithDoubleArray:(IOSDoubleArray *)dest
                                   withInt:(jint)offset
                                   withInt:(jint)len {
  if (len == 0) {
    return dest;
  }
  if (offset < 0 || offset >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:offset] autorelease];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, offset, dest, 0, len);
  return dest;
}

- (IOSDoubleArray *)toArrayWithDoubleArray:(IOSDoubleArray *)dest
                                   withInt:(jint)source_pos
                                   withInt:(jint)dest_pos
                                   withInt:(jint)len {
  if (len == 0) {
    return dest;
  }
  if (source_pos < 0 || source_pos >= _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:source_pos] autorelease];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, source_pos, dest, dest_pos, len);
  return dest;
}

- (jboolean)isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (!([GnuTroveListTDoubleList_class_() isInstance:other])) return NO;
  if ([other isKindOfClass:[GnuTroveListArrayTDoubleArrayList class]]) {
    GnuTroveListArrayTDoubleArrayList *that = (GnuTroveListArrayTDoubleArrayList *) check_class_cast(other, [GnuTroveListArrayTDoubleArrayList class]);
    if ([((GnuTroveListArrayTDoubleArrayList *) nil_chk(that)) size] != [self size]) return NO;
    for (jint i = _pos_; i-- > 0; ) {
      if (IOSDoubleArray_Get(nil_chk(self->_data_), i) != IOSDoubleArray_Get(that->_data_, i)) {
        return NO;
      }
    }
    return YES;
  }
  else {
    id<GnuTroveListTDoubleList> that = (id<GnuTroveListTDoubleList>) check_protocol_cast(other, @protocol(GnuTroveListTDoubleList));
    if ([((id<GnuTroveListTDoubleList>) nil_chk(that)) size] != [self size]) return NO;
    for (jint i = 0; i < _pos_; i++) {
      if (IOSDoubleArray_Get(nil_chk(self->_data_), i) != [that getWithInt:i]) {
        return NO;
      }
    }
    return YES;
  }
}

- (NSUInteger)hash {
  jint h = 0;
  for (jint i = _pos_; i-- > 0; ) {
    h += GnuTroveImplHashFunctions_hash__WithDouble_(IOSDoubleArray_Get(nil_chk(_data_), i));
  }
  return h;
}

- (jboolean)forEachWithGnuTroveProcedureTDoubleProcedure:(id<GnuTroveProcedureTDoubleProcedure>)procedure {
  for (jint i = 0; i < _pos_; i++) {
    if (![((id<GnuTroveProcedureTDoubleProcedure>) nil_chk(procedure)) executeWithDouble:IOSDoubleArray_Get(nil_chk(_data_), i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)forEachDescendingWithGnuTroveProcedureTDoubleProcedure:(id<GnuTroveProcedureTDoubleProcedure>)procedure {
  for (jint i = _pos_; i-- > 0; ) {
    if (![((id<GnuTroveProcedureTDoubleProcedure>) nil_chk(procedure)) executeWithDouble:IOSDoubleArray_Get(nil_chk(_data_), i)]) {
      return NO;
    }
  }
  return YES;
}

- (void)sort {
  JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(_data_, 0, _pos_);
}

- (void)sortWithInt:(jint)fromIndex
            withInt:(jint)toIndex {
  JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(_data_, fromIndex, toIndex);
}

- (void)fillWithDouble:(jdouble)val {
  JavaUtilArrays_fillWithDoubleArray_withInt_withInt_withDouble_(_data_, 0, _pos_, val);
}

- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
         withDouble:(jdouble)val {
  if (toIndex > _pos_) {
    [self ensureCapacityWithInt:toIndex];
    _pos_ = toIndex;
  }
  JavaUtilArrays_fillWithDoubleArray_withInt_withInt_withDouble_(_data_, fromIndex, toIndex, val);
}

- (jint)binarySearchWithDouble:(jdouble)value {
  return [self binarySearchWithDouble:value withInt:0 withInt:_pos_];
}

- (jint)binarySearchWithDouble:(jdouble)value
                       withInt:(jint)fromIndex
                       withInt:(jint)toIndex {
  if (fromIndex < 0) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:fromIndex] autorelease];
  }
  if (toIndex > _pos_) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithInt:toIndex] autorelease];
  }
  jint low = fromIndex;
  jint high = toIndex - 1;
  while (low <= high) {
    jint mid = URShift32((low + high), 1);
    jdouble midVal = IOSDoubleArray_Get(nil_chk(_data_), mid);
    if (midVal < value) {
      low = mid + 1;
    }
    else if (midVal > value) {
      high = mid - 1;
    }
    else {
      return mid;
    }
  }
  return -(low + 1);
}

- (jint)indexOfWithDouble:(jdouble)value {
  return [self indexOfWithInt:0 withDouble:value];
}

- (jint)indexOfWithInt:(jint)offset
            withDouble:(jdouble)value {
  for (jint i = offset; i < _pos_; i++) {
    if (IOSDoubleArray_Get(nil_chk(_data_), i) == value) {
      return i;
    }
  }
  return -1;
}

- (jint)lastIndexOfWithDouble:(jdouble)value {
  return [self lastIndexOfWithInt:_pos_ withDouble:value];
}

- (jint)lastIndexOfWithInt:(jint)offset
                withDouble:(jdouble)value {
  for (jint i = offset; i-- > 0; ) {
    if (IOSDoubleArray_Get(nil_chk(_data_), i) == value) {
      return i;
    }
  }
  return -1;
}

- (jboolean)containsWithDouble:(jdouble)value {
  return [self lastIndexOfWithDouble:value] >= 0;
}

- (id<GnuTroveListTDoubleList>)grepWithGnuTroveProcedureTDoubleProcedure:(id<GnuTroveProcedureTDoubleProcedure>)condition {
  GnuTroveListArrayTDoubleArrayList *list = [[[GnuTroveListArrayTDoubleArrayList alloc] init] autorelease];
  for (jint i = 0; i < _pos_; i++) {
    if ([((id<GnuTroveProcedureTDoubleProcedure>) nil_chk(condition)) executeWithDouble:IOSDoubleArray_Get(nil_chk(_data_), i)]) {
      [list addWithDouble:IOSDoubleArray_Get(_data_, i)];
    }
  }
  return list;
}

- (id<GnuTroveListTDoubleList>)inverseGrepWithGnuTroveProcedureTDoubleProcedure:(id<GnuTroveProcedureTDoubleProcedure>)condition {
  GnuTroveListArrayTDoubleArrayList *list = [[[GnuTroveListArrayTDoubleArrayList alloc] init] autorelease];
  for (jint i = 0; i < _pos_; i++) {
    if (![((id<GnuTroveProcedureTDoubleProcedure>) nil_chk(condition)) executeWithDouble:IOSDoubleArray_Get(nil_chk(_data_), i)]) {
      [list addWithDouble:IOSDoubleArray_Get(_data_, i)];
    }
  }
  return list;
}

- (jdouble)max {
  if ([self size] == 0) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"cannot find maximum of an empty list"] autorelease];
  }
  jdouble max = JavaLangDouble_NEGATIVE_INFINITY;
  for (jint i = 0; i < _pos_; i++) {
    if (IOSDoubleArray_Get(nil_chk(_data_), i) > max) {
      max = IOSDoubleArray_Get(_data_, i);
    }
  }
  return max;
}

- (jdouble)min {
  if ([self size] == 0) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"cannot find minimum of an empty list"] autorelease];
  }
  jdouble min = JavaLangDouble_POSITIVE_INFINITY;
  for (jint i = 0; i < _pos_; i++) {
    if (IOSDoubleArray_Get(nil_chk(_data_), i) < min) {
      min = IOSDoubleArray_Get(_data_, i);
    }
  }
  return min;
}

- (jdouble)sum {
  jdouble sum = 0;
  for (jint i = 0; i < _pos_; i++) {
    sum += IOSDoubleArray_Get(nil_chk(_data_), i);
  }
  return sum;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:@"{"] autorelease];
  for (jint i = 0, end = _pos_ - 1; i < end; i++) {
    [buf appendWithDouble:IOSDoubleArray_Get(nil_chk(_data_), i)];
    [buf appendWithNSString:@", "];
  }
  if ([self size] > 0) {
    [buf appendWithDouble:IOSDoubleArray_Get(nil_chk(_data_), _pos_ - 1)];
  }
  [buf appendWithNSString:@"}"];
  return [buf description];
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeByteWithInt:0];
  [outArg writeIntWithInt:_pos_];
  [outArg writeDoubleWithDouble:no_entry_value_];
  jint len = ((IOSDoubleArray *) nil_chk(_data_))->size_;
  [outArg writeIntWithInt:len];
  for (jint i = 0; i < len; i++) {
    [outArg writeDoubleWithDouble:IOSDoubleArray_Get(_data_, i)];
  }
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  [((id<JavaIoObjectInput>) nil_chk(inArg)) readByte];
  _pos_ = [inArg readInt];
  no_entry_value_ = [inArg readDouble];
  jint len = [inArg readInt];
  GnuTroveListArrayTDoubleArrayList_setAndConsume__data_(self, [IOSDoubleArray newArrayWithLength:len]);
  for (jint i = 0; i < len; i++) {
    *IOSDoubleArray_GetRef(_data_, i) = [inArg readDouble];
  }
}

- (void)dealloc {
  RELEASE_(_data_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveListArrayTDoubleArrayList *)other {
  [super copyAllFieldsTo:other];
  GnuTroveListArrayTDoubleArrayList_set__data_(other, _data_);
  other->_pos_ = _pos_;
  other->no_entry_value_ = no_entry_value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TDoubleArrayList", NULL, 0x1, NULL },
    { "initWithInt:", "TDoubleArrayList", NULL, 0x1, NULL },
    { "initWithInt:withDouble:", "TDoubleArrayList", NULL, 0x1, NULL },
    { "initWithGnuTroveTDoubleCollection:", "TDoubleArrayList", NULL, 0x1, NULL },
    { "initWithDoubleArray:", "TDoubleArrayList", NULL, 0x1, NULL },
    { "initWithDoubleArray:withDouble:withBoolean:", "TDoubleArrayList", NULL, 0x4, NULL },
    { "wrapWithDoubleArray:", "wrap", "Lgnu.trove.list.array.TDoubleArrayList;", 0x9, NULL },
    { "wrapWithDoubleArray:withDouble:", "wrap", "Lgnu.trove.list.array.TDoubleArrayList;", 0x9, NULL },
    { "getNoEntryValue", NULL, "D", 0x1, NULL },
    { "ensureCapacityWithInt:", "ensureCapacity", "V", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "trimToSize", NULL, "V", 0x1, NULL },
    { "addWithDouble:", "add", "Z", 0x1, NULL },
    { "addWithDoubleArray:", "add", "V", 0x1, NULL },
    { "addWithDoubleArray:withInt:withInt:", "add", "V", 0x1, NULL },
    { "insertWithInt:withDouble:", "insert", "V", 0x1, NULL },
    { "insertWithInt:withDoubleArray:", "insert", "V", 0x1, NULL },
    { "insertWithInt:withDoubleArray:withInt:withInt:", "insert", "V", 0x1, NULL },
    { "getWithInt:", "get", "D", 0x1, NULL },
    { "getQuickWithInt:", "getQuick", "D", 0x1, NULL },
    { "setWithInt:withDouble:", "set", "D", 0x1, NULL },
    { "replaceWithInt:withDouble:", "replace", "D", 0x1, NULL },
    { "setWithInt:withDoubleArray:", "set", "V", 0x1, NULL },
    { "setWithInt:withDoubleArray:withInt:withInt:", "set", "V", 0x1, NULL },
    { "setQuickWithInt:withDouble:", "setQuick", "V", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "clearWithInt:", "clear", "V", 0x1, NULL },
    { "reset", NULL, "V", 0x1, NULL },
    { "resetQuick", NULL, "V", 0x1, NULL },
    { "removeWithDouble:", "remove", "Z", 0x1, NULL },
    { "removeAtWithInt:", "removeAt", "D", 0x1, NULL },
    { "removeWithInt:withInt:", "remove", "V", 0x1, NULL },
    { "iterator", NULL, "Lgnu.trove.iterator.TDoubleIterator;", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTDoubleCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithDoubleArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTDoubleCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithDoubleArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTDoubleCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithDoubleArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTDoubleCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithDoubleArray:", "removeAll", "Z", 0x1, NULL },
    { "transformValuesWithGnuTroveFunctionTDoubleFunction:", "transformValues", "V", 0x1, NULL },
    { "reverse", NULL, "V", 0x1, NULL },
    { "reverseWithInt:withInt:", "reverse", "V", 0x1, NULL },
    { "shuffleWithJavaUtilRandom:", "shuffle", "V", 0x1, NULL },
    { "swapWithInt:withInt:", "swap", "V", 0x2, NULL },
    { "subListWithInt:withInt:", "subList", "Lgnu.trove.list.TDoubleList;", 0x1, NULL },
    { "toArray", NULL, "[D", 0x1, NULL },
    { "toArrayWithInt:withInt:", "toArray", "[D", 0x1, NULL },
    { "toArrayWithDoubleArray:", "toArray", "[D", 0x1, NULL },
    { "toArrayWithDoubleArray:withInt:withInt:", "toArray", "[D", 0x1, NULL },
    { "toArrayWithDoubleArray:withInt:withInt:withInt:", "toArray", "[D", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "forEachWithGnuTroveProcedureTDoubleProcedure:", "forEach", "Z", 0x1, NULL },
    { "forEachDescendingWithGnuTroveProcedureTDoubleProcedure:", "forEachDescending", "Z", 0x1, NULL },
    { "sort", NULL, "V", 0x1, NULL },
    { "sortWithInt:withInt:", "sort", "V", 0x1, NULL },
    { "fillWithDouble:", "fill", "V", 0x1, NULL },
    { "fillWithInt:withInt:withDouble:", "fill", "V", 0x1, NULL },
    { "binarySearchWithDouble:", "binarySearch", "I", 0x1, NULL },
    { "binarySearchWithDouble:withInt:withInt:", "binarySearch", "I", 0x1, NULL },
    { "indexOfWithDouble:", "indexOf", "I", 0x1, NULL },
    { "indexOfWithInt:withDouble:", "indexOf", "I", 0x1, NULL },
    { "lastIndexOfWithDouble:", "lastIndexOf", "I", 0x1, NULL },
    { "lastIndexOfWithInt:withDouble:", "lastIndexOf", "I", 0x1, NULL },
    { "containsWithDouble:", "contains", "Z", 0x1, NULL },
    { "grepWithGnuTroveProcedureTDoubleProcedure:", "grep", "Lgnu.trove.list.TDoubleList;", 0x1, NULL },
    { "inverseGrepWithGnuTroveProcedureTDoubleProcedure:", "inverseGrep", "Lgnu.trove.list.TDoubleList;", 0x1, NULL },
    { "max", NULL, "D", 0x1, NULL },
    { "min", NULL, "D", 0x1, NULL },
    { "sum", NULL, "D", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;" },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, .constantValue.asLong = GnuTroveListArrayTDoubleArrayList_serialVersionUID },
    { "_data_", NULL, 0x4, "[D", NULL,  },
    { "_pos_", NULL, 0x4, "I", NULL,  },
    { "DEFAULT_CAPACITY_", NULL, 0x1c, "I", NULL, .constantValue.asInt = GnuTroveListArrayTDoubleArrayList_DEFAULT_CAPACITY },
    { "no_entry_value_", NULL, 0x4, "D", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveListArrayTDoubleArrayList = { 1, "TDoubleArrayList", "gnu.trove.list.array", NULL, 0x1, 80, methods, 5, fields, 0, NULL};
  return &_GnuTroveListArrayTDoubleArrayList;
}

@end

GnuTroveListArrayTDoubleArrayList *GnuTroveListArrayTDoubleArrayList_wrapWithDoubleArray_(IOSDoubleArray *values) {
  GnuTroveListArrayTDoubleArrayList_init();
  return GnuTroveListArrayTDoubleArrayList_wrapWithDoubleArray_withDouble_(values, (jdouble) 0);
}

GnuTroveListArrayTDoubleArrayList *GnuTroveListArrayTDoubleArrayList_wrapWithDoubleArray_withDouble_(IOSDoubleArray *values, jdouble no_entry_value) {
  GnuTroveListArrayTDoubleArrayList_init();
  return [[[GnuTroveListArrayTDoubleArrayList_$1 alloc] initWithDoubleArray:values withDouble:no_entry_value withBoolean:YES] autorelease];
}

void GnuTroveListArrayTDoubleArrayList_swapWithInt_withInt_(GnuTroveListArrayTDoubleArrayList *self, jint i, jint j) {
  jdouble tmp = IOSDoubleArray_Get(nil_chk(self->_data_), i);
  *IOSDoubleArray_GetRef(self->_data_, i) = IOSDoubleArray_Get(self->_data_, j);
  *IOSDoubleArray_GetRef(self->_data_, j) = tmp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveListArrayTDoubleArrayList)

@implementation GnuTroveListArrayTDoubleArrayList_$1

- (void)ensureCapacityWithInt:(jint)capacity {
  if (capacity > ((IOSDoubleArray *) nil_chk(_data_))->size_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Can not grow ArrayList wrapped external array"] autorelease];
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)arg$0
                         withDouble:(jdouble)arg$1
                        withBoolean:(jboolean)arg$2 {
  return [super initWithDoubleArray:arg$0 withDouble:arg$1 withBoolean:arg$2];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "ensureCapacityWithInt:", "ensureCapacity", "V", 0x1, NULL },
    { "initWithDoubleArray:withDouble:withBoolean:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _GnuTroveListArrayTDoubleArrayList_$1 = { 1, "$1", "gnu.trove.list.array", "TDoubleArrayList", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_GnuTroveListArrayTDoubleArrayList_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveListArrayTDoubleArrayList_$1)
