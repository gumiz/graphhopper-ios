//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/list/TIntList.java
//

#ifndef _GnuTroveListTIntList_H_
#define _GnuTroveListTIntList_H_

@class IOSIntArray;
@class JavaUtilRandom;
@protocol GnuTroveFunctionTIntFunction;
@protocol GnuTroveProcedureTIntProcedure;

#include "J2ObjC_header.h"
#include "gnu/trove/TIntCollection.h"

/**
 @brief Interface for Trove list implementations.
 */
@protocol GnuTroveListTIntList < GnuTroveTIntCollection, NSObject, JavaObject >
/**
 @brief Returns the value that is used to represent null.
 The default value is generally zero, but can be changed during construction of the collection.
 @return the value that represents null
 */
- (jint)getNoEntryValue;

/**
 @brief Returns the number of values in the list.
 @return the number of values in the list.
 */
- (jint)size;

/**
 @brief Tests whether this list contains any values.
 @return true if the list is empty.
 */
- (jboolean)isEmpty;

/**
 @brief Adds <tt>val</tt> to the end of the list, growing as needed.
 @param val an <code>int</code> value
 @return true if the list was modified by the add operation
 */
- (jboolean)addWithInt:(jint)val;

/**
 @brief Adds the values in the array <tt>vals</tt> to the end of the list, in order.
 @param vals an <code>int[]</code> value
 */
- (void)addWithIntArray:(IOSIntArray *)vals;

/**
 @brief Adds a subset of the values in the array <tt>vals</tt> to the end of the list, in order.
 @param vals an <code>int[]</code> value
 @param offset the offset at which to start copying
 @param length the number of values to copy.
 */
- (void)addWithIntArray:(IOSIntArray *)vals
                withInt:(jint)offset
                withInt:(jint)length;

/**
 @brief Inserts <tt>value</tt> into the list at <tt>offset</tt>.
 All values including and to the right of <tt>offset</tt> are shifted to the right.
 @param offset an <code>int</code> value
 @param value an <code>int</code> value
 */
- (void)insertWithInt:(jint)offset
              withInt:(jint)value;

/**
 @brief Inserts the array of <tt>values</tt> into the list at <tt>offset</tt>.
 All values including and to the right of <tt>offset</tt> are shifted to the right.
 @param offset an <code>int</code> value
 @param values an <code>int[]</code> value
 */
- (void)insertWithInt:(jint)offset
         withIntArray:(IOSIntArray *)values;

/**
 @brief Inserts a slice of the array of <tt>values</tt> into the list at <tt>offset</tt>.
 All values including and to the right of <tt>offset</tt> are shifted to the right.
 @param offset an <code>int</code> value
 @param values an <code>int[]</code> value
 @param valOffset the offset in the values array at which to start copying.
 @param len the number of values to copy from the values array
 */
- (void)insertWithInt:(jint)offset
         withIntArray:(IOSIntArray *)values
              withInt:(jint)valOffset
              withInt:(jint)len;

/**
 @brief Returns the value at the specified offset.
 @param offset an <code>int</code> value
 @return an <code>int</code> value
 */
- (jint)getWithInt:(jint)offset;

/**
 @brief Sets the value at the specified offset.
 @param offset an <code>int</code> value
 @param val an <code>int</code> value
 @return The value previously at the given index.
 */
- (jint)setWithInt:(jint)offset
           withInt:(jint)val;

/**
 @brief Replace the values in the list starting at <tt>offset</tt> with the contents of the <tt>values</tt> array.
 @param offset the first offset to replace
 @param values the source of the new values
 */
- (void)setWithInt:(jint)offset
      withIntArray:(IOSIntArray *)values;

/**
 @brief Replace the values in the list starting at <tt>offset</tt> with <tt>length</tt> values from the <tt>values</tt> array, starting at valOffset.
 @param offset the first offset to replace
 @param values the source of the new values
 @param valOffset the first value to copy from the values array
 @param length the number of values to copy
 */
- (void)setWithInt:(jint)offset
      withIntArray:(IOSIntArray *)values
           withInt:(jint)valOffset
           withInt:(jint)length;

/**
 @brief Sets the value at the specified offset and returns the previously stored value.
 @param offset an <code>int</code> value
 @param val an <code>int</code> value
 @return the value previously stored at offset.
 */
- (jint)replaceWithInt:(jint)offset
               withInt:(jint)val;

/**
 @brief Flushes the internal state of the list, resetting the capacity to the default.
 */
- (void)clear;

/**
 @brief Removes <tt>value</tt> from the list.
 @param value an <code>int</code> value
 @return true if the list was modified by the remove operation.
 */
- (jboolean)removeWithInt:(jint)value;

/**
 @brief Removes <tt>value</tt> at a given offset from the list.
 @param offset an <code>int</code> value that represents the offset to the element to be removed
 @return an <tt>int</tt> that is the value removed.
 */
- (jint)removeAtWithInt:(jint)offset;

/**
 @brief Removes <tt>length</tt> values from the list, starting at <tt>offset</tt>
 @param offset an <code>int</code> value
 @param length an <code>int</code> value
 */
- (void)removeWithInt:(jint)offset
              withInt:(jint)length;

/**
 @brief Transform each value in the list using the specified function.
 @param function a <code>TIntFunction</code> value
 */
- (void)transformValuesWithGnuTroveFunctionTIntFunction:(id<GnuTroveFunctionTIntFunction>)function;

/**
 @brief Reverse the order of the elements in the list.
 */
- (void)reverse;

/**
 @brief Reverse the order of the elements in the range of the list.
 @param from the inclusive index at which to start reversing
 @param to the exclusive index at which to stop reversing
 */
- (void)reverseWithInt:(jint)from
               withInt:(jint)to;

/**
 @brief Shuffle the elements of the list using the specified random number generator.
 @param rand a <code>Random</code> value
 */
- (void)shuffleWithJavaUtilRandom:(JavaUtilRandom *)rand;

/**
 @brief Returns a sublist of this list.
 @param begin low endpoint (inclusive) of the subList.
 @param end high endpoint (exclusive) of the subList.
 @return sublist of this list from begin, inclusive to end, exclusive.
 @throws IndexOutOfBoundsException - endpoint out of range
 @throws IllegalArgumentException - endpoints out of order (end > begin)
 */
- (id<GnuTroveListTIntList>)subListWithInt:(jint)begin
                                   withInt:(jint)end;

/**
 @brief Copies the contents of the list into a native array.
 @return an <code>int[]</code> value
 */
- (IOSIntArray *)toArray;

/**
 @brief Copies a slice of the list into a native array.
 @param offset the offset at which to start copying
 @param len the number of values to copy.
 @return an <code>int[]</code> value
 */
- (IOSIntArray *)toArrayWithInt:(jint)offset
                        withInt:(jint)len;

/**
 @brief Copies a slice of the list into a native array.
 <p>If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the list is set to <tt> #getNoEntryValue() </tt>. (This is useful in determining the length of the list <i>only</i> if the caller knows that the list does not contain any "null" elements.) <p>NOTE: Trove does not allocate a new array if the array passed in is not large enough to hold all of the data elements.  It will instead fill the array passed in.
 @param dest the array to copy into.
 @return the array passed in.
 */
- (IOSIntArray *)toArrayWithIntArray:(IOSIntArray *)dest;

/**
 @brief Copies a slice of the list into a native array.
 @param dest the array to copy into.
 @param offset the offset where the first value should be copied
 @param len the number of values to copy.
 @return the array passed in.
 */
- (IOSIntArray *)toArrayWithIntArray:(IOSIntArray *)dest
                             withInt:(jint)offset
                             withInt:(jint)len;

/**
 @brief Copies a slice of the list into a native array.
 @param dest the array to copy into.
 @param source_pos the offset of the first value to copy
 @param dest_pos the offset where the first value should be copied
 @param len the number of values to copy.
 @return the array passed in.
 */
- (IOSIntArray *)toArrayWithIntArray:(IOSIntArray *)dest
                             withInt:(jint)source_pos
                             withInt:(jint)dest_pos
                             withInt:(jint)len;

/**
 @brief Applies the procedure to each value in the list in ascending (front to back) order.
 @param procedure a <code>TIntProcedure</code> value
 @return true if the procedure did not terminate prematurely.
 */
- (jboolean)forEachWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure;

/**
 @brief Applies the procedure to each value in the list in descending (back to front) order.
 @param procedure a <code>TIntProcedure</code> value
 @return true if the procedure did not terminate prematurely.
 */
- (jboolean)forEachDescendingWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)procedure;

/**
 @brief Sort the values in the list (ascending) using the Sun quicksort implementation.
 */
- (void)sort;

/**
 @brief Sort a slice of the list (ascending) using the Sun quicksort implementation.
 @param fromIndex the index at which to start sorting (inclusive)
 @param toIndex the index at which to stop sorting (exclusive)
 */
- (void)sortWithInt:(jint)fromIndex
            withInt:(jint)toIndex;

/**
 @brief Fills every slot in the list with the specified value.
 @param val the value to use when filling
 */
- (void)fillWithInt:(jint)val;

/**
 @brief Fills a range in the list with the specified value.
 @param fromIndex the offset at which to start filling (inclusive)
 @param toIndex the offset at which to stop filling (exclusive)
 @param val the value to use when filling
 */
- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
            withInt:(jint)val;

/**
 @brief Performs a binary search for <tt>value</tt> in the entire list.
 Note that you <b>must</b> @@{link #sort sort} the list before doing a search.
 @param value the value to search for
 @return the absolute offset in the list of the value, or its negative insertion point into the sorted list.
 */
- (jint)binarySearchWithInt:(jint)value;

/**
 @brief Performs a binary search for <tt>value</tt> in the specified range.
 Note that you <b>must</b> @@{link #sort sort} the list or the range before doing a search.
 @param value the value to search for
 @param fromIndex the lower boundary of the range (inclusive)
 @param toIndex the upper boundary of the range (exclusive)
 @return the absolute offset in the list of the value, or its negative insertion point into the sorted list.
 */
- (jint)binarySearchWithInt:(jint)value
                    withInt:(jint)fromIndex
                    withInt:(jint)toIndex;

/**
 @brief Searches the list front to back for the index of <tt>value</tt>.
 @param value an <code>int</code> value
 @return the first offset of the value, or -1 if it is not in the list.
 */
- (jint)indexOfWithInt:(jint)value;

/**
 @brief Searches the list front to back for the index of <tt>value</tt>, starting at <tt>offset</tt>.
 @param offset the offset at which to start the linear search (inclusive)
 @param value an <code>int</code> value
 @return the first offset of the value, or -1 if it is not in the list.
 */
- (jint)indexOfWithInt:(jint)offset
               withInt:(jint)value;

/**
 @brief Searches the list back to front for the last index of <tt>value</tt>.
 @param value an <code>int</code> value
 @return the last offset of the value, or -1 if it is not in the list.
 */
- (jint)lastIndexOfWithInt:(jint)value;

/**
 @brief Searches the list back to front for the last index of <tt>value</tt>, starting at <tt>offset</tt>.
 @param offset the offset at which to start the linear search (exclusive)
 @param value an <code>int</code> value
 @return the last offset of the value, or -1 if it is not in the list.
 */
- (jint)lastIndexOfWithInt:(jint)offset
                   withInt:(jint)value;

/**
 @brief Searches the list for <tt>value</tt>
 @param value an <code>int</code> value
 @return true if value is in the list.
 */
- (jboolean)containsWithInt:(jint)value;

/**
 @brief Searches the list for values satisfying <tt>condition</tt> in the manner of the *nix <tt>grep</tt> utility.
 @param condition a condition to apply to each element in the list
 @return a list of values which match the condition.
 */
- (id<GnuTroveListTIntList>)grepWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)condition;

/**
 @brief Searches the list for values which do <b>not</b> satisfy <tt>condition</tt>.
 This is akin to *nix <code>grep -v</code>.
 @param condition a condition to apply to each element in the list
 @return a list of values which do not match the condition.
 */
- (id<GnuTroveListTIntList>)inverseGrepWithGnuTroveProcedureTIntProcedure:(id<GnuTroveProcedureTIntProcedure>)condition;

/**
 @brief Finds the maximum value in the list.
 @return the largest value in the list.
 @exception IllegalStateException if the list is empty
 */
- (jint)max;

/**
 @brief Finds the minimum value in the list.
 @return the smallest value in the list.
 @exception IllegalStateException if the list is empty
 */
- (jint)min;

/**
 @brief Calculates the sum of all the values in the list.
 @return the sum of the values in the list (zero if the list is empty).
 */
- (jint)sum;

@end

J2OBJC_EMPTY_STATIC_INIT(GnuTroveListTIntList)

J2OBJC_TYPE_LITERAL_HEADER(GnuTroveListTIntList)

#endif // _GnuTroveListTIntList_H_
