//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/set/hash/TLongHashSet.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/TLongCollection.h"
#include "gnu/trove/impl/HashFunctions.h"
#include "gnu/trove/impl/hash/THash.h"
#include "gnu/trove/impl/hash/THashPrimitiveIterator.h"
#include "gnu/trove/impl/hash/TLongHash.h"
#include "gnu/trove/impl/hash/TPrimitiveHash.h"
#include "gnu/trove/iterator/TLongIterator.h"
#include "gnu/trove/set/TLongSet.h"
#include "gnu/trove/set/hash/TLongHashSet.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"

@interface GnuTroveSetHashTLongHashSet_TLongHashIterator () {
 @public
  /**
   @brief the collection on which the iterator operates
   */
  GnuTroveImplHashTLongHash *_hash_TLongHashIterator_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveSetHashTLongHashSet_TLongHashIterator, _hash_TLongHashIterator_, GnuTroveImplHashTLongHash *)

@implementation GnuTroveSetHashTLongHashSet

- (instancetype)init {
  return [super init];
}

- (instancetype)initGnuTroveSetHashTLongHashSetWithInt:(jint)initialCapacity {
  return [super initWithInt:initialCapacity];
}

- (instancetype)initWithInt:(jint)initialCapacity {
  return [self initGnuTroveSetHashTLongHashSetWithInt:initialCapacity];
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)load_factor {
  return [super initWithInt:initialCapacity withFloat:load_factor];
}

- (instancetype)initWithInt:(jint)initial_capacity
                  withFloat:(jfloat)load_factor
                   withLong:(jlong)no_entry_value {
  if (self = [super initWithInt:initial_capacity withFloat:load_factor withLong:no_entry_value]) {
    if (no_entry_value != (jlong) 0) {
      JavaUtilArrays_fillWithLongArray_withLong_(_set_, no_entry_value);
    }
  }
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (self = [self initGnuTroveSetHashTLongHashSetWithInt:JavaLangMath_maxWithInt_withInt_([((id<JavaUtilCollection>) nil_chk(collection)) size], GnuTroveImplHashTHash_DEFAULT_CAPACITY)]) {
    [self addAllWithJavaUtilCollection:collection];
  }
  return self;
}

- (instancetype)initWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self = [self initGnuTroveSetHashTLongHashSetWithInt:JavaLangMath_maxWithInt_withInt_([((id<GnuTroveTLongCollection>) nil_chk(collection)) size], GnuTroveImplHashTHash_DEFAULT_CAPACITY)]) {
    if ([collection isKindOfClass:[GnuTroveSetHashTLongHashSet class]]) {
      GnuTroveSetHashTLongHashSet *hashset = (GnuTroveSetHashTLongHashSet *) check_class_cast(collection, [GnuTroveSetHashTLongHashSet class]);
      self->_loadFactor_ = hashset->_loadFactor_;
      self->no_entry_value_ = hashset->no_entry_value_;
      if (self->no_entry_value_ != (jlong) 0) {
        JavaUtilArrays_fillWithLongArray_withLong_(_set_, self->no_entry_value_);
      }
      [self setUpWithInt:J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(GnuTroveImplHashTHash_DEFAULT_CAPACITY / _loadFactor_))];
    }
    [self addAllWithGnuTroveTLongCollection:collection];
  }
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)array {
  if (self = [self initGnuTroveSetHashTLongHashSetWithInt:JavaLangMath_maxWithInt_withInt_(((IOSLongArray *) nil_chk(array))->size_, GnuTroveImplHashTHash_DEFAULT_CAPACITY)]) {
    [self addAllWithLongArray:array];
  }
  return self;
}

- (id<GnuTroveIteratorTLongIterator>)iterator {
  return [[[GnuTroveSetHashTLongHashSet_TLongHashIterator alloc] initWithGnuTroveSetHashTLongHashSet:self withGnuTroveImplHashTLongHash:self] autorelease];
}

- (IOSLongArray *)toArray {
  IOSLongArray *result = [IOSLongArray arrayWithLength:[self size]];
  if (result->size_ == 0) {
    return result;
  }
  IOSLongArray *set = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSByteArray *) nil_chk(states))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(states, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSLongArray_GetRef(result, j++) = IOSLongArray_Get(nil_chk(set), i);
    }
  }
  return result;
}

- (IOSLongArray *)toArrayWithLongArray:(IOSLongArray *)dest {
  if (((IOSLongArray *) nil_chk(dest))->size_ == 0) {
    return dest;
  }
  IOSLongArray *set = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSByteArray *) nil_chk(states))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(states, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSLongArray_GetRef(dest, j++) = IOSLongArray_Get(nil_chk(set), i);
    }
  }
  if (dest->size_ > _size_) {
    *IOSLongArray_GetRef(dest, _size_) = no_entry_value_;
  }
  return dest;
}

- (jboolean)addWithLong:(jlong)val {
  jint index = [self insertKeyWithLong:val];
  if (index < 0) {
    return NO;
  }
  [self postInsertHookWithBoolean:consumeFreeSlot_];
  return YES;
}

- (jboolean)removeWithLong:(jlong)val {
  jint index = [self indexWithLong:val];
  if (index >= 0) {
    [self removeAtWithInt:index];
    return YES;
  }
  return NO;
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong c = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if (![self containsWithLong:c]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    jlong element = [iter next];
    if (![self containsWithLong:element]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithLongArray:(IOSLongArray *)array {
  for (jint i = ((IOSLongArray *) nil_chk(array))->size_; i-- > 0; ) {
    if (![self containsWithLong:IOSLongArray_Get(array, i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (JavaLangLong * __strong element in nil_chk(collection)) {
    jlong e = [((JavaLangLong *) nil_chk(element)) longLongValue];
    if ([self addWithLong:e]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)addAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  jboolean changed = NO;
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    jlong element = [iter next];
    if ([self addWithLong:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)addAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSLongArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self addWithLong:IOSLongArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangLong_valueOfWithLong_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTLongIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTLongCollection>) nil_chk(collection)) containsWithLong:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithLongArray_(array);
  IOSLongArray *set = _set_;
  IOSByteArray *states = _states_;
  _autoCompactTemporaryDisable_ = YES;
  for (jint i = ((IOSLongArray *) nil_chk(set))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (JavaUtilArrays_binarySearchWithLongArray_withLong_(array, IOSLongArray_Get(set, i)) < 0)) {
      [self removeAtWithInt:i];
      changed = YES;
    }
  }
  _autoCompactTemporaryDisable_ = NO;
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangLong class]]) {
      jlong c = [((JavaLangLong *) nil_chk(((JavaLangLong *) check_class_cast(element, [JavaLangLong class])))) longLongValue];
      if ([self removeWithLong:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTLongCollection:(id<GnuTroveTLongCollection>)collection {
  jboolean changed = NO;
  id<GnuTroveIteratorTLongIterator> iter = [((id<GnuTroveTLongCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTLongIterator>) nil_chk(iter)) hasNext]) {
    jlong element = [iter next];
    if ([self removeWithLong:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithLongArray:(IOSLongArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSLongArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithLong:IOSLongArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)clear {
  [super clear];
  IOSLongArray *set = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSLongArray *) nil_chk(set))->size_; i-- > 0; ) {
    *IOSLongArray_GetRef(set, i) = no_entry_value_;
    *IOSByteArray_GetRef(nil_chk(states), i) = GnuTroveImplHashTPrimitiveHash_FREE;
  }
}

- (void)rehashWithInt:(jint)newCapacity {
  jint oldCapacity = ((IOSLongArray *) nil_chk(_set_))->size_;
  IOSLongArray *oldSet = _set_;
  IOSByteArray *oldStates = _states_;
  GnuTroveImplHashTLongHash_setAndConsume__set_(self, [IOSLongArray newArrayWithLength:newCapacity]);
  GnuTroveImplHashTPrimitiveHash_setAndConsume__states_(self, [IOSByteArray newArrayWithLength:newCapacity]);
  for (jint i = oldCapacity; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(oldStates), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      jlong o = IOSLongArray_Get(oldSet, i);
      jint index = [self insertKeyWithLong:o];
    }
  }
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveSetTLongSet_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveSetTLongSet> that = (id<GnuTroveSetTLongSet>) check_protocol_cast(other, @protocol(GnuTroveSetTLongSet));
  if ([((id<GnuTroveSetTLongSet>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      if (![that containsWithLong:IOSLongArray_Get(nil_chk(_set_), i)]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithLong_(IOSLongArray_Get(nil_chk(_set_), i));
    }
  }
  return hashcode;
}

- (NSString *)description {
  JavaLangStringBuilder *buffy = [[[JavaLangStringBuilder alloc] initWithInt:_size_ * 2 + 2] autorelease];
  [buffy appendWithNSString:@"{"];
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_, j = 1; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      [buffy appendWithLong:IOSLongArray_Get(nil_chk(_set_), i)];
      if (j++ < _size_) {
        [buffy appendWithNSString:@","];
      }
    }
  }
  [buffy appendWithNSString:@"}"];
  return [buffy description];
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeByteWithInt:1];
  [super writeExternalWithJavaIoObjectOutput:outArg];
  [outArg writeIntWithInt:_size_];
  [outArg writeFloatWithFloat:_loadFactor_];
  [outArg writeLongWithLong:no_entry_value_];
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      [outArg writeLongWithLong:IOSLongArray_Get(nil_chk(_set_), i)];
    }
  }
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  jint version_ = [((id<JavaIoObjectInput>) nil_chk(inArg)) readByte];
  [super readExternalWithJavaIoObjectInput:inArg];
  jint size = [inArg readInt];
  if (version_ >= 1) {
    _loadFactor_ = [inArg readFloat];
    no_entry_value_ = [inArg readLong];
    if (no_entry_value_ != (jlong) 0) {
      JavaUtilArrays_fillWithLongArray_withLong_(_set_, no_entry_value_);
    }
  }
  [self setUpWithInt:size];
  while (size-- > 0) {
    jlong val = [inArg readLong];
    [self addWithLong:val];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TLongHashSet", NULL, 0x1, NULL },
    { "initWithInt:", "TLongHashSet", NULL, 0x1, NULL },
    { "initWithInt:withFloat:", "TLongHashSet", NULL, 0x1, NULL },
    { "initWithInt:withFloat:withLong:", "TLongHashSet", NULL, 0x1, NULL },
    { "initWithJavaUtilCollection:", "TLongHashSet", NULL, 0x1, NULL },
    { "initWithGnuTroveTLongCollection:", "TLongHashSet", NULL, 0x1, NULL },
    { "initWithLongArray:", "TLongHashSet", NULL, 0x1, NULL },
    { "iterator", NULL, "Lgnu.trove.iterator.TLongIterator;", 0x1, NULL },
    { "toArray", NULL, "[J", 0x1, NULL },
    { "toArrayWithLongArray:", "toArray", "[J", 0x1, NULL },
    { "addWithLong:", "add", "Z", 0x1, NULL },
    { "removeWithLong:", "remove", "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTLongCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithLongArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTLongCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithLongArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTLongCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithLongArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTLongCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithLongArray:", "removeAll", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "rehashWithInt:", "rehash", "V", 0x4, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;" },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, .constantValue.asLong = GnuTroveSetHashTLongHashSet_serialVersionUID },
  };
  static const J2ObjcClassInfo _GnuTroveSetHashTLongHashSet = { 1, "TLongHashSet", "gnu.trove.set.hash", NULL, 0x1, 31, methods, 1, fields, 0, NULL};
  return &_GnuTroveSetHashTLongHashSet;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveSetHashTLongHashSet)

@implementation GnuTroveSetHashTLongHashSet_TLongHashIterator

- (instancetype)initWithGnuTroveSetHashTLongHashSet:(GnuTroveSetHashTLongHashSet *)outer$
                      withGnuTroveImplHashTLongHash:(GnuTroveImplHashTLongHash *)hash_ {
  if (self = [super initWithGnuTroveImplHashTPrimitiveHash:hash_]) {
    GnuTroveSetHashTLongHashSet_TLongHashIterator_set__hash_TLongHashIterator_(self, hash_);
  }
  return self;
}

- (jlong)next {
  [self moveToNextIndex];
  return IOSLongArray_Get(nil_chk(((GnuTroveImplHashTLongHash *) nil_chk(_hash_TLongHashIterator_))->_set_), _index_);
}

- (void)dealloc {
  RELEASE_(_hash_TLongHashIterator_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveSetHashTLongHashSet_TLongHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveSetHashTLongHashSet_TLongHashIterator_set__hash_TLongHashIterator_(other, _hash_TLongHashIterator_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveSetHashTLongHashSet:withGnuTroveImplHashTLongHash:", "TLongHashIterator", NULL, 0x1, NULL },
    { "next", NULL, "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "_hash_TLongHashIterator_", "_hash", 0x12, "Lgnu.trove.impl.hash.TLongHash;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveSetHashTLongHashSet_TLongHashIterator = { 1, "TLongHashIterator", "gnu.trove.set.hash", "TLongHashSet", 0x0, 2, methods, 1, fields, 0, NULL};
  return &_GnuTroveSetHashTLongHashSet_TLongHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveSetHashTLongHashSet_TLongHashIterator)
