//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/trove/src/gnu/trove/set/hash/TIntHashSet.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "gnu/trove/TIntCollection.h"
#include "gnu/trove/impl/HashFunctions.h"
#include "gnu/trove/impl/hash/THash.h"
#include "gnu/trove/impl/hash/THashPrimitiveIterator.h"
#include "gnu/trove/impl/hash/TIntHash.h"
#include "gnu/trove/impl/hash/TPrimitiveHash.h"
#include "gnu/trove/iterator/TIntIterator.h"
#include "gnu/trove/set/TIntSet.h"
#include "gnu/trove/set/hash/TIntHashSet.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"

@interface GnuTroveSetHashTIntHashSet_TIntHashIterator () {
 @public
  /**
   @brief the collection on which the iterator operates
   */
  GnuTroveImplHashTIntHash *_hash_TIntHashIterator_;
}
@end

J2OBJC_FIELD_SETTER(GnuTroveSetHashTIntHashSet_TIntHashIterator, _hash_TIntHashIterator_, GnuTroveImplHashTIntHash *)

@implementation GnuTroveSetHashTIntHashSet

- (instancetype)init {
  return [super init];
}

- (instancetype)initGnuTroveSetHashTIntHashSetWithInt:(jint)initialCapacity {
  return [super initWithInt:initialCapacity];
}

- (instancetype)initWithInt:(jint)initialCapacity {
  return [self initGnuTroveSetHashTIntHashSetWithInt:initialCapacity];
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)load_factor {
  return [super initWithInt:initialCapacity withFloat:load_factor];
}

- (instancetype)initWithInt:(jint)initial_capacity
                  withFloat:(jfloat)load_factor
                    withInt:(jint)no_entry_value {
  if (self = [super initWithInt:initial_capacity withFloat:load_factor withInt:no_entry_value]) {
    if (no_entry_value != (jint) 0) {
      JavaUtilArrays_fillWithIntArray_withInt_(_set_, no_entry_value);
    }
  }
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (self = [self initGnuTroveSetHashTIntHashSetWithInt:JavaLangMath_maxWithInt_withInt_([((id<JavaUtilCollection>) nil_chk(collection)) size], GnuTroveImplHashTHash_DEFAULT_CAPACITY)]) {
    [self addAllWithJavaUtilCollection:collection];
  }
  return self;
}

- (instancetype)initWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (self = [self initGnuTroveSetHashTIntHashSetWithInt:JavaLangMath_maxWithInt_withInt_([((id<GnuTroveTIntCollection>) nil_chk(collection)) size], GnuTroveImplHashTHash_DEFAULT_CAPACITY)]) {
    if ([collection isKindOfClass:[GnuTroveSetHashTIntHashSet class]]) {
      GnuTroveSetHashTIntHashSet *hashset = (GnuTroveSetHashTIntHashSet *) check_class_cast(collection, [GnuTroveSetHashTIntHashSet class]);
      self->_loadFactor_ = hashset->_loadFactor_;
      self->no_entry_value_ = hashset->no_entry_value_;
      if (self->no_entry_value_ != (jint) 0) {
        JavaUtilArrays_fillWithIntArray_withInt_(_set_, self->no_entry_value_);
      }
      [self setUpWithInt:J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(GnuTroveImplHashTHash_DEFAULT_CAPACITY / _loadFactor_))];
    }
    [self addAllWithGnuTroveTIntCollection:collection];
  }
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)array {
  if (self = [self initGnuTroveSetHashTIntHashSetWithInt:JavaLangMath_maxWithInt_withInt_(((IOSIntArray *) nil_chk(array))->size_, GnuTroveImplHashTHash_DEFAULT_CAPACITY)]) {
    [self addAllWithIntArray:array];
  }
  return self;
}

- (id<GnuTroveIteratorTIntIterator>)iterator {
  return [[[GnuTroveSetHashTIntHashSet_TIntHashIterator alloc] initWithGnuTroveSetHashTIntHashSet:self withGnuTroveImplHashTIntHash:self] autorelease];
}

- (IOSIntArray *)toArray {
  IOSIntArray *result = [IOSIntArray arrayWithLength:[self size]];
  if (result->size_ == 0) {
    return result;
  }
  IOSIntArray *set = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSByteArray *) nil_chk(states))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(states, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(result, j++) = IOSIntArray_Get(nil_chk(set), i);
    }
  }
  return result;
}

- (IOSIntArray *)toArrayWithIntArray:(IOSIntArray *)dest {
  if (((IOSIntArray *) nil_chk(dest))->size_ == 0) {
    return dest;
  }
  IOSIntArray *set = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSByteArray *) nil_chk(states))->size_, j = 0; i-- > 0; ) {
    if (IOSByteArray_Get(states, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      *IOSIntArray_GetRef(dest, j++) = IOSIntArray_Get(nil_chk(set), i);
    }
  }
  if (dest->size_ > _size_) {
    *IOSIntArray_GetRef(dest, _size_) = no_entry_value_;
  }
  return dest;
}

- (jboolean)addWithInt:(jint)val {
  jint index = [self insertKeyWithInt:val];
  if (index < 0) {
    return NO;
  }
  [self postInsertHookWithBoolean:consumeFreeSlot_];
  return YES;
}

- (jboolean)removeWithInt:(jint)val {
  jint index = [self indexWithInt:val];
  if (index >= 0) {
    [self removeAtWithInt:index];
    return YES;
  }
  return NO;
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangInteger class]]) {
      jint c = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue];
      if (![self containsWithInt:c]) {
        return NO;
      }
    }
    else {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    jint element = [iter next];
    if (![self containsWithInt:element]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)containsAllWithIntArray:(IOSIntArray *)array {
  for (jint i = ((IOSIntArray *) nil_chk(array))->size_; i-- > 0; ) {
    if (![self containsWithInt:IOSIntArray_Get(array, i)]) {
      return NO;
    }
  }
  return YES;
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (JavaLangInteger * __strong element in nil_chk(collection)) {
    jint e = [((JavaLangInteger *) nil_chk(element)) intValue];
    if ([self addWithInt:e]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)addAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  jboolean changed = NO;
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    jint element = [iter next];
    if ([self addWithInt:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)addAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSIntArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self addWithInt:IOSIntArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:JavaLangInteger_valueOfWithInt_([iter next])]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  if (self == collection) {
    return NO;
  }
  jboolean modified = NO;
  id<GnuTroveIteratorTIntIterator> iter = [self iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    if (![((id<GnuTroveTIntCollection>) nil_chk(collection)) containsWithInt:[iter next]]) {
      [iter remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)retainAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  JavaUtilArrays_sortWithIntArray_(array);
  IOSIntArray *set = _set_;
  IOSByteArray *states = _states_;
  _autoCompactTemporaryDisable_ = YES;
  for (jint i = ((IOSIntArray *) nil_chk(set))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(states), i) == GnuTroveImplHashTPrimitiveHash_FULL && (JavaUtilArrays_binarySearchWithIntArray_withInt_(array, IOSIntArray_Get(set, i)) < 0)) {
      [self removeAtWithInt:i];
      changed = YES;
    }
  }
  _autoCompactTemporaryDisable_ = NO;
  return changed;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jboolean changed = NO;
  for (id __strong element in nil_chk(collection)) {
    if ([element isKindOfClass:[JavaLangInteger class]]) {
      jint c = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(element, [JavaLangInteger class])))) intValue];
      if ([self removeWithInt:c]) {
        changed = YES;
      }
    }
  }
  return changed;
}

- (jboolean)removeAllWithGnuTroveTIntCollection:(id<GnuTroveTIntCollection>)collection {
  jboolean changed = NO;
  id<GnuTroveIteratorTIntIterator> iter = [((id<GnuTroveTIntCollection>) nil_chk(collection)) iterator];
  while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
    jint element = [iter next];
    if ([self removeWithInt:element]) {
      changed = YES;
    }
  }
  return changed;
}

- (jboolean)removeAllWithIntArray:(IOSIntArray *)array {
  jboolean changed = NO;
  for (jint i = ((IOSIntArray *) nil_chk(array))->size_; i-- > 0; ) {
    if ([self removeWithInt:IOSIntArray_Get(array, i)]) {
      changed = YES;
    }
  }
  return changed;
}

- (void)clear {
  [super clear];
  IOSIntArray *set = _set_;
  IOSByteArray *states = _states_;
  for (jint i = ((IOSIntArray *) nil_chk(set))->size_; i-- > 0; ) {
    *IOSIntArray_GetRef(set, i) = no_entry_value_;
    *IOSByteArray_GetRef(nil_chk(states), i) = GnuTroveImplHashTPrimitiveHash_FREE;
  }
}

- (void)rehashWithInt:(jint)newCapacity {
  jint oldCapacity = ((IOSIntArray *) nil_chk(_set_))->size_;
  IOSIntArray *oldSet = _set_;
  IOSByteArray *oldStates = _states_;
  GnuTroveImplHashTIntHash_setAndConsume__set_(self, [IOSIntArray newArrayWithLength:newCapacity]);
  GnuTroveImplHashTPrimitiveHash_setAndConsume__states_(self, [IOSByteArray newArrayWithLength:newCapacity]);
  for (jint i = oldCapacity; i-- > 0; ) {
    if (IOSByteArray_Get(nil_chk(oldStates), i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      jint o = IOSIntArray_Get(oldSet, i);
      jint index = [self insertKeyWithInt:o];
    }
  }
}

- (jboolean)isEqual:(id)other {
  if (!([GnuTroveSetTIntSet_class_() isInstance:other])) {
    return NO;
  }
  id<GnuTroveSetTIntSet> that = (id<GnuTroveSetTIntSet>) check_protocol_cast(other, @protocol(GnuTroveSetTIntSet));
  if ([((id<GnuTroveSetTIntSet>) nil_chk(that)) size] != [self size]) {
    return NO;
  }
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      if (![that containsWithInt:IOSIntArray_Get(nil_chk(_set_), i)]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint hashcode = 0;
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      hashcode += GnuTroveImplHashFunctions_hash__WithInt_(IOSIntArray_Get(nil_chk(_set_), i));
    }
  }
  return hashcode;
}

- (NSString *)description {
  JavaLangStringBuilder *buffy = [[[JavaLangStringBuilder alloc] initWithInt:_size_ * 2 + 2] autorelease];
  [buffy appendWithNSString:@"{"];
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_, j = 1; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      [buffy appendWithInt:IOSIntArray_Get(nil_chk(_set_), i)];
      if (j++ < _size_) {
        [buffy appendWithNSString:@","];
      }
    }
  }
  [buffy appendWithNSString:@"}"];
  return [buffy description];
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeByteWithInt:1];
  [super writeExternalWithJavaIoObjectOutput:outArg];
  [outArg writeIntWithInt:_size_];
  [outArg writeFloatWithFloat:_loadFactor_];
  [outArg writeIntWithInt:no_entry_value_];
  for (jint i = ((IOSByteArray *) nil_chk(_states_))->size_; i-- > 0; ) {
    if (IOSByteArray_Get(_states_, i) == GnuTroveImplHashTPrimitiveHash_FULL) {
      [outArg writeIntWithInt:IOSIntArray_Get(nil_chk(_set_), i)];
    }
  }
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  jint version_ = [((id<JavaIoObjectInput>) nil_chk(inArg)) readByte];
  [super readExternalWithJavaIoObjectInput:inArg];
  jint size = [inArg readInt];
  if (version_ >= 1) {
    _loadFactor_ = [inArg readFloat];
    no_entry_value_ = [inArg readInt];
    if (no_entry_value_ != (jint) 0) {
      JavaUtilArrays_fillWithIntArray_withInt_(_set_, no_entry_value_);
    }
  }
  [self setUpWithInt:size];
  while (size-- > 0) {
    jint val = [inArg readInt];
    [self addWithInt:val];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TIntHashSet", NULL, 0x1, NULL },
    { "initWithInt:", "TIntHashSet", NULL, 0x1, NULL },
    { "initWithInt:withFloat:", "TIntHashSet", NULL, 0x1, NULL },
    { "initWithInt:withFloat:withInt:", "TIntHashSet", NULL, 0x1, NULL },
    { "initWithJavaUtilCollection:", "TIntHashSet", NULL, 0x1, NULL },
    { "initWithGnuTroveTIntCollection:", "TIntHashSet", NULL, 0x1, NULL },
    { "initWithIntArray:", "TIntHashSet", NULL, 0x1, NULL },
    { "iterator", NULL, "Lgnu.trove.iterator.TIntIterator;", 0x1, NULL },
    { "toArray", NULL, "[I", 0x1, NULL },
    { "toArrayWithIntArray:", "toArray", "[I", 0x1, NULL },
    { "addWithInt:", "add", "Z", 0x1, NULL },
    { "removeWithInt:", "remove", "Z", 0x1, NULL },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithGnuTroveTIntCollection:", "containsAll", "Z", 0x1, NULL },
    { "containsAllWithIntArray:", "containsAll", "Z", 0x1, NULL },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithGnuTroveTIntCollection:", "addAll", "Z", 0x1, NULL },
    { "addAllWithIntArray:", "addAll", "Z", 0x1, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithGnuTroveTIntCollection:", "retainAll", "Z", 0x1, NULL },
    { "retainAllWithIntArray:", "retainAll", "Z", 0x1, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithGnuTroveTIntCollection:", "removeAll", "Z", 0x1, NULL },
    { "removeAllWithIntArray:", "removeAll", "Z", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "rehashWithInt:", "rehash", "V", 0x4, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;" },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x18, "J", NULL, .constantValue.asLong = GnuTroveSetHashTIntHashSet_serialVersionUID },
  };
  static const J2ObjcClassInfo _GnuTroveSetHashTIntHashSet = { 1, "TIntHashSet", "gnu.trove.set.hash", NULL, 0x1, 31, methods, 1, fields, 0, NULL};
  return &_GnuTroveSetHashTIntHashSet;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveSetHashTIntHashSet)

@implementation GnuTroveSetHashTIntHashSet_TIntHashIterator

- (instancetype)initWithGnuTroveSetHashTIntHashSet:(GnuTroveSetHashTIntHashSet *)outer$
                      withGnuTroveImplHashTIntHash:(GnuTroveImplHashTIntHash *)hash_ {
  if (self = [super initWithGnuTroveImplHashTPrimitiveHash:hash_]) {
    GnuTroveSetHashTIntHashSet_TIntHashIterator_set__hash_TIntHashIterator_(self, hash_);
  }
  return self;
}

- (jint)next {
  [self moveToNextIndex];
  return IOSIntArray_Get(nil_chk(((GnuTroveImplHashTIntHash *) nil_chk(_hash_TIntHashIterator_))->_set_), _index_);
}

- (void)dealloc {
  RELEASE_(_hash_TIntHashIterator_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GnuTroveSetHashTIntHashSet_TIntHashIterator *)other {
  [super copyAllFieldsTo:other];
  GnuTroveSetHashTIntHashSet_TIntHashIterator_set__hash_TIntHashIterator_(other, _hash_TIntHashIterator_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveSetHashTIntHashSet:withGnuTroveImplHashTIntHash:", "TIntHashIterator", NULL, 0x1, NULL },
    { "next", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "_hash_TIntHashIterator_", "_hash", 0x12, "Lgnu.trove.impl.hash.TIntHash;", NULL,  },
  };
  static const J2ObjcClassInfo _GnuTroveSetHashTIntHashSet_TIntHashIterator = { 1, "TIntHashIterator", "gnu.trove.set.hash", "TIntHashSet", 0x0, 2, methods, 1, fields, 0, NULL};
  return &_GnuTroveSetHashTIntHashSet_TIntHashIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GnuTroveSetHashTIntHashSet_TIntHashIterator)
