//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: dependencies/fake_slf4j/src/org/slf4j/LoggerFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/Date.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@implementation OrgSlf4jLoggerFactory

+ (id<OrgSlf4jLogger>)getLoggerWithIOSClass:(IOSClass *)cl {
  return OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(cl);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getLoggerWithIOSClass:", "getLogger", "Lorg.slf4j.Logger;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _OrgSlf4jLoggerFactory = { 1, "LoggerFactory", "org.slf4j", NULL, 0x1, 2, methods, 0, NULL, 0, NULL};
  return &_OrgSlf4jLoggerFactory;
}

@end

id<OrgSlf4jLogger> OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(IOSClass *cl) {
  OrgSlf4jLoggerFactory_init();
  NSString *name = [((IOSClass *) nil_chk(cl)) getSimpleName];
  return [[[OrgSlf4jLoggerFactory_$1 alloc] init] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jLoggerFactory)

@implementation OrgSlf4jLoggerFactory_$1

- (void)infoWithNSString:(NSString *)str {
  [self logWithNSString:@"INFO" withNSString:str withJavaLangThrowable:nil];
}

- (void)warnWithNSString:(NSString *)str
   withJavaLangThrowable:(JavaLangThrowable *)t {
  [self logWithNSString:@"WARN" withNSString:str withJavaLangThrowable:t];
}

- (void)warnWithNSString:(NSString *)str {
  [self logWithNSString:@"WARN" withNSString:str withJavaLangThrowable:nil];
}

- (void)errorWithNSString:(NSString *)str
    withJavaLangThrowable:(JavaLangThrowable *)t {
  [self logWithNSString:@"ERROR" withNSString:str withJavaLangThrowable:t];
}

- (void)errorWithNSString:(NSString *)str {
  [self logWithNSString:@"ERROR" withNSString:str withJavaLangThrowable:nil];
}

- (void)logWithNSString:(NSString *)type
           withNSString:(NSString *)message
  withJavaLangThrowable:(JavaLangThrowable *)t {
  if (t == nil) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$C$C$", [((JavaUtilDate *) [[[JavaUtilDate alloc] init] autorelease]) description], ' ', type, ' ', message)];
  else [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$C$C$C$", [((JavaUtilDate *) [[[JavaUtilDate alloc] init] autorelease]) description], ' ', type, ' ', message, ' ', [t description])];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "infoWithNSString:", "info", "V", 0x1, NULL },
    { "warnWithNSString:withJavaLangThrowable:", "warn", "V", 0x1, NULL },
    { "warnWithNSString:", "warn", "V", 0x1, NULL },
    { "errorWithNSString:withJavaLangThrowable:", "error", "V", 0x1, NULL },
    { "errorWithNSString:", "error", "V", 0x1, NULL },
    { "logWithNSString:withNSString:withJavaLangThrowable:", "log", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _OrgSlf4jLoggerFactory_$1 = { 1, "$1", "org.slf4j", "LoggerFactory", 0x8000, 7, methods, 0, NULL, 0, NULL};
  return &_OrgSlf4jLoggerFactory_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jLoggerFactory_$1)
