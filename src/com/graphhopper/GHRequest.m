//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/GHRequest.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/GHRequest.h"
#include "com/graphhopper/routing/util/HintsMap.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/shapes/GHPoint.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

__attribute__((unused)) static void GHRequest_validateAzimuthValueWithDouble_(GHRequest *self, jdouble heading);

@interface GHRequest () {
 @public
  id<JavaUtilList> points_;
  HintsMap *hints_;
  id<JavaUtilList> favoredHeadings_;
  NSString *algo_;
  jboolean possibleToAdd_;
  JavaUtilLocale *locale_;
}

- (void)validateAzimuthValueWithDouble:(jdouble)heading;
@end

J2OBJC_FIELD_SETTER(GHRequest, points_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GHRequest, hints_, HintsMap *)
J2OBJC_FIELD_SETTER(GHRequest, favoredHeadings_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GHRequest, algo_, NSString *)
J2OBJC_FIELD_SETTER(GHRequest, locale_, JavaUtilLocale *)

@implementation GHRequest

- (instancetype)init {
  return [self initGHRequestWithInt:5];
}

- (instancetype)initGHRequestWithInt:(jint)size {
  if (self = [super init]) {
    GHRequest_setAndConsume_hints_(self, [[HintsMap alloc] init]);
    GHRequest_set_algo_(self, @"");
    possibleToAdd_ = NO;
    GHRequest_set_locale_(self, JavaUtilLocale_get_US_());
    GHRequest_setAndConsume_points_(self, [[JavaUtilArrayList alloc] initWithInt:size]);
    GHRequest_setAndConsume_favoredHeadings_(self, [[JavaUtilArrayList alloc] initWithInt:size]);
    possibleToAdd_ = YES;
  }
  return self;
}

- (instancetype)initWithInt:(jint)size {
  return [self initGHRequestWithInt:size];
}

- (instancetype)initWithDouble:(jdouble)fromLat
                    withDouble:(jdouble)fromLon
                    withDouble:(jdouble)toLat
                    withDouble:(jdouble)toLon
                    withDouble:(jdouble)startHeading
                    withDouble:(jdouble)endHeading {
  return [self initGHRequestWithGHPoint:[[[GHPoint alloc] initWithDouble:fromLat withDouble:fromLon] autorelease] withGHPoint:[[[GHPoint alloc] initWithDouble:toLat withDouble:toLon] autorelease] withDouble:startHeading withDouble:endHeading];
}

- (instancetype)initWithDouble:(jdouble)fromLat
                    withDouble:(jdouble)fromLon
                    withDouble:(jdouble)toLat
                    withDouble:(jdouble)toLon {
  return [self initGHRequestWithGHPoint:[[[GHPoint alloc] initWithDouble:fromLat withDouble:fromLon] autorelease] withGHPoint:[[[GHPoint alloc] initWithDouble:toLat withDouble:toLon] autorelease]];
}

- (instancetype)initGHRequestWithGHPoint:(GHPoint *)startPlace
                             withGHPoint:(GHPoint *)endPlace
                              withDouble:(jdouble)startHeading
                              withDouble:(jdouble)endHeading {
  if (self = [super init]) {
    GHRequest_setAndConsume_hints_(self, [[HintsMap alloc] init]);
    GHRequest_set_algo_(self, @"");
    possibleToAdd_ = NO;
    GHRequest_set_locale_(self, JavaUtilLocale_get_US_());
    if (startPlace == nil) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"'from' cannot be null"] autorelease];
    if (endPlace == nil) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"'to' cannot be null"] autorelease];
    GHRequest_setAndConsume_points_(self, [[JavaUtilArrayList alloc] initWithInt:2]);
    [points_ addWithId:startPlace];
    [points_ addWithId:endPlace];
    GHRequest_setAndConsume_favoredHeadings_(self, [[JavaUtilArrayList alloc] initWithInt:2]);
    GHRequest_validateAzimuthValueWithDouble_(self, startHeading);
    [favoredHeadings_ addWithId:JavaLangDouble_valueOfWithDouble_(startHeading)];
    GHRequest_validateAzimuthValueWithDouble_(self, endHeading);
    [favoredHeadings_ addWithId:JavaLangDouble_valueOfWithDouble_(endHeading)];
  }
  return self;
}

- (instancetype)initWithGHPoint:(GHPoint *)startPlace
                    withGHPoint:(GHPoint *)endPlace
                     withDouble:(jdouble)startHeading
                     withDouble:(jdouble)endHeading {
  return [self initGHRequestWithGHPoint:startPlace withGHPoint:endPlace withDouble:startHeading withDouble:endHeading];
}

- (instancetype)initGHRequestWithGHPoint:(GHPoint *)startPlace
                             withGHPoint:(GHPoint *)endPlace {
  return [self initGHRequestWithGHPoint:startPlace withGHPoint:endPlace withDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN];
}

- (instancetype)initWithGHPoint:(GHPoint *)startPlace
                    withGHPoint:(GHPoint *)endPlace {
  return [self initGHRequestWithGHPoint:startPlace withGHPoint:endPlace];
}

- (instancetype)initGHRequestWithJavaUtilList:(id<JavaUtilList>)points
                             withJavaUtilList:(id<JavaUtilList>)favoredHeadings {
  if (self = [super init]) {
    GHRequest_setAndConsume_hints_(self, [[HintsMap alloc] init]);
    GHRequest_set_algo_(self, @"");
    possibleToAdd_ = NO;
    GHRequest_set_locale_(self, JavaUtilLocale_get_US_());
    if ([((id<JavaUtilList>) nil_chk(points)) size] != [((id<JavaUtilList>) nil_chk(favoredHeadings)) size]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I$IC", @"Size of headings (", [favoredHeadings size], @") must match size of points (", [points size], ')')] autorelease];
    for (JavaLangDouble * __strong heading in favoredHeadings) {
      GHRequest_validateAzimuthValueWithDouble_(self, [((JavaLangDouble *) nil_chk(heading)) doubleValue]);
    }
    GHRequest_set_points_(self, points);
    GHRequest_set_favoredHeadings_(self, favoredHeadings);
  }
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)points
                    withJavaUtilList:(id<JavaUtilList>)favoredHeadings {
  return [self initGHRequestWithJavaUtilList:points withJavaUtilList:favoredHeadings];
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)points {
  return [self initGHRequestWithJavaUtilList:points withJavaUtilList:JavaUtilCollections_nCopiesWithInt_withId_([((id<JavaUtilList>) nil_chk(points)) size], JavaLangDouble_valueOfWithDouble_(JavaLangDouble_NaN))];
}

- (GHRequest *)addPointWithGHPoint:(GHPoint *)point
                        withDouble:(jdouble)favoredHeading {
  if (point == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"point cannot be null"] autorelease];
  if (!possibleToAdd_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Please call empty constructor if you intent to use more than two places via addPoint method."] autorelease];
  [((id<JavaUtilList>) nil_chk(points_)) addWithId:point];
  GHRequest_validateAzimuthValueWithDouble_(self, favoredHeading);
  [((id<JavaUtilList>) nil_chk(favoredHeadings_)) addWithId:JavaLangDouble_valueOfWithDouble_(favoredHeading)];
  return self;
}

- (GHRequest *)addPointWithGHPoint:(GHPoint *)point {
  [self addPointWithGHPoint:point withDouble:JavaLangDouble_NaN];
  return self;
}

- (jdouble)getFavoredHeadingWithInt:(jint)i {
  return [((JavaLangDouble *) nil_chk([((id<JavaUtilList>) nil_chk(favoredHeadings_)) getWithInt:i])) doubleValue];
}

- (jboolean)hasFavoredHeadingWithInt:(jint)i {
  if (i >= [((id<JavaUtilList>) nil_chk(favoredHeadings_)) size]) return NO;
  return !JavaLangDouble_isNaNWithDouble_([((JavaLangDouble *) nil_chk([favoredHeadings_ getWithInt:i])) doubleValue]);
}

- (void)validateAzimuthValueWithDouble:(jdouble)heading {
  GHRequest_validateAzimuthValueWithDouble_(self, heading);
}

- (id<JavaUtilList>)getPoints {
  return points_;
}

- (NSString *)getAlgorithm {
  return algo_;
}

- (GHRequest *)setAlgorithmWithNSString:(NSString *)algo {
  if (algo != nil) GHRequest_set_algo_(self, Helper_camelCaseToUnderScoreWithNSString_(algo));
  return self;
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (GHRequest *)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale != nil) GHRequest_set_locale_(self, locale);
  return self;
}

- (GHRequest *)setLocaleWithNSString:(NSString *)localeStr {
  return [self setLocaleWithJavaUtilLocale:Helper_getLocaleWithNSString_(localeStr)];
}

- (NSString *)getWeighting {
  return [((HintsMap *) nil_chk(hints_)) getWeighting];
}

- (GHRequest *)setWeightingWithNSString:(NSString *)w {
  [((HintsMap *) nil_chk(hints_)) setWeightingWithNSString:w];
  return self;
}

- (NSString *)getVehicle {
  return [((HintsMap *) nil_chk(hints_)) getVehicle];
}

- (GHRequest *)setVehicleWithNSString:(NSString *)vehicle {
  [((HintsMap *) nil_chk(hints_)) setVehicleWithNSString:vehicle];
  return self;
}

- (NSString *)description {
  NSString *res = @"";
  for (GHPoint * __strong point in nil_chk(points_)) {
    if ([res isEmpty]) {
      res = [((GHPoint *) nil_chk(point)) description];
    }
    else {
      res = JreStrcat("$$", res, JreStrcat("$$", @"; ", [((GHPoint *) nil_chk(point)) description]));
    }
  }
  return JreStrcat("$C$C", res, '(', algo_, ')');
}

- (HintsMap *)getHints {
  return hints_;
}

- (void)dealloc {
  RELEASE_(points_);
  RELEASE_(hints_);
  RELEASE_(favoredHeadings_);
  RELEASE_(algo_);
  RELEASE_(locale_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GHRequest *)other {
  [super copyAllFieldsTo:other];
  GHRequest_set_points_(other, points_);
  GHRequest_set_hints_(other, hints_);
  GHRequest_set_favoredHeadings_(other, favoredHeadings_);
  GHRequest_set_algo_(other, algo_);
  other->possibleToAdd_ = possibleToAdd_;
  GHRequest_set_locale_(other, locale_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GHRequest", NULL, 0x1, NULL },
    { "initWithInt:", "GHRequest", NULL, 0x1, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "GHRequest", NULL, 0x1, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:", "GHRequest", NULL, 0x1, NULL },
    { "initWithGHPoint:withGHPoint:withDouble:withDouble:", "GHRequest", NULL, 0x1, NULL },
    { "initWithGHPoint:withGHPoint:", "GHRequest", NULL, 0x1, NULL },
    { "initWithJavaUtilList:withJavaUtilList:", "GHRequest", NULL, 0x1, NULL },
    { "initWithJavaUtilList:", "GHRequest", NULL, 0x1, NULL },
    { "addPointWithGHPoint:withDouble:", "addPoint", "Lcom.graphhopper.GHRequest;", 0x1, NULL },
    { "addPointWithGHPoint:", "addPoint", "Lcom.graphhopper.GHRequest;", 0x1, NULL },
    { "getFavoredHeadingWithInt:", "getFavoredHeading", "D", 0x1, NULL },
    { "hasFavoredHeadingWithInt:", "hasFavoredHeading", "Z", 0x1, NULL },
    { "validateAzimuthValueWithDouble:", "validateAzimuthValue", "V", 0x2, NULL },
    { "getPoints", NULL, "Ljava.util.List;", 0x1, NULL },
    { "getAlgorithm", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setAlgorithmWithNSString:", "setAlgorithm", "Lcom.graphhopper.GHRequest;", 0x1, NULL },
    { "getLocale", NULL, "Ljava.util.Locale;", 0x1, NULL },
    { "setLocaleWithJavaUtilLocale:", "setLocale", "Lcom.graphhopper.GHRequest;", 0x1, NULL },
    { "setLocaleWithNSString:", "setLocale", "Lcom.graphhopper.GHRequest;", 0x1, NULL },
    { "getWeighting", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setWeightingWithNSString:", "setWeighting", "Lcom.graphhopper.GHRequest;", 0x1, NULL },
    { "getVehicle", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setVehicleWithNSString:", "setVehicle", "Lcom.graphhopper.GHRequest;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getHints", NULL, "Lcom.graphhopper.routing.util.HintsMap;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "points_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "hints_", NULL, 0x12, "Lcom.graphhopper.routing.util.HintsMap;", NULL,  },
    { "favoredHeadings_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "algo_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "possibleToAdd_", NULL, 0x2, "Z", NULL,  },
    { "locale_", NULL, 0x2, "Ljava.util.Locale;", NULL,  },
  };
  static const J2ObjcClassInfo _GHRequest = { 1, "GHRequest", "com.graphhopper", NULL, 0x1, 25, methods, 6, fields, 0, NULL};
  return &_GHRequest;
}

@end

void GHRequest_validateAzimuthValueWithDouble_(GHRequest *self, jdouble heading) {
  if (!JavaLangDouble_isNaNWithDouble_(heading) && (JavaLangDouble_compareWithDouble_withDouble_(heading, 360) > 0 || JavaLangDouble_compareWithDouble_withDouble_(heading, 0) < 0)) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$D$", @"Heading ", heading, @" must be in range (0,360) or NaN")] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHRequest)
