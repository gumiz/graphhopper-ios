//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/GraphHopper.java
//

#ifndef _GraphHopper_H_
#define _GraphHopper_H_

@class CHAlgoFactoryDecorator;
@class CmdArgs;
@class DAType;
@class EncodingManager;
@class GHRequest;
@class GHResponse;
@class GraphHopperStorage;
@class HintsMap;
@class IOSObjectArray;
@class TranslationMap;
@class TraversalModeEnum;
@protocol ComGraphhopperReaderDemElevationProvider;
@protocol ComGraphhopperRoutingWeightingWeighting;
@protocol DataReader;
@protocol Directory;
@protocol FlagEncoder;
@protocol FlagEncoderFactory;
@protocol Graph;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol LocationIndex;
@protocol LockFactory;
@protocol OrgSlf4jLogger;
@protocol RoutingAlgorithmFactory;
@protocol RoutingAlgorithmFactoryDecorator;

#include "J2ObjC_header.h"
#include "com/graphhopper/GraphHopperAPI.h"

/**
 @brief Easy to use access point to configure import and (offline) routing.
 @author Peter Karich
 */
@interface GraphHopper : NSObject < GraphHopperAPI > {
 @public
  jboolean removeZipped_;
  jboolean enableInstructions_;
}

- (instancetype)init;

/**
 @brief For testing only
 */
- (GraphHopper *)loadGraphWithGraphHopperStorage:(GraphHopperStorage *)g;

/**
 @return the first flag encoder of the encoding manager
 */
- (id<FlagEncoder>)getDefaultVehicle;

- (EncodingManager *)getEncodingManager;

/**
 @brief Specify which vehicles can be read by this GraphHopper instance.
 An encoding manager defines how data from every vehicle is written (und read) into edges of the graph.
 */
- (GraphHopper *)setEncodingManagerWithEncodingManager:(EncodingManager *)em;

- (id<ComGraphhopperReaderDemElevationProvider>)getElevationProvider;

- (GraphHopper *)setElevationProviderWithComGraphhopperReaderDemElevationProvider:(id<ComGraphhopperReaderDemElevationProvider>)eleProvider;

/**
 @brief Threads for data reading.
 */
- (jint)getWorkerThreads;

/**
 @brief Return maximum distance (in meter) to reduce points via douglas peucker while OSM import.
 */
- (jdouble)getWayPointMaxDistance;

/**
 @brief This parameter specifies how to reduce points via douglas peucker while OSM import.
 Higher value means more details, unit is meter. Default is 1. Disable via 0.
 */
- (GraphHopper *)setWayPointMaxDistanceWithDouble:(jdouble)wayPointMaxDistance;

- (TraversalModeEnum *)getTraversalMode;

/**
 @brief Sets the default traversal mode used for the algorithms and preparation.
 */
- (GraphHopper *)setTraversalModeWithTraversalModeEnum:(TraversalModeEnum *)traversalMode;

/**
 @brief Configures the underlying storage and response to be used on a well equipped server.
 Result also optimized for usage in the web module i.e. try reduce network IO.
 */
- (GraphHopper *)forServer;

/**
 @brief Configures the underlying storage to be used on a Desktop computer or within another Java application with enough RAM but no network latency.
 */
- (GraphHopper *)forDesktop;

/**
 @brief Configures the underlying storage to be used on a less powerful machine like Android or Raspberry Pi with only few MB of RAM.
 */
- (GraphHopper *)forMobile;

/**
 @brief Precise location resolution index means also more space (disc/RAM) could be consumed and probably slower query times, which would be e.g. not suitable for Android.
 The resolution specifies the tile width (in meter).
 */
- (GraphHopper *)setPreciseIndexResolutionWithInt:(jint)precision;

- (GraphHopper *)setMinNetworkSizeWithInt:(jint)minNetworkSize
                                  withInt:(jint)minOneWayNetworkSize;

/**
 @brief This method call results in an in-memory graph.
 */
- (GraphHopper *)setInMemory;

/**
 @brief Only valid option for in-memory graph and if you e.g. want to disable store on flush for unit tests.
 Specify storeOnFlush to true if you want that existing data will be loaded FROM disc and all in-memory data will be flushed TO disc after flush is called e.g. while OSM import.
 @param storeOnFlush true by default
 */
- (GraphHopper *)setStoreOnFlushWithBoolean:(jboolean)storeOnFlush;

/**
 @brief Enable memory mapped configuration if not enough memory is available on the target platform.
 */
- (GraphHopper *)setMemoryMapped;

/**
 @brief Wrapper method for GraphHopper#setCHWeightings(List)
 */
- (GraphHopper *)setCHWeightingWithNSString:(NSString *)weightingName;

/**
 @brief Wrapper method for GraphHopper#setCHWeightings(List)
 */
- (GraphHopper *)setCHWeightingsWithNSStringArray:(IOSObjectArray *)weightingNames;

/**
 @brief Returns all CHWeighting names
 */
- (id<JavaUtilList>)getCHWeightings;

/**
 @brief Enables the use of contraction hierarchies to reduce query times.
 Enabled by default.
 @param weightingList A list containing multiple weightings like: "fastest", "shortest" or your own weight-calculation type.
 */
- (GraphHopper *)setCHWeightingsWithJavaUtilList:(id<JavaUtilList>)weightingList;

/**
 */
- (jint)getCHPrepareThreads;

/**
 @brief This method changes the number of threads used for preparation on import.
 Default is 1. Make sure that you have enough memory to increase this number!
 */
- (GraphHopper *)setCHPrepareThreadsWithInt:(jint)prepareThreads;

/**
 */
- (GraphHopper *)setCHEnableWithBoolean:(jboolean)enable;

- (jboolean)isCHEnabled;

/**
 @brief Enables or disables contraction hierarchies (CH).
 This speed-up mode is enabled by default.
 */
- (GraphHopper *)setCHEnabledWithBoolean:(jboolean)enable;

- (jint)getMaxVisitedNodes;

/**
 @brief This methods stops the algorithm from searching further if the resulting path would go over the specified node count, important if none-CH routing is used.
 */
- (void)setMaxVisitedNodesWithInt:(jint)maxVisitedNodes;

/**
 @return true if storing and fetching elevation data is enabled. Default is false
 */
- (jboolean)hasElevation;

/**
 @brief Enable storing and fetching elevation data.
 Default is false
 */
- (GraphHopper *)setElevationWithBoolean:(jboolean)includeElevation;

- (jboolean)isEnableInstructions;

/**
 @brief This method specifies if the import should include way names to be able to return instructions for a route.
 */
- (GraphHopper *)setEnableInstructionsWithBoolean:(jboolean)b;

- (NSString *)getPreferredLanguage;

/**
 @brief This method specifies the preferred language for way names during import.
 <p> Language code as defined in ISO 639-1 or ISO 639-2. <ul> <li>If no preferred language is specified, only the default language with no tag will be imported.</li> <li>If a language is specified, it will be imported if its tag is found, otherwise fall back to default language.</li> </ul>
 */
- (GraphHopper *)setPreferredLanguageWithNSString:(NSString *)preferredLanguage;

/**
 @brief This methods enables gps point calculation.
 If disabled only distance will be calculated.
 */
- (GraphHopper *)setEnableCalcPointsWithBoolean:(jboolean)b;

- (NSString *)getGraphHopperLocation;

/**
 @brief Sets the graphhopper folder.
 */
- (GraphHopper *)setGraphHopperLocationWithNSString:(NSString *)ghLocation;

- (NSString *)getDataReaderFile;

/**
 @brief This file can be any file type supported by the DataReader.
 E.g. for the OSMReader it is the OSM xml (.osm), a compressed xml (.osm.zip or .osm.gz) or a protobuf file (.pbf)
 */
- (GraphHopper *)setDataReaderFileWithNSString:(NSString *)dataReaderFileStr;

/**
 @brief The underlying graph used in algorithms.
 @throws IllegalStateException if graph is not instantiated.
 */
- (GraphHopperStorage *)getGraphHopperStorage;

- (void)setGraphHopperStorageWithGraphHopperStorage:(GraphHopperStorage *)ghStorage;

/**
 @brief The location index created from the graph.
 @throws IllegalStateException if index is not initialized
 */
- (id<LocationIndex>)getLocationIndex;

- (void)setLocationIndexWithLocationIndex:(id<LocationIndex>)locationIndex;

/**
 @brief Sorts the graph which requires more RAM while import.
 See #12
 */
- (GraphHopper *)setSortGraphWithBoolean:(jboolean)sortGraph;

- (jboolean)isAllowWrites;

/**
 @brief Specifies if it is allowed for GraphHopper to write.
 E.g. for read only filesystems it is not possible to create a lock file and so we can avoid write locks.
 */
- (GraphHopper *)setAllowWritesWithBoolean:(jboolean)allowWrites;

- (TranslationMap *)getTranslationMap;

- (GraphHopper *)setFlagEncoderFactoryWithFlagEncoderFactory:(id<FlagEncoderFactory>)factory;

/**
 @brief Reads configuration from a CmdArgs object.
 Which can be manually filled, or via main(String[] args) ala CmdArgs.read(args) or via configuration file ala CmdArgs.readFromConfig("config.properties", "graphhopper.config")
 */
- (GraphHopper *)init__WithCmdArgs:(CmdArgs *)args OBJC_METHOD_FAMILY_NONE;

/**
 @brief Imports provided data from disc and creates graph.
 Depending on the settings the resulting graph will be stored to disc so on a second call this method will only load the graph from disc which is usually a lot faster.
 */
- (GraphHopper *)importOrLoad;

- (id<DataReader>)importData;

- (id<DataReader>)createReaderWithGraphHopperStorage:(GraphHopperStorage *)ghStorage;

- (id<DataReader>)initDataReaderWithDataReader:(id<DataReader>)reader OBJC_METHOD_FAMILY_NONE;

/**
 @brief Opens existing graph.
 @param graphHopperFolder is the folder containing graphhopper files. Can be a compressed file too ala folder-content.ghz.
 */
- (jboolean)load__WithNSString:(NSString *)graphHopperFolder;

- (id<RoutingAlgorithmFactory>)getAlgorithmFactoryWithHintsMap:(HintsMap *)map;

- (GraphHopper *)addAlgorithmFactoryDecoratorWithRoutingAlgorithmFactoryDecorator:(id<RoutingAlgorithmFactoryDecorator>)algoFactoryDecorator;

- (CHAlgoFactoryDecorator *)getCHFactoryDecorator;

/**
 @brief This method creates prepations.
 */
- (void)createCHPreparations;

/**
 @brief Does the preparation and creates the location index
 */
- (void)postProcessing;

/**
 @brief Based on the hintsMap and the specified encoder a Weighting instance can be created.
 Note that all URL parameters are available in the hintsMap as String if you use the web module.
 @param hintsMap all parameters influencing the weighting. E.g. parameters coming via GHRequest.getHints or directly via "&amp;api.xy=" from the URL of the web UI
 @param encoder the required vehicle
 @return the weighting to be used for route calculation
 */
- (id<ComGraphhopperRoutingWeightingWeighting>)createWeightingWithHintsMap:(HintsMap *)hintsMap
                                                           withFlagEncoder:(id<FlagEncoder>)encoder;

/**
 @brief Potentially wraps the specified weighting into a TurnWeighting instance.
 */
- (id<ComGraphhopperRoutingWeightingWeighting>)createTurnWeightingWithGraph:(id<Graph>)graph
                                withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
                                                      withTraversalModeEnum:(TraversalModeEnum *)tMode;

- (GHResponse *)routeWithGHRequest:(GHRequest *)request;

- (id<JavaUtilList>)calcPathsWithGHRequest:(GHRequest *)request
                            withGHResponse:(GHResponse *)ghRsp;

- (id<LocationIndex>)createLocationIndexWithDirectory:(id<Directory>)dir;

/**
 @brief Initializes the location index after the import is done.
 */
- (void)initLocationIndex OBJC_METHOD_FAMILY_NONE;

- (void)prepare;

/**
 @brief Internal method to clean up the graph.
 */
- (void)cleanUp;

- (void)flush;

/**
 @brief Releases all associated resources like memory or files.
 But it does not remove them. To remove the files created in graphhopperLocation you have to call clean().
 */
- (void)close;

/**
 @brief Removes the on-disc routing files.
 Call only after calling close or before importOrLoad or load
 */
- (void)clean;

- (void)ensureNotLoaded;

- (void)ensureWriteAccess;

@end

J2OBJC_EMPTY_STATIC_INIT(GraphHopper)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

typedef GraphHopper ComGraphhopperGraphHopper;

J2OBJC_TYPE_LITERAL_HEADER(GraphHopper)

#endif // _GraphHopper_H_
