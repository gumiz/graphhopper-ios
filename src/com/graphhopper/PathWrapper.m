//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/PathWrapper.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/PathWrapper.h"
#include "com/graphhopper/util/InstructionList.h"
#include "com/graphhopper/util/PointList.h"
#include "com/graphhopper/util/shapes/BBox.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

__attribute__((unused)) static void PathWrapper_checkWithNSString_(PathWrapper *self, NSString *method);

@interface PathWrapper () {
 @public
  id<JavaUtilList> errors_;
  id<JavaUtilList> description__;
  jdouble distance_;
  jdouble ascend_;
  jdouble descend_;
  jdouble routeWeight_;
  jlong time_;
  NSString *debugInfo_;
  InstructionList *instructions_;
  PointList *waypointList_;
  PointList *pointList_;
}

- (void)checkWithNSString:(NSString *)method;
@end

J2OBJC_FIELD_SETTER(PathWrapper, errors_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(PathWrapper, description__, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(PathWrapper, debugInfo_, NSString *)
J2OBJC_FIELD_SETTER(PathWrapper, instructions_, InstructionList *)
J2OBJC_FIELD_SETTER(PathWrapper, waypointList_, PointList *)
J2OBJC_FIELD_SETTER(PathWrapper, pointList_, PointList *)

@implementation PathWrapper

- (id<JavaUtilList>)getDescription {
  if (description__ == nil) return JavaUtilCollections_emptyList();
  return description__;
}

- (PathWrapper *)setDescriptionWithJavaUtilList:(id<JavaUtilList>)names {
  PathWrapper_set_description__(self, names);
  return self;
}

- (PathWrapper *)addDebugInfoWithNSString:(NSString *)debugInfo {
  if (debugInfo == nil) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Debug information has to be none null"] autorelease];
  if (![((NSString *) nil_chk(self->debugInfo_)) isEmpty]) PathWrapper_set_debugInfo_(self, JreStrcat("$C", self->debugInfo_, ';'));
  PathWrapper_set_debugInfo_(self, JreStrcat("$$", self->debugInfo_, debugInfo));
  return self;
}

- (NSString *)getDebugInfo {
  return debugInfo_;
}

- (PointList *)getPoints {
  PathWrapper_checkWithNSString_(self, @"getPoints");
  return pointList_;
}

- (PathWrapper *)setPointsWithPointList:(PointList *)points {
  if (pointList_ != PointList_get_EMPTY_()) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot call setPoint twice"] autorelease];
  PathWrapper_set_pointList_(self, points);
  return self;
}

- (PointList *)getWaypoints {
  PathWrapper_checkWithNSString_(self, @"getWaypoints");
  return waypointList_;
}

- (void)setWaypointsWithPointList:(PointList *)wpList {
  if (waypointList_ != PointList_get_EMPTY_()) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot call setWaypoints twice"] autorelease];
  PathWrapper_set_waypointList_(self, wpList);
}

- (jdouble)getDistance {
  PathWrapper_checkWithNSString_(self, @"getDistance");
  return distance_;
}

- (PathWrapper *)setDistanceWithDouble:(jdouble)distance {
  self->distance_ = distance;
  return self;
}

- (jdouble)getAscend {
  return ascend_;
}

- (PathWrapper *)setAscendWithDouble:(jdouble)ascend {
  if (ascend < 0 || JavaLangDouble_isNaNWithDouble_(ascend)) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$D", @"ascend has to be positive but was ", ascend)] autorelease];
  self->ascend_ = ascend;
  return self;
}

- (jdouble)getDescend {
  return descend_;
}

- (PathWrapper *)setDescendWithDouble:(jdouble)descend {
  if (descend < 0 || JavaLangDouble_isNaNWithDouble_(descend)) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$D", @"descend has to be positive but was ", descend)] autorelease];
  self->descend_ = descend;
  return self;
}

- (jlong)getTime {
  PathWrapper_checkWithNSString_(self, @"getTimes");
  return time_;
}

- (PathWrapper *)setTimeWithLong:(jlong)timeInMillis {
  self->time_ = timeInMillis;
  return self;
}

- (jdouble)getRouteWeight {
  PathWrapper_checkWithNSString_(self, @"getRouteWeight");
  return routeWeight_;
}

- (PathWrapper *)setRouteWeightWithDouble:(jdouble)weight {
  self->routeWeight_ = weight;
  return self;
}

- (BBox *)calcRouteBBoxWithBBox:(BBox *)_fallback {
  PathWrapper_checkWithNSString_(self, @"calcRouteBBox");
  BBox *bounds = BBox_createInverseWithBoolean_([((BBox *) nil_chk(_fallback)) hasElevation]);
  jint len = [((PointList *) nil_chk(pointList_)) getSize];
  if (len == 0) return _fallback;
  for (jint i = 0; i < len; i++) {
    jdouble lat = [pointList_ getLatitudeWithInt:i];
    jdouble lon = [pointList_ getLongitudeWithInt:i];
    if ([((BBox *) nil_chk(bounds)) hasElevation]) {
      jdouble ele = [pointList_ getEleWithInt:i];
      [bounds updateWithDouble:lat withDouble:lon withDouble:ele];
    }
    else {
      [bounds updateWithDouble:lat withDouble:lon];
    }
  }
  return bounds;
}

- (NSString *)description {
  NSString *str = JreStrcat("$I$$", @"nodes:", [((PointList *) nil_chk(pointList_)) getSize], @"; ", [pointList_ description]);
  if (instructions_ != nil && ![instructions_ isEmpty]) str = JreStrcat("$$", str, JreStrcat("$$", @", ", [instructions_ description]));
  if ([self hasErrors]) str = JreStrcat("$$", str, JreStrcat("$$", @", ", [((id<JavaUtilList>) nil_chk(errors_)) description]));
  return str;
}

- (InstructionList *)getInstructions {
  PathWrapper_checkWithNSString_(self, @"getInstructions");
  if (instructions_ == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"To access instructions you need to enable creation before routing"] autorelease];
  return instructions_;
}

- (void)setInstructionsWithInstructionList:(InstructionList *)instructions {
  PathWrapper_set_instructions_(self, instructions);
}

- (void)checkWithNSString:(NSString *)method {
  PathWrapper_checkWithNSString_(self, method);
}

- (jboolean)hasErrors {
  return ![((id<JavaUtilList>) nil_chk(errors_)) isEmpty];
}

- (id<JavaUtilList>)getErrors {
  return errors_;
}

- (PathWrapper *)addErrorWithJavaLangThrowable:(JavaLangThrowable *)error {
  [((id<JavaUtilList>) nil_chk(errors_)) addWithId:error];
  return self;
}

- (PathWrapper *)addErrorsWithJavaUtilList:(id<JavaUtilList>)errors {
  [((id<JavaUtilList>) nil_chk(self->errors_)) addAllWithJavaUtilCollection:errors];
  return self;
}

- (instancetype)init {
  if (self = [super init]) {
    PathWrapper_setAndConsume_errors_(self, [[JavaUtilArrayList alloc] initWithInt:4]);
    PathWrapper_set_debugInfo_(self, @"");
    PathWrapper_set_waypointList_(self, PointList_get_EMPTY_());
    PathWrapper_set_pointList_(self, PointList_get_EMPTY_());
  }
  return self;
}

- (void)dealloc {
  RELEASE_(errors_);
  RELEASE_(description__);
  RELEASE_(debugInfo_);
  RELEASE_(instructions_);
  RELEASE_(waypointList_);
  RELEASE_(pointList_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(PathWrapper *)other {
  [super copyAllFieldsTo:other];
  PathWrapper_set_errors_(other, errors_);
  PathWrapper_set_description__(other, description__);
  other->distance_ = distance_;
  other->ascend_ = ascend_;
  other->descend_ = descend_;
  other->routeWeight_ = routeWeight_;
  other->time_ = time_;
  PathWrapper_set_debugInfo_(other, debugInfo_);
  PathWrapper_set_instructions_(other, instructions_);
  PathWrapper_set_waypointList_(other, waypointList_);
  PathWrapper_set_pointList_(other, pointList_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDescription", NULL, "Ljava.util.List;", 0x1, NULL },
    { "setDescriptionWithJavaUtilList:", "setDescription", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "addDebugInfoWithNSString:", "addDebugInfo", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "getDebugInfo", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getPoints", NULL, "Lcom.graphhopper.util.PointList;", 0x1, NULL },
    { "setPointsWithPointList:", "setPoints", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "getWaypoints", NULL, "Lcom.graphhopper.util.PointList;", 0x1, NULL },
    { "setWaypointsWithPointList:", "setWaypoints", "V", 0x1, NULL },
    { "getDistance", NULL, "D", 0x1, NULL },
    { "setDistanceWithDouble:", "setDistance", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "getAscend", NULL, "D", 0x1, NULL },
    { "setAscendWithDouble:", "setAscend", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "getDescend", NULL, "D", 0x1, NULL },
    { "setDescendWithDouble:", "setDescend", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "getTime", NULL, "J", 0x1, NULL },
    { "setTimeWithLong:", "setTime", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "getRouteWeight", NULL, "D", 0x1, NULL },
    { "setRouteWeightWithDouble:", "setRouteWeight", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "calcRouteBBoxWithBBox:", "calcRouteBBox", "Lcom.graphhopper.util.shapes.BBox;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getInstructions", NULL, "Lcom.graphhopper.util.InstructionList;", 0x1, NULL },
    { "setInstructionsWithInstructionList:", "setInstructions", "V", 0x1, NULL },
    { "checkWithNSString:", "check", "V", 0x2, NULL },
    { "hasErrors", NULL, "Z", 0x1, NULL },
    { "getErrors", NULL, "Ljava.util.List;", 0x1, NULL },
    { "addErrorWithJavaLangThrowable:", "addError", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "addErrorsWithJavaUtilList:", "addErrors", "Lcom.graphhopper.PathWrapper;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "errors_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "description__", "description", 0x2, "Ljava.util.List;", NULL,  },
    { "distance_", NULL, 0x2, "D", NULL,  },
    { "ascend_", NULL, 0x2, "D", NULL,  },
    { "descend_", NULL, 0x2, "D", NULL,  },
    { "routeWeight_", NULL, 0x2, "D", NULL,  },
    { "time_", NULL, 0x2, "J", NULL,  },
    { "debugInfo_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "instructions_", NULL, 0x2, "Lcom.graphhopper.util.InstructionList;", NULL,  },
    { "waypointList_", NULL, 0x2, "Lcom.graphhopper.util.PointList;", NULL,  },
    { "pointList_", NULL, 0x2, "Lcom.graphhopper.util.PointList;", NULL,  },
  };
  static const J2ObjcClassInfo _PathWrapper = { 1, "PathWrapper", "com.graphhopper", NULL, 0x1, 28, methods, 11, fields, 0, NULL};
  return &_PathWrapper;
}

@end

void PathWrapper_checkWithNSString_(PathWrapper *self, NSString *method) {
  if ([self hasErrors]) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$$$@", @"You cannot call ", method, @" if response contains errors. Check this with ghResponse.hasErrors(). Errors are: ", [self getErrors])] autorelease];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PathWrapper)
