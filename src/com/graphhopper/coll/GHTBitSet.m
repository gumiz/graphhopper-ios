//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/coll/GHTBitSet.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/coll/GHBitSet.h"
#include "com/graphhopper/coll/GHTBitSet.h"
#include "gnu/trove/iterator/TIntIterator.h"
#include "gnu/trove/set/hash/TIntHashSet.h"
#include "java/lang/UnsupportedOperationException.h"

@interface GHTBitSet () {
 @public
  GnuTroveSetHashTIntHashSet *tHash_;
}
@end

J2OBJC_FIELD_SETTER(GHTBitSet, tHash_, GnuTroveSetHashTIntHashSet *)

@implementation GHTBitSet

- (instancetype)initWithGnuTroveSetHashTIntHashSet:(GnuTroveSetHashTIntHashSet *)set {
  if (self = [super init]) {
    GHTBitSet_set_tHash_(self, set);
  }
  return self;
}

- (instancetype)initGHTBitSetWithInt:(jint)no {
  if (self = [super init]) {
    GHTBitSet_setAndConsume_tHash_(self, [[GnuTroveSetHashTIntHashSet alloc] initWithInt:no withFloat:0.7f withInt:-1]);
  }
  return self;
}

- (instancetype)initWithInt:(jint)no {
  return [self initGHTBitSetWithInt:no];
}

- (instancetype)init {
  return [self initGHTBitSetWithInt:1000];
}

- (jboolean)containsWithInt:(jint)index {
  return [((GnuTroveSetHashTIntHashSet *) nil_chk(tHash_)) containsWithInt:index];
}

- (void)addWithInt:(jint)index {
  [((GnuTroveSetHashTIntHashSet *) nil_chk(tHash_)) addWithInt:index];
}

- (NSString *)description {
  return [((GnuTroveSetHashTIntHashSet *) nil_chk(tHash_)) description];
}

- (jint)getCardinality {
  return [((GnuTroveSetHashTIntHashSet *) nil_chk(tHash_)) size];
}

- (void)clear {
  [((GnuTroveSetHashTIntHashSet *) nil_chk(tHash_)) clear];
}

- (void)removeWithInt:(jint)index {
  [((GnuTroveSetHashTIntHashSet *) nil_chk(tHash_)) removeWithInt:index];
}

- (id<GHBitSet>)copyToWithGHBitSet:(id<GHBitSet>)bs {
  [((id<GHBitSet>) nil_chk(bs)) clear];
  if ([bs isKindOfClass:[GHTBitSet class]]) {
    [((GnuTroveSetHashTIntHashSet *) nil_chk(((GHTBitSet *) check_class_cast(bs, [GHTBitSet class]))->tHash_)) addAllWithGnuTroveTIntCollection:self->tHash_];
  }
  else {
    id<GnuTroveIteratorTIntIterator> iter = [((GnuTroveSetHashTIntHashSet *) nil_chk(tHash_)) iterator];
    while ([((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) hasNext]) {
      [bs addWithInt:[iter next]];
    }
  }
  return bs;
}

- (jint)nextWithInt:(jint)index {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported yet."] autorelease];
}

- (void)dealloc {
  RELEASE_(tHash_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GHTBitSet *)other {
  [super copyAllFieldsTo:other];
  GHTBitSet_set_tHash_(other, tHash_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGnuTroveSetHashTIntHashSet:", "GHTBitSet", NULL, 0x1, NULL },
    { "initWithInt:", "GHTBitSet", NULL, 0x1, NULL },
    { "init", "GHTBitSet", NULL, 0x1, NULL },
    { "containsWithInt:", "contains", "Z", 0x11, NULL },
    { "addWithInt:", "add", "V", 0x11, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL },
    { "getCardinality", NULL, "I", 0x11, NULL },
    { "clear", NULL, "V", 0x11, NULL },
    { "removeWithInt:", "remove", "V", 0x1, NULL },
    { "copyToWithGHBitSet:", "copyTo", "Lcom.graphhopper.coll.GHBitSet;", 0x11, NULL },
    { "nextWithInt:", "next", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tHash_", NULL, 0x12, "Lgnu.trove.set.hash.TIntHashSet;", NULL,  },
  };
  static const J2ObjcClassInfo _GHTBitSet = { 1, "GHTBitSet", "com.graphhopper.coll", NULL, 0x1, 11, methods, 1, fields, 0, NULL};
  return &_GHTBitSet;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHTBitSet)
