//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/coll/GHTreeMapComposed.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/coll/GHTreeMapComposed.h"
#include "com/graphhopper/util/BitUtil.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/Map.h"
#include "java/util/TreeMap.h"

@interface GHTreeMapComposed () {
 @public
  BitUtil *bitUtil_;
  JavaUtilTreeMap *map_;
}
@end

J2OBJC_FIELD_SETTER(GHTreeMapComposed, bitUtil_, BitUtil *)
J2OBJC_FIELD_SETTER(GHTreeMapComposed, map_, JavaUtilTreeMap *)

BOOL GHTreeMapComposed_initialized = NO;

@implementation GHTreeMapComposed

JavaLangInteger * GHTreeMapComposed_NOT_EMPTY_;

- (instancetype)init {
  if (self = [super init]) {
    GHTreeMapComposed_set_bitUtil_(self, BitUtil_get_BIG_());
    GHTreeMapComposed_setAndConsume_map_(self, [[JavaUtilTreeMap alloc] init]);
  }
  return self;
}

- (void)clear {
  [((JavaUtilTreeMap *) nil_chk(map_)) clear];
}

- (void)removeWithInt:(jint)key
              withInt:(jint)value {
  jlong v = [((BitUtil *) nil_chk(bitUtil_)) toLongWithInt:value withInt:key];
  if (![((JavaLangInteger *) nil_chk([((JavaUtilTreeMap *) nil_chk(map_)) removeWithId:JavaLangLong_valueOfWithLong_(v)])) isEqual:GHTreeMapComposed_NOT_EMPTY_]) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$I$I$ICI$", @"cannot remove key ", key, @" with value ", value, @" - did you insert ", key, ',', value, @" before?")] autorelease];
  }
}

- (void)updateWithInt:(jint)key
              withInt:(jint)oldValue
              withInt:(jint)value {
  [self removeWithInt:key withInt:oldValue];
  [self insertWithInt:key withInt:value];
}

- (void)insertWithInt:(jint)key
              withInt:(jint)value {
  jlong v = [((BitUtil *) nil_chk(bitUtil_)) toLongWithInt:value withInt:key];
  [((JavaUtilTreeMap *) nil_chk(map_)) putWithId:JavaLangLong_valueOfWithLong_(v) withId:GHTreeMapComposed_NOT_EMPTY_];
}

- (jint)peekValue {
  jlong key = [((JavaLangLong *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([((JavaUtilTreeMap *) nil_chk(map_)) firstEntry])) getKey])) longLongValue];
  return (jint) (RShift64(key, 32));
}

- (jint)peekKey {
  jlong key = [((JavaLangLong *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([((JavaUtilTreeMap *) nil_chk(map_)) firstEntry])) getKey])) longLongValue];
  return (jint) (key & (jlong) 0xFFFFFFFFLL);
}

- (jint)pollKey {
  if ([((JavaUtilTreeMap *) nil_chk(map_)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot poll collection is empty!"] autorelease];
  jlong key = [((JavaLangLong *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([map_ pollFirstEntry])) getKey])) longLongValue];
  return (jint) (key & (jlong) 0xFFFFFFFFLL);
}

- (jint)getSize {
  return [((JavaUtilTreeMap *) nil_chk(map_)) size];
}

- (jboolean)isEmpty {
  return [((JavaUtilTreeMap *) nil_chk(map_)) isEmpty];
}

- (NSString *)description {
  return [((JavaUtilTreeMap *) nil_chk(map_)) description];
}

- (void)dealloc {
  RELEASE_(bitUtil_);
  RELEASE_(map_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GHTreeMapComposed *)other {
  [super copyAllFieldsTo:other];
  GHTreeMapComposed_set_bitUtil_(other, bitUtil_);
  GHTreeMapComposed_set_map_(other, map_);
}

+ (void)initialize {
  if (self == [GHTreeMapComposed class]) {
    JreStrongAssignAndConsume(&GHTreeMapComposed_NOT_EMPTY_, nil, [[JavaLangInteger alloc] initWithInt:-3]);
    J2OBJC_SET_INITIALIZED(GHTreeMapComposed)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GHTreeMapComposed", NULL, 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "removeWithInt:withInt:", "remove", "V", 0x0, NULL },
    { "updateWithInt:withInt:withInt:", "update", "V", 0x1, NULL },
    { "insertWithInt:withInt:", "insert", "V", 0x1, NULL },
    { "peekValue", NULL, "I", 0x1, NULL },
    { "peekKey", NULL, "I", 0x1, NULL },
    { "pollKey", NULL, "I", 0x1, NULL },
    { "getSize", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_EMPTY_", NULL, 0x1a, "Ljava.lang.Integer;", &GHTreeMapComposed_NOT_EMPTY_,  },
    { "bitUtil_", NULL, 0x12, "Lcom.graphhopper.util.BitUtil;", NULL,  },
    { "map_", NULL, 0x12, "Ljava.util.TreeMap;", NULL,  },
  };
  static const J2ObjcClassInfo _GHTreeMapComposed = { 1, "GHTreeMapComposed", "com.graphhopper.coll", NULL, 0x1, 11, methods, 3, fields, 0, NULL};
  return &_GHTreeMapComposed;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHTreeMapComposed)
