//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/coll/SparseIntIntArray.java
//

#ifndef _SparseIntIntArray_H_
#define _SparseIntIntArray_H_

@class IOSIntArray;

#include "J2ObjC_header.h"

#define SparseIntIntArray_DELETED ((jint) 0x80000000)

/**
 @brief Copied from Android project. android.util.SparseArray.java <p> SparseArrays map ints to ints.
 Unlike a normal array of ints, there can be gaps in the indices.
 */
@interface SparseIntIntArray : NSObject {
}

/**
 @brief Creates a new SparseIntIntArray containing no mappings.
 */
- (instancetype)init;

/**
 @brief Creates a new SparseIntIntArray containing no mappings that will not require any additional memory allocation to store the specified number of mappings.
 */
- (instancetype)initWithInt:(jint)cap;

+ (jint)binarySearchWithIntArray:(IOSIntArray *)a
                         withInt:(jint)start
                         withInt:(jint)len
                         withInt:(jint)key;

/**
 @brief Gets the Object mapped from the specified key, or <code>null</code> if no such mapping has been made.
 */
- (jint)getWithInt:(jint)key;

/**
 @brief Removes the mapping from the specified key, if there was any.
 */
- (void)removeWithInt:(jint)key;

/**
 @brief Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.
 */
- (jint)putWithInt:(jint)key
           withInt:(jint)value;

/**
 @brief Returns the number of key-value mappings that this SparseIntIntArray currently stores.
 */
- (jint)getSize;

/**
 @brief Given an index in the range <code>0...size()-1</code>, returns the key from the <code>index</code>th key-value mapping that this SparseIntIntArray stores.
 */
- (jint)keyAtWithInt:(jint)index;

/**
 @brief Given an index in the range <code>0...size()-1</code>, sets a new key for the <code>index</code>th key-value mapping that this SparseIntIntArray stores.
 */
- (void)setKeyAtWithInt:(jint)index
                withInt:(jint)key;

/**
 @brief Given an index in the range <code>0...size()-1</code>, returns the value from the <code>index</code>th key-value mapping that this SparseIntIntArray stores.
 */
- (jint)valueAtWithInt:(jint)index;

/**
 @brief Given an index in the range <code>0...size()-1</code>, sets a new value for the <code>index</code>th key-value mapping that this SparseIntIntArray stores.
 */
- (void)setValueAtWithInt:(jint)index
                  withInt:(jint)value;

/**
 @brief Removes all key-value mappings from this SparseIntIntArray.
 */
- (void)clear;

/**
 @brief Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.
 */
- (jint)appendWithInt:(jint)key
              withInt:(jint)value;

- (NSString *)description;

/**
 @brief Warning: returns ~index and not -(index+1) like trove and jdk do
 */
- (jint)binarySearchWithInt:(jint)key;

@end

J2OBJC_EMPTY_STATIC_INIT(SparseIntIntArray)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT jint SparseIntIntArray_binarySearchWithIntArray_withInt_withInt_withInt_(IOSIntArray *a, jint start, jint len, jint key);

J2OBJC_STATIC_FIELD_GETTER(SparseIntIntArray, DELETED, jint)
CF_EXTERN_C_END

typedef SparseIntIntArray ComGraphhopperCollSparseIntIntArray;

J2OBJC_TYPE_LITERAL_HEADER(SparseIntIntArray)

#endif // _SparseIntIntArray_H_
