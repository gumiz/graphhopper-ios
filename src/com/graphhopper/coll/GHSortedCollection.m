//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/coll/GHSortedCollection.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/coll/GHSortedCollection.h"
#include "gnu/trove/iterator/TIntIterator.h"
#include "gnu/trove/set/hash/TIntHashSet.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@interface GHSortedCollection () {
 @public
  jint slidingMeanValue_;
  JavaUtilTreeMap *map_;
  jint size_;
}
@end

J2OBJC_FIELD_SETTER(GHSortedCollection, map_, JavaUtilTreeMap *)

@implementation GHSortedCollection

- (instancetype)init {
  if (self = [super init]) {
    slidingMeanValue_ = 20;
    GHSortedCollection_setAndConsume_map_(self, [[JavaUtilTreeMap alloc] init]);
  }
  return self;
}

- (void)clear {
  size_ = 0;
  [((JavaUtilTreeMap *) nil_chk(map_)) clear];
}

- (void)removeWithInt:(jint)key
              withInt:(jint)value {
  GnuTroveSetHashTIntHashSet *set = [((JavaUtilTreeMap *) nil_chk(map_)) getWithId:JavaLangInteger_valueOfWithInt_(value)];
  if (set == nil || ![set removeWithInt:key]) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$I$I$ICI$", @"cannot remove key ", key, @" with value ", value, @" - did you insert ", key, ',', value, @" before?")] autorelease];
  }
  size_--;
  if ([((GnuTroveSetHashTIntHashSet *) nil_chk(set)) isEmpty]) {
    [map_ removeWithId:JavaLangInteger_valueOfWithInt_(value)];
  }
}

- (void)updateWithInt:(jint)key
              withInt:(jint)oldValue
              withInt:(jint)value {
  [self removeWithInt:key withInt:oldValue];
  [self insertWithInt:key withInt:value];
}

- (void)insertWithInt:(jint)key
              withInt:(jint)value {
  GnuTroveSetHashTIntHashSet *set = [((JavaUtilTreeMap *) nil_chk(map_)) getWithId:JavaLangInteger_valueOfWithInt_(value)];
  if (set == nil) {
    [map_ putWithId:JavaLangInteger_valueOfWithInt_(value) withId:set = [[[GnuTroveSetHashTIntHashSet alloc] initWithInt:slidingMeanValue_] autorelease]];
  }
  if (![((GnuTroveSetHashTIntHashSet *) nil_chk(set)) addWithInt:key]) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$I", @"use update if you want to update ", key)] autorelease];
  }
  size_++;
}

- (jint)peekValue {
  if (size_ == 0) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"collection is already empty!?"] autorelease];
  }
  id<JavaUtilMap_Entry> e = [((JavaUtilTreeMap *) nil_chk(map_)) firstEntry];
  if ([((GnuTroveSetHashTIntHashSet *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getValue])) isEmpty]) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"internal set is already empty!?"] autorelease];
  }
  return [((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([map_ firstEntry])) getKey])) intValue];
}

- (jint)peekKey {
  if (size_ == 0) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"collection is already empty!?"] autorelease];
  }
  GnuTroveSetHashTIntHashSet *set = [((id<JavaUtilMap_Entry>) nil_chk([((JavaUtilTreeMap *) nil_chk(map_)) firstEntry])) getValue];
  if ([((GnuTroveSetHashTIntHashSet *) nil_chk(set)) isEmpty]) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"internal set is already empty!?"] autorelease];
  }
  return [((id<GnuTroveIteratorTIntIterator>) nil_chk([set iterator])) next];
}

- (jint)pollKey {
  size_--;
  if (size_ < 0) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"collection is already empty!?"] autorelease];
  }
  id<JavaUtilMap_Entry> e = [((JavaUtilTreeMap *) nil_chk(map_)) firstEntry];
  GnuTroveSetHashTIntHashSet *set = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
  id<GnuTroveIteratorTIntIterator> iter = [((GnuTroveSetHashTIntHashSet *) nil_chk(set)) iterator];
  if ([set isEmpty]) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"internal set is already empty!?"] autorelease];
  }
  jint val = [((id<GnuTroveIteratorTIntIterator>) nil_chk(iter)) next];
  [iter remove];
  if ([set isEmpty]) {
    [map_ removeWithId:[e getKey]];
  }
  return val;
}

- (jint)getSize {
  return size_;
}

- (jboolean)isEmpty {
  return size_ == 0;
}

- (jint)getSlidingMeanValue {
  return slidingMeanValue_;
}

- (NSString *)description {
  jint min = JavaLangInteger_MAX_VALUE;
  jint max = JavaLangInteger_MIN_VALUE;
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilTreeMap *) nil_chk(map_)) entrySet])) {
    jint tmpSize = [((GnuTroveSetHashTIntHashSet *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getValue])) size];
    if (min > tmpSize) {
      min = tmpSize;
    }
    if (max < tmpSize) {
      max = tmpSize;
    }
  }
  NSString *str = @"";
  if (![self isEmpty]) {
    str = JreStrcat("$I$IC", @", minEntry=(", [self peekKey], @"=>", [self peekValue], ')');
  }
  return JreStrcat("$$", JreStrcat("$I", JreStrcat("$$", JreStrcat("$I", JreStrcat("$$", JreStrcat("$I$I$F", @"size=", size_, @", treeMap.size=", [map_ size], @", averageNo=", size_ * 1.0f / [map_ size]), @", minNo="), min), @", maxNo="), max), str);
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GHSortedCollection *)other {
  [super copyAllFieldsTo:other];
  other->slidingMeanValue_ = slidingMeanValue_;
  GHSortedCollection_set_map_(other, map_);
  other->size_ = size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GHSortedCollection", NULL, 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "removeWithInt:withInt:", "remove", "V", 0x0, NULL },
    { "updateWithInt:withInt:withInt:", "update", "V", 0x1, NULL },
    { "insertWithInt:withInt:", "insert", "V", 0x1, NULL },
    { "peekValue", NULL, "I", 0x1, NULL },
    { "peekKey", NULL, "I", 0x1, NULL },
    { "pollKey", NULL, "I", 0x1, NULL },
    { "getSize", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "getSlidingMeanValue", NULL, "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "slidingMeanValue_", NULL, 0x12, "I", NULL,  },
    { "map_", NULL, 0x12, "Ljava.util.TreeMap;", NULL,  },
    { "size_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _GHSortedCollection = { 1, "GHSortedCollection", "com.graphhopper.coll", NULL, 0x1, 12, methods, 3, fields, 0, NULL};
  return &_GHSortedCollection;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GHSortedCollection)
