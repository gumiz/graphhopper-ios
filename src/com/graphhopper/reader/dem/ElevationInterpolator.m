//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/dem/ElevationInterpolator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/dem/ElevationInterpolator.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/PointList.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

@implementation ComGraphhopperReaderDemElevationInterpolator

- (jdouble)calculateElevationBasedOnTwoPointsWithDouble:(jdouble)lat
                                             withDouble:(jdouble)lon
                                             withDouble:(jdouble)lat0
                                             withDouble:(jdouble)lon0
                                             withDouble:(jdouble)ele0
                                             withDouble:(jdouble)lat1
                                             withDouble:(jdouble)lon1
                                             withDouble:(jdouble)ele1 {
  jdouble dlat0 = lat0 - lat;
  jdouble dlon0 = lon0 - lon;
  jdouble dlat1 = lat1 - lat;
  jdouble dlon1 = lon1 - lon;
  jdouble l0 = JavaLangMath_sqrtWithDouble_(dlon0 * dlon0 + dlat0 * dlat0);
  jdouble l1 = JavaLangMath_sqrtWithDouble_(dlon1 * dlon1 + dlat1 * dlat1);
  jdouble l = l0 + l1;
  if (l < ComGraphhopperReaderDemElevationInterpolator_EPSILON) {
    return l0 <= l1 ? ele0 : ele1;
  }
  else {
    return Helper_round2WithDouble_(ele0 + (ele1 - ele0) * l0 / l);
  }
}

- (jdouble)calculateElevationBasedOnThreePointsWithDouble:(jdouble)lat
                                               withDouble:(jdouble)lon
                                               withDouble:(jdouble)lat0
                                               withDouble:(jdouble)lon0
                                               withDouble:(jdouble)ele0
                                               withDouble:(jdouble)lat1
                                               withDouble:(jdouble)lon1
                                               withDouble:(jdouble)ele1
                                               withDouble:(jdouble)lat2
                                               withDouble:(jdouble)lon2
                                               withDouble:(jdouble)ele2 {
  jdouble dlat10 = lat1 - lat0;
  jdouble dlon10 = lon1 - lon0;
  jdouble dele10 = ele1 - ele0;
  jdouble dlat20 = lat2 - lat0;
  jdouble dlon20 = lon2 - lon0;
  jdouble dele20 = ele2 - ele0;
  jdouble a = dlon10 * dele20 - dele10 * dlon20;
  jdouble b = dele10 * dlat20 - dlat10 * dele20;
  jdouble c = dlat10 * dlon20 - dlon10 * dlat20;
  if (JavaLangMath_absWithDouble_(c) < ComGraphhopperReaderDemElevationInterpolator_EPSILON) {
    jdouble dlat21 = lat2 - lat1;
    jdouble dlon21 = lon2 - lon1;
    jdouble dele21 = ele2 - ele1;
    jdouble l10 = dlat10 * dlat10 + dlon10 * dlon10 + dele10 * dele10;
    jdouble l20 = dlat20 * dlat20 + dlon20 * dlon20 + dele20 * dele20;
    jdouble l21 = dlat21 * dlat21 + dlon21 * dlon21 + dele21 * dele21;
    if (l21 > l10 && l21 > l20) {
      return [self calculateElevationBasedOnTwoPointsWithDouble:lat withDouble:lon withDouble:lat1 withDouble:lon1 withDouble:ele1 withDouble:lat2 withDouble:lon2 withDouble:ele2];
    }
    else if (l20 > l10 && l20 > l21) {
      return [self calculateElevationBasedOnTwoPointsWithDouble:lat withDouble:lon withDouble:lat0 withDouble:lon0 withDouble:ele0 withDouble:lat2 withDouble:lon2 withDouble:ele2];
    }
    else {
      return [self calculateElevationBasedOnTwoPointsWithDouble:lat withDouble:lon withDouble:lat0 withDouble:lon0 withDouble:ele0 withDouble:lat1 withDouble:lon1 withDouble:ele1];
    }
  }
  else {
    jdouble d = a * lat0 + b * lon0 + c * ele0;
    jdouble ele = (d - a * lat - b * lon) / c;
    return Helper_round2WithDouble_(ele);
  }
}

- (jdouble)calculateElevationBasedOnPointListWithDouble:(jdouble)lat
                                             withDouble:(jdouble)lon
                                          withPointList:(PointList *)pointList {
  jint size = [((PointList *) nil_chk(pointList)) size];
  if (size == 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"At least one point is required in the pointList."] autorelease];
  }
  else if (size == 1) {
    return [pointList getEleWithInt:0];
  }
  else if (size == 2) {
    return [self calculateElevationBasedOnTwoPointsWithDouble:lat withDouble:lon withDouble:[pointList getLatWithInt:0] withDouble:[pointList getLonWithInt:0] withDouble:[pointList getEleWithInt:0] withDouble:[pointList getLatWithInt:1] withDouble:[pointList getLonWithInt:1] withDouble:[pointList getEleWithInt:1]];
  }
  else if (size == 3) {
    return [self calculateElevationBasedOnThreePointsWithDouble:lat withDouble:lon withDouble:[pointList getLatWithInt:0] withDouble:[pointList getLonWithInt:0] withDouble:[pointList getEleWithInt:0] withDouble:[pointList getLatWithInt:1] withDouble:[pointList getLonWithInt:1] withDouble:[pointList getEleWithInt:1] withDouble:[pointList getLatWithInt:2] withDouble:[pointList getLonWithInt:2] withDouble:[pointList getEleWithInt:2]];
  }
  else {
    IOSDoubleArray *vs = [IOSDoubleArray arrayWithLength:size];
    IOSDoubleArray *eles = [IOSDoubleArray arrayWithLength:size];
    jdouble v = 0;
    for (jint index = 0; index < size; index++) {
      jdouble lati = [pointList getLatWithInt:index];
      jdouble loni = [pointList getLonWithInt:index];
      jdouble dlati = lati - lat;
      jdouble dloni = loni - lon;
      jdouble l2 = (dlati * dlati + dloni * dloni);
      *IOSDoubleArray_GetRef(eles, index) = [pointList getEleWithInt:index];
      if (l2 < ComGraphhopperReaderDemElevationInterpolator_EPSILON2) {
        return IOSDoubleArray_Get(eles, index);
      }
      *IOSDoubleArray_GetRef(vs, index) = 1 / l2;
      v += IOSDoubleArray_Get(vs, index);
    }
    jdouble ele = 0;
    for (jint index = 0; index < size; index++) {
      ele += IOSDoubleArray_Get(eles, index) * IOSDoubleArray_Get(vs, index) / v;
    }
    return Helper_round2WithDouble_(ele);
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calculateElevationBasedOnTwoPointsWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "calculateElevationBasedOnTwoPoints", "D", 0x1, NULL },
    { "calculateElevationBasedOnThreePointsWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "calculateElevationBasedOnThreePoints", "D", 0x1, NULL },
    { "calculateElevationBasedOnPointListWithDouble:withDouble:withPointList:", "calculateElevationBasedOnPointList", "D", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EPSILON_", NULL, 0x19, "D", NULL, .constantValue.asDouble = ComGraphhopperReaderDemElevationInterpolator_EPSILON },
    { "EPSILON2_", NULL, 0x19, "D", NULL, .constantValue.asDouble = ComGraphhopperReaderDemElevationInterpolator_EPSILON2 },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderDemElevationInterpolator = { 1, "ElevationInterpolator", "com.graphhopper.reader.dem", NULL, 0x1, 4, methods, 2, fields, 0, NULL};
  return &_ComGraphhopperReaderDemElevationInterpolator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderDemElevationInterpolator)
