//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/dem/TunnelElevationInterpolator.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/reader/dem/TunnelElevationInterpolator.h"
#include "com/graphhopper/routing/util/DataFlagEncoder.h"
#include "com/graphhopper/storage/GraphHopperStorage.h"
#include "com/graphhopper/util/EdgeIteratorState.h"

@implementation ComGraphhopperReaderDemTunnelElevationInterpolator

- (instancetype)initWithGraphHopperStorage:(GraphHopperStorage *)storage
                       withDataFlagEncoder:(DataFlagEncoder *)dataFlagEncoder {
  return [super initWithGraphHopperStorage:storage withDataFlagEncoder:dataFlagEncoder];
}

- (jboolean)isInterpolatableEdgeWithEdgeIteratorState:(id<EdgeIteratorState>)edge {
  return [((DataFlagEncoder *) nil_chk(dataFlagEncoder_)) isTransportModeTunnelWithEdgeIteratorState:edge];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraphHopperStorage:withDataFlagEncoder:", "TunnelElevationInterpolator", NULL, 0x1, NULL },
    { "isInterpolatableEdgeWithEdgeIteratorState:", "isInterpolatableEdge", "Z", 0x4, NULL },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderDemTunnelElevationInterpolator = { 1, "TunnelElevationInterpolator", "com.graphhopper.reader.dem", NULL, 0x1, 2, methods, 0, NULL, 0, NULL};
  return &_ComGraphhopperReaderDemTunnelElevationInterpolator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderDemTunnelElevationInterpolator)
