//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/dem/NodeElevationInterpolator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/dem/ElevationInterpolator.h"
#include "com/graphhopper/reader/dem/NodeElevationInterpolator.h"
#include "com/graphhopper/storage/GraphHopperStorage.h"
#include "com/graphhopper/storage/NodeAccess.h"
#include "com/graphhopper/util/PointList.h"

__attribute__((unused)) static void ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForOneOuterNodeWithInt_withIntArray_(ComGraphhopperReaderDemNodeElevationInterpolator *self, jint outerNodeId, IOSIntArray *innerNodeIds);
__attribute__((unused)) static void ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForTwoOuterNodesWithInt_withInt_withIntArray_(ComGraphhopperReaderDemNodeElevationInterpolator *self, jint firstOuterNodeId, jint secondOuterNodeId, IOSIntArray *innerNodeIds);
__attribute__((unused)) static void ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForThreeOuterNodesWithInt_withInt_withInt_withIntArray_(ComGraphhopperReaderDemNodeElevationInterpolator *self, jint firstOuterNodeId, jint secondOuterNodeId, jint thirdOuterNodeId, IOSIntArray *innerNodeIds);
__attribute__((unused)) static void ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForNOuterNodesWithIntArray_withIntArray_(ComGraphhopperReaderDemNodeElevationInterpolator *self, IOSIntArray *outerNodeIds, IOSIntArray *innerNodeIds);

@interface ComGraphhopperReaderDemNodeElevationInterpolator () {
 @public
  GraphHopperStorage *storage_;
  ComGraphhopperReaderDemElevationInterpolator *elevationInterpolator_;
}

- (void)interpolateElevationsOfInnerNodesForOneOuterNodeWithInt:(jint)outerNodeId
                                                   withIntArray:(IOSIntArray *)innerNodeIds;

- (void)interpolateElevationsOfInnerNodesForTwoOuterNodesWithInt:(jint)firstOuterNodeId
                                                         withInt:(jint)secondOuterNodeId
                                                    withIntArray:(IOSIntArray *)innerNodeIds;

- (void)interpolateElevationsOfInnerNodesForThreeOuterNodesWithInt:(jint)firstOuterNodeId
                                                           withInt:(jint)secondOuterNodeId
                                                           withInt:(jint)thirdOuterNodeId
                                                      withIntArray:(IOSIntArray *)innerNodeIds;

- (void)interpolateElevationsOfInnerNodesForNOuterNodesWithIntArray:(IOSIntArray *)outerNodeIds
                                                       withIntArray:(IOSIntArray *)innerNodeIds;
@end

J2OBJC_FIELD_SETTER(ComGraphhopperReaderDemNodeElevationInterpolator, storage_, GraphHopperStorage *)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderDemNodeElevationInterpolator, elevationInterpolator_, ComGraphhopperReaderDemElevationInterpolator *)

@implementation ComGraphhopperReaderDemNodeElevationInterpolator

- (instancetype)initWithGraphHopperStorage:(GraphHopperStorage *)storage {
  if (self = [super init]) {
    ComGraphhopperReaderDemNodeElevationInterpolator_setAndConsume_elevationInterpolator_(self, [[ComGraphhopperReaderDemElevationInterpolator alloc] init]);
    ComGraphhopperReaderDemNodeElevationInterpolator_set_storage_(self, storage);
  }
  return self;
}

- (void)interpolateElevationsOfInnerNodesWithIntArray:(IOSIntArray *)outerNodeIds
                                         withIntArray:(IOSIntArray *)innerNodeIds {
  jint numberOfOuterNodes = ((IOSIntArray *) nil_chk(outerNodeIds))->size_;
  if (numberOfOuterNodes == 0) {
  }
  else if (numberOfOuterNodes == 1) {
    ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForOneOuterNodeWithInt_withIntArray_(self, IOSIntArray_Get(outerNodeIds, 0), innerNodeIds);
  }
  else if (numberOfOuterNodes == 2) {
    ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForTwoOuterNodesWithInt_withInt_withIntArray_(self, IOSIntArray_Get(outerNodeIds, 0), IOSIntArray_Get(outerNodeIds, 1), innerNodeIds);
  }
  else if (numberOfOuterNodes == 3) {
    ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForThreeOuterNodesWithInt_withInt_withInt_withIntArray_(self, IOSIntArray_Get(outerNodeIds, 0), IOSIntArray_Get(outerNodeIds, 1), IOSIntArray_Get(outerNodeIds, 2), innerNodeIds);
  }
  else if (numberOfOuterNodes > 3) {
    ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForNOuterNodesWithIntArray_withIntArray_(self, outerNodeIds, innerNodeIds);
  }
}

- (void)interpolateElevationsOfInnerNodesForOneOuterNodeWithInt:(jint)outerNodeId
                                                   withIntArray:(IOSIntArray *)innerNodeIds {
  ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForOneOuterNodeWithInt_withIntArray_(self, outerNodeId, innerNodeIds);
}

- (void)interpolateElevationsOfInnerNodesForTwoOuterNodesWithInt:(jint)firstOuterNodeId
                                                         withInt:(jint)secondOuterNodeId
                                                    withIntArray:(IOSIntArray *)innerNodeIds {
  ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForTwoOuterNodesWithInt_withInt_withIntArray_(self, firstOuterNodeId, secondOuterNodeId, innerNodeIds);
}

- (void)interpolateElevationsOfInnerNodesForThreeOuterNodesWithInt:(jint)firstOuterNodeId
                                                           withInt:(jint)secondOuterNodeId
                                                           withInt:(jint)thirdOuterNodeId
                                                      withIntArray:(IOSIntArray *)innerNodeIds {
  ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForThreeOuterNodesWithInt_withInt_withInt_withIntArray_(self, firstOuterNodeId, secondOuterNodeId, thirdOuterNodeId, innerNodeIds);
}

- (void)interpolateElevationsOfInnerNodesForNOuterNodesWithIntArray:(IOSIntArray *)outerNodeIds
                                                       withIntArray:(IOSIntArray *)innerNodeIds {
  ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForNOuterNodesWithIntArray_withIntArray_(self, outerNodeIds, innerNodeIds);
}

- (void)dealloc {
  RELEASE_(storage_);
  RELEASE_(elevationInterpolator_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperReaderDemNodeElevationInterpolator *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperReaderDemNodeElevationInterpolator_set_storage_(other, storage_);
  ComGraphhopperReaderDemNodeElevationInterpolator_set_elevationInterpolator_(other, elevationInterpolator_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraphHopperStorage:", "NodeElevationInterpolator", NULL, 0x1, NULL },
    { "interpolateElevationsOfInnerNodesWithIntArray:withIntArray:", "interpolateElevationsOfInnerNodes", "V", 0x1, NULL },
    { "interpolateElevationsOfInnerNodesForOneOuterNodeWithInt:withIntArray:", "interpolateElevationsOfInnerNodesForOneOuterNode", "V", 0x2, NULL },
    { "interpolateElevationsOfInnerNodesForTwoOuterNodesWithInt:withInt:withIntArray:", "interpolateElevationsOfInnerNodesForTwoOuterNodes", "V", 0x2, NULL },
    { "interpolateElevationsOfInnerNodesForThreeOuterNodesWithInt:withInt:withInt:withIntArray:", "interpolateElevationsOfInnerNodesForThreeOuterNodes", "V", 0x2, NULL },
    { "interpolateElevationsOfInnerNodesForNOuterNodesWithIntArray:withIntArray:", "interpolateElevationsOfInnerNodesForNOuterNodes", "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "storage_", NULL, 0x12, "Lcom.graphhopper.storage.GraphHopperStorage;", NULL,  },
    { "elevationInterpolator_", NULL, 0x12, "Lcom.graphhopper.reader.dem.ElevationInterpolator;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderDemNodeElevationInterpolator = { 1, "NodeElevationInterpolator", "com.graphhopper.reader.dem", NULL, 0x1, 6, methods, 2, fields, 0, NULL};
  return &_ComGraphhopperReaderDemNodeElevationInterpolator;
}

@end

void ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForOneOuterNodeWithInt_withIntArray_(ComGraphhopperReaderDemNodeElevationInterpolator *self, jint outerNodeId, IOSIntArray *innerNodeIds) {
  id<NodeAccess> nodeAccess = [((GraphHopperStorage *) nil_chk(self->storage_)) getNodeAccess];
  jdouble ele = [((id<NodeAccess>) nil_chk(nodeAccess)) getEleWithInt:outerNodeId];
  {
    IOSIntArray *a__ = innerNodeIds;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint innerNodeId = *b__++;
      jdouble lat = [nodeAccess getLatWithInt:innerNodeId];
      jdouble lon = [nodeAccess getLonWithInt:innerNodeId];
      [nodeAccess setNodeWithInt:innerNodeId withDouble:lat withDouble:lon withDouble:ele];
    }
  }
}

void ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForTwoOuterNodesWithInt_withInt_withIntArray_(ComGraphhopperReaderDemNodeElevationInterpolator *self, jint firstOuterNodeId, jint secondOuterNodeId, IOSIntArray *innerNodeIds) {
  id<NodeAccess> nodeAccess = [((GraphHopperStorage *) nil_chk(self->storage_)) getNodeAccess];
  jdouble lat0 = [((id<NodeAccess>) nil_chk(nodeAccess)) getLatWithInt:firstOuterNodeId];
  jdouble lon0 = [nodeAccess getLonWithInt:firstOuterNodeId];
  jdouble ele0 = [nodeAccess getEleWithInt:firstOuterNodeId];
  jdouble lat1 = [nodeAccess getLatWithInt:secondOuterNodeId];
  jdouble lon1 = [nodeAccess getLonWithInt:secondOuterNodeId];
  jdouble ele1 = [nodeAccess getEleWithInt:secondOuterNodeId];
  {
    IOSIntArray *a__ = innerNodeIds;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint innerNodeId = *b__++;
      jdouble lat = [nodeAccess getLatWithInt:innerNodeId];
      jdouble lon = [nodeAccess getLonWithInt:innerNodeId];
      jdouble ele = [((ComGraphhopperReaderDemElevationInterpolator *) nil_chk(self->elevationInterpolator_)) calculateElevationBasedOnTwoPointsWithDouble:lat withDouble:lon withDouble:lat0 withDouble:lon0 withDouble:ele0 withDouble:lat1 withDouble:lon1 withDouble:ele1];
      [nodeAccess setNodeWithInt:innerNodeId withDouble:lat withDouble:lon withDouble:ele];
    }
  }
}

void ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForThreeOuterNodesWithInt_withInt_withInt_withIntArray_(ComGraphhopperReaderDemNodeElevationInterpolator *self, jint firstOuterNodeId, jint secondOuterNodeId, jint thirdOuterNodeId, IOSIntArray *innerNodeIds) {
  id<NodeAccess> nodeAccess = [((GraphHopperStorage *) nil_chk(self->storage_)) getNodeAccess];
  jdouble lat0 = [((id<NodeAccess>) nil_chk(nodeAccess)) getLatWithInt:firstOuterNodeId];
  jdouble lon0 = [nodeAccess getLonWithInt:firstOuterNodeId];
  jdouble ele0 = [nodeAccess getEleWithInt:firstOuterNodeId];
  jdouble lat1 = [nodeAccess getLatWithInt:secondOuterNodeId];
  jdouble lon1 = [nodeAccess getLonWithInt:secondOuterNodeId];
  jdouble ele1 = [nodeAccess getEleWithInt:secondOuterNodeId];
  jdouble lat2 = [nodeAccess getLatWithInt:thirdOuterNodeId];
  jdouble lon2 = [nodeAccess getLonWithInt:thirdOuterNodeId];
  jdouble ele2 = [nodeAccess getEleWithInt:thirdOuterNodeId];
  {
    IOSIntArray *a__ = innerNodeIds;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint innerNodeId = *b__++;
      jdouble lat = [nodeAccess getLatWithInt:innerNodeId];
      jdouble lon = [nodeAccess getLonWithInt:innerNodeId];
      jdouble ele = [((ComGraphhopperReaderDemElevationInterpolator *) nil_chk(self->elevationInterpolator_)) calculateElevationBasedOnThreePointsWithDouble:lat withDouble:lon withDouble:lat0 withDouble:lon0 withDouble:ele0 withDouble:lat1 withDouble:lon1 withDouble:ele1 withDouble:lat2 withDouble:lon2 withDouble:ele2];
      [nodeAccess setNodeWithInt:innerNodeId withDouble:lat withDouble:lon withDouble:ele];
    }
  }
}

void ComGraphhopperReaderDemNodeElevationInterpolator_interpolateElevationsOfInnerNodesForNOuterNodesWithIntArray_withIntArray_(ComGraphhopperReaderDemNodeElevationInterpolator *self, IOSIntArray *outerNodeIds, IOSIntArray *innerNodeIds) {
  id<NodeAccess> nodeAccess = [((GraphHopperStorage *) nil_chk(self->storage_)) getNodeAccess];
  PointList *pointList = [[[PointList alloc] initWithInt:((IOSIntArray *) nil_chk(outerNodeIds))->size_ withBoolean:YES] autorelease];
  {
    IOSIntArray *a__ = outerNodeIds;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint outerNodeId = *b__++;
      [pointList addWithDouble:[((id<NodeAccess>) nil_chk(nodeAccess)) getLatWithInt:outerNodeId] withDouble:[nodeAccess getLonWithInt:outerNodeId] withDouble:[nodeAccess getEleWithInt:outerNodeId]];
    }
  }
  {
    IOSIntArray *a__ = innerNodeIds;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint innerNodeId = *b__++;
      jdouble lat = [((id<NodeAccess>) nil_chk(nodeAccess)) getLatWithInt:innerNodeId];
      jdouble lon = [nodeAccess getLonWithInt:innerNodeId];
      jdouble ele = [((ComGraphhopperReaderDemElevationInterpolator *) nil_chk(self->elevationInterpolator_)) calculateElevationBasedOnPointListWithDouble:lat withDouble:lon withPointList:pointList];
      [nodeAccess setNodeWithInt:innerNodeId withDouble:lat withDouble:lon withDouble:ele];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderDemNodeElevationInterpolator)
