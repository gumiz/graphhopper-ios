//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/dem/AbstractEdgeElevationInterpolator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/coll/GHBitSet.h"
#include "com/graphhopper/coll/GHBitSetImpl.h"
#include "com/graphhopper/reader/dem/AbstractEdgeElevationInterpolator.h"
#include "com/graphhopper/reader/dem/ElevationInterpolator.h"
#include "com/graphhopper/reader/dem/NodeElevationInterpolator.h"
#include "com/graphhopper/routing/util/AllEdgesIterator.h"
#include "com/graphhopper/routing/util/DataFlagEncoder.h"
#include "com/graphhopper/storage/GraphHopperStorage.h"
#include "com/graphhopper/storage/NodeAccess.h"
#include "com/graphhopper/util/BreadthFirstSearch.h"
#include "com/graphhopper/util/EdgeExplorer.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/PointList.h"
#include "gnu/trove/set/TIntSet.h"
#include "gnu/trove/set/hash/TIntHashSet.h"

__attribute__((unused)) static void ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateElevationsOfTowerNodes(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *self);
__attribute__((unused)) static void ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateEdgeWithEdgeIteratorState_withGHBitSet_withEdgeExplorer_withInt_(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *self, id<EdgeIteratorState> interpolatableEdge, id<GHBitSet> visitedEdgeIds, id<EdgeExplorer> edgeExplorer, jint edgeId);
__attribute__((unused)) static void ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateElevationsOfPillarNodes(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *self);

@interface ComGraphhopperReaderDemAbstractEdgeElevationInterpolator () {
 @public
  GraphHopperStorage *storage_;
  ComGraphhopperReaderDemNodeElevationInterpolator *nodeElevationInterpolator_;
  ComGraphhopperReaderDemElevationInterpolator *elevationInterpolator_;
}

- (void)interpolateElevationsOfTowerNodes;

- (void)interpolateEdgeWithEdgeIteratorState:(id<EdgeIteratorState>)interpolatableEdge
                                withGHBitSet:(id<GHBitSet>)visitedEdgeIds
                            withEdgeExplorer:(id<EdgeExplorer>)edgeExplorer
                                     withInt:(jint)edgeId;

- (void)interpolateElevationsOfPillarNodes;
@end

J2OBJC_FIELD_SETTER(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator, storage_, GraphHopperStorage *)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator, nodeElevationInterpolator_, ComGraphhopperReaderDemNodeElevationInterpolator *)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator, elevationInterpolator_, ComGraphhopperReaderDemElevationInterpolator *)

@interface ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1 () {
 @public
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *this$0_;
  id<GHBitSet> val$visitedEdgesIds_;
  id<GnuTroveSetTIntSet> val$innerNodeIds_;
  id<GnuTroveSetTIntSet> val$outerNodeIds_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1, this$0_, ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1, val$visitedEdgesIds_, id<GHBitSet>)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1, val$innerNodeIds_, id<GnuTroveSetTIntSet>)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1, val$outerNodeIds_, id<GnuTroveSetTIntSet>)

@implementation ComGraphhopperReaderDemAbstractEdgeElevationInterpolator

- (instancetype)initWithGraphHopperStorage:(GraphHopperStorage *)storage
                       withDataFlagEncoder:(DataFlagEncoder *)dataFlagEncoder {
  if (self = [super init]) {
    ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_setAndConsume_elevationInterpolator_(self, [[ComGraphhopperReaderDemElevationInterpolator alloc] init]);
    ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_set_storage_(self, storage);
    ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_set_dataFlagEncoder_(self, dataFlagEncoder);
    ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_setAndConsume_nodeElevationInterpolator_(self, [[ComGraphhopperReaderDemNodeElevationInterpolator alloc] initWithGraphHopperStorage:storage]);
  }
  return self;
}

- (jboolean)isInterpolatableEdgeWithEdgeIteratorState:(id<EdgeIteratorState>)edge {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GraphHopperStorage *)getStorage {
  return storage_;
}

- (void)execute {
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateElevationsOfTowerNodes(self);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateElevationsOfPillarNodes(self);
}

- (void)interpolateElevationsOfTowerNodes {
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateElevationsOfTowerNodes(self);
}

- (void)interpolateEdgeWithEdgeIteratorState:(id<EdgeIteratorState>)interpolatableEdge
                                withGHBitSet:(id<GHBitSet>)visitedEdgeIds
                            withEdgeExplorer:(id<EdgeExplorer>)edgeExplorer
                                     withInt:(jint)edgeId {
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateEdgeWithEdgeIteratorState_withGHBitSet_withEdgeExplorer_withInt_(self, interpolatableEdge, visitedEdgeIds, edgeExplorer, edgeId);
}

- (void)gatherOuterAndInnerNodeIdsWithEdgeExplorer:(id<EdgeExplorer>)edgeExplorer
                             withEdgeIteratorState:(id<EdgeIteratorState>)interpolatableEdge
                                      withGHBitSet:(id<GHBitSet>)visitedEdgesIds
                            withGnuTroveSetTIntSet:(id<GnuTroveSetTIntSet>)outerNodeIds
                            withGnuTroveSetTIntSet:(id<GnuTroveSetTIntSet>)innerNodeIds {
  BreadthFirstSearch *gatherOuterAndInnerNodeIdsSearch = [[[ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1 alloc] initWithComGraphhopperReaderDemAbstractEdgeElevationInterpolator:self withGHBitSet:visitedEdgesIds withGnuTroveSetTIntSet:innerNodeIds withGnuTroveSetTIntSet:outerNodeIds] autorelease];
  [gatherOuterAndInnerNodeIdsSearch startWithEdgeExplorer:edgeExplorer withInt:[((id<EdgeIteratorState>) nil_chk(interpolatableEdge)) getBaseNode]];
}

- (void)interpolateElevationsOfPillarNodes {
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateElevationsOfPillarNodes(self);
}

- (void)dealloc {
  RELEASE_(storage_);
  RELEASE_(dataFlagEncoder_);
  RELEASE_(nodeElevationInterpolator_);
  RELEASE_(elevationInterpolator_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_set_storage_(other, storage_);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_set_dataFlagEncoder_(other, dataFlagEncoder_);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_set_nodeElevationInterpolator_(other, nodeElevationInterpolator_);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_set_elevationInterpolator_(other, elevationInterpolator_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraphHopperStorage:withDataFlagEncoder:", "AbstractEdgeElevationInterpolator", NULL, 0x1, NULL },
    { "isInterpolatableEdgeWithEdgeIteratorState:", "isInterpolatableEdge", "Z", 0x404, NULL },
    { "getStorage", NULL, "Lcom.graphhopper.storage.GraphHopperStorage;", 0x1, NULL },
    { "execute", NULL, "V", 0x1, NULL },
    { "interpolateElevationsOfTowerNodes", NULL, "V", 0x2, NULL },
    { "interpolateEdgeWithEdgeIteratorState:withGHBitSet:withEdgeExplorer:withInt:", "interpolateEdge", "V", 0x2, NULL },
    { "gatherOuterAndInnerNodeIdsWithEdgeExplorer:withEdgeIteratorState:withGHBitSet:withGnuTroveSetTIntSet:withGnuTroveSetTIntSet:", "gatherOuterAndInnerNodeIds", "V", 0x1, NULL },
    { "interpolateElevationsOfPillarNodes", NULL, "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "storage_", NULL, 0x12, "Lcom.graphhopper.storage.GraphHopperStorage;", NULL,  },
    { "dataFlagEncoder_", NULL, 0x14, "Lcom.graphhopper.routing.util.DataFlagEncoder;", NULL,  },
    { "nodeElevationInterpolator_", NULL, 0x12, "Lcom.graphhopper.reader.dem.NodeElevationInterpolator;", NULL,  },
    { "elevationInterpolator_", NULL, 0x12, "Lcom.graphhopper.reader.dem.ElevationInterpolator;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderDemAbstractEdgeElevationInterpolator = { 1, "AbstractEdgeElevationInterpolator", "com.graphhopper.reader.dem", NULL, 0x401, 8, methods, 4, fields, 0, NULL};
  return &_ComGraphhopperReaderDemAbstractEdgeElevationInterpolator;
}

@end

void ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateElevationsOfTowerNodes(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *self) {
  id<AllEdgesIterator> edge = [((GraphHopperStorage *) nil_chk(self->storage_)) getAllEdges];
  id<GHBitSet> visitedEdgeIds = [[[GHBitSetImpl alloc] initWithInt:[((id<AllEdgesIterator>) nil_chk(edge)) getMaxId]] autorelease];
  id<EdgeExplorer> edgeExplorer = [self->storage_ createEdgeExplorer];
  while ([edge next]) {
    jint edgeId = [edge getEdge];
    if ([self isInterpolatableEdgeWithEdgeIteratorState:edge]) {
      if (![visitedEdgeIds containsWithInt:edgeId]) {
        ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateEdgeWithEdgeIteratorState_withGHBitSet_withEdgeExplorer_withInt_(self, edge, visitedEdgeIds, edgeExplorer, edgeId);
      }
    }
    [visitedEdgeIds addWithInt:edgeId];
  }
}

void ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateEdgeWithEdgeIteratorState_withGHBitSet_withEdgeExplorer_withInt_(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *self, id<EdgeIteratorState> interpolatableEdge, id<GHBitSet> visitedEdgeIds, id<EdgeExplorer> edgeExplorer, jint edgeId) {
  id<GnuTroveSetTIntSet> outerNodeIds = [[[GnuTroveSetHashTIntHashSet alloc] init] autorelease];
  id<GnuTroveSetTIntSet> innerNodeIds = [[[GnuTroveSetHashTIntHashSet alloc] init] autorelease];
  [self gatherOuterAndInnerNodeIdsWithEdgeExplorer:edgeExplorer withEdgeIteratorState:interpolatableEdge withGHBitSet:visitedEdgeIds withGnuTroveSetTIntSet:outerNodeIds withGnuTroveSetTIntSet:innerNodeIds];
  [((ComGraphhopperReaderDemNodeElevationInterpolator *) nil_chk(self->nodeElevationInterpolator_)) interpolateElevationsOfInnerNodesWithIntArray:[outerNodeIds toArray] withIntArray:[innerNodeIds toArray]];
}

void ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_interpolateElevationsOfPillarNodes(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *self) {
  id<EdgeIterator> edge = [((GraphHopperStorage *) nil_chk(self->storage_)) getAllEdges];
  id<NodeAccess> nodeAccess = [self->storage_ getNodeAccess];
  while ([((id<EdgeIterator>) nil_chk(edge)) next]) {
    if ([self isInterpolatableEdgeWithEdgeIteratorState:edge]) {
      jint firstNodeId = [edge getBaseNode];
      jint secondNodeId = [edge getAdjNode];
      jdouble lat0 = [((id<NodeAccess>) nil_chk(nodeAccess)) getLatWithInt:firstNodeId];
      jdouble lon0 = [nodeAccess getLonWithInt:firstNodeId];
      jdouble ele0 = [nodeAccess getEleWithInt:firstNodeId];
      jdouble lat1 = [nodeAccess getLatWithInt:secondNodeId];
      jdouble lon1 = [nodeAccess getLonWithInt:secondNodeId];
      jdouble ele1 = [nodeAccess getEleWithInt:secondNodeId];
      PointList *pointList = [edge fetchWayGeometryWithInt:0];
      jint count = [((PointList *) nil_chk(pointList)) size];
      for (jint index = 0; index < count; index++) {
        jdouble lat = [pointList getLatWithInt:index];
        jdouble lon = [pointList getLonWithInt:index];
        jdouble ele = [((ComGraphhopperReaderDemElevationInterpolator *) nil_chk(self->elevationInterpolator_)) calculateElevationBasedOnTwoPointsWithDouble:lat withDouble:lon withDouble:lat0 withDouble:lon0 withDouble:ele0 withDouble:lat1 withDouble:lon1 withDouble:ele1];
        [pointList setWithInt:index withDouble:lat withDouble:lon withDouble:ele];
      }
      [edge setWayGeometryWithPointList:pointList];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator)

@implementation ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1

- (jboolean)checkAdjacentWithEdgeIteratorState:(id<EdgeIteratorState>)edge {
  [((id<GHBitSet>) nil_chk(val$visitedEdgesIds_)) addWithInt:[((id<EdgeIteratorState>) nil_chk(edge)) getEdge]];
  jint baseNodeId = [edge getBaseNode];
  jboolean isInterpolatableEdge = [this$0_ isInterpolatableEdgeWithEdgeIteratorState:edge];
  if (!isInterpolatableEdge) {
    [((id<GnuTroveSetTIntSet>) nil_chk(val$innerNodeIds_)) removeWithInt:baseNodeId];
    [((id<GnuTroveSetTIntSet>) nil_chk(val$outerNodeIds_)) addWithInt:baseNodeId];
  }
  else if (![((id<GnuTroveSetTIntSet>) nil_chk(val$outerNodeIds_)) containsWithInt:baseNodeId]) {
    [((id<GnuTroveSetTIntSet>) nil_chk(val$innerNodeIds_)) addWithInt:baseNodeId];
  }
  return isInterpolatableEdge;
}

- (instancetype)initWithComGraphhopperReaderDemAbstractEdgeElevationInterpolator:(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator *)outer$
                                                                    withGHBitSet:(id<GHBitSet>)capture$0
                                                          withGnuTroveSetTIntSet:(id<GnuTroveSetTIntSet>)capture$1
                                                          withGnuTroveSetTIntSet:(id<GnuTroveSetTIntSet>)capture$2 {
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1_set_this$0_(self, outer$);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1_set_val$visitedEdgesIds_(self, capture$0);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1_set_val$innerNodeIds_(self, capture$1);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1_set_val$outerNodeIds_(self, capture$2);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$visitedEdgesIds_);
  RELEASE_(val$innerNodeIds_);
  RELEASE_(val$outerNodeIds_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1 *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1_set_this$0_(other, this$0_);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1_set_val$visitedEdgesIds_(other, val$visitedEdgesIds_);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1_set_val$innerNodeIds_(other, val$innerNodeIds_);
  ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1_set_val$outerNodeIds_(other, val$outerNodeIds_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkAdjacentWithEdgeIteratorState:", "checkAdjacent", "Z", 0x4, NULL },
    { "initWithComGraphhopperReaderDemAbstractEdgeElevationInterpolator:withGHBitSet:withGnuTroveSetTIntSet:withGnuTroveSetTIntSet:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.graphhopper.reader.dem.AbstractEdgeElevationInterpolator;", NULL,  },
    { "val$visitedEdgesIds_", NULL, 0x1012, "Lcom.graphhopper.coll.GHBitSet;", NULL,  },
    { "val$innerNodeIds_", NULL, 0x1012, "Lgnu.trove.set.TIntSet;", NULL,  },
    { "val$outerNodeIds_", NULL, 0x1012, "Lgnu.trove.set.TIntSet;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1 = { 1, "$1", "com.graphhopper.reader.dem", "AbstractEdgeElevationInterpolator", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderDemAbstractEdgeElevationInterpolator_$1)
