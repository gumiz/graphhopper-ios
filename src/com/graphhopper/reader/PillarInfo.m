//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/PillarInfo.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/reader/PillarInfo.h"
#include "com/graphhopper/storage/DataAccess.h"
#include "com/graphhopper/storage/Directory.h"
#include "com/graphhopper/util/Helper.h"
#include "java/lang/Double.h"

__attribute__((unused)) static void PillarInfo__setNodeWithInt_withDouble_withDouble_withDouble_(PillarInfo *self, jint nodeId, jdouble lat, jdouble lon, jdouble ele);

@interface PillarInfo () {
 @public
  jboolean enabled3D_;
  id<DataAccess> da_;
  jint rowSizeInBytes_;
  id<Directory> dir_;
}

- (void)_setNodeWithInt:(jint)nodeId
             withDouble:(jdouble)lat
             withDouble:(jdouble)lon
             withDouble:(jdouble)ele;
@end

J2OBJC_FIELD_SETTER(PillarInfo, da_, id<DataAccess>)
J2OBJC_FIELD_SETTER(PillarInfo, dir_, id<Directory>)

@implementation PillarInfo

- (instancetype)initWithBoolean:(jboolean)enabled3D
                  withDirectory:(id<Directory>)dir {
  if (self = [super init]) {
    self->enabled3D_ = enabled3D;
    PillarInfo_set_dir_(self, dir);
    PillarInfo_set_da_(self, [((id<DataAccess>) nil_chk([((id<Directory>) nil_chk(dir)) findWithNSString:@"tmp_pillar_info"])) createWithLong:100]);
    self->rowSizeInBytes_ = [self getDimension] * 4;
  }
  return self;
}

- (jboolean)is3D {
  return enabled3D_;
}

- (jint)getDimension {
  return enabled3D_ ? 3 : 2;
}

- (void)ensureNodeWithInt:(jint)nodeId {
  jlong tmp = (jlong) nodeId * rowSizeInBytes_;
  [((id<DataAccess>) nil_chk(da_)) ensureCapacityWithLong:tmp + rowSizeInBytes_];
}

- (void)setNodeWithInt:(jint)nodeId
            withDouble:(jdouble)lat
            withDouble:(jdouble)lon {
  PillarInfo__setNodeWithInt_withDouble_withDouble_withDouble_(self, nodeId, lat, lon, JavaLangDouble_NaN);
}

- (void)setNodeWithInt:(jint)nodeId
            withDouble:(jdouble)lat
            withDouble:(jdouble)lon
            withDouble:(jdouble)ele {
  PillarInfo__setNodeWithInt_withDouble_withDouble_withDouble_(self, nodeId, lat, lon, ele);
}

- (void)_setNodeWithInt:(jint)nodeId
             withDouble:(jdouble)lat
             withDouble:(jdouble)lon
             withDouble:(jdouble)ele {
  PillarInfo__setNodeWithInt_withDouble_withDouble_withDouble_(self, nodeId, lat, lon, ele);
}

- (jdouble)getLatitudeWithInt:(jint)id_ {
  jint intVal = [((id<DataAccess>) nil_chk(da_)) getIntWithLong:(jlong) id_ * rowSizeInBytes_ + PillarInfo_LAT];
  return Helper_intToDegreeWithInt_(intVal);
}

- (jdouble)getLatWithInt:(jint)id_ {
  return [self getLatitudeWithInt:id_];
}

- (jdouble)getLongitudeWithInt:(jint)id_ {
  jint intVal = [((id<DataAccess>) nil_chk(da_)) getIntWithLong:(jlong) id_ * rowSizeInBytes_ + PillarInfo_LON];
  return Helper_intToDegreeWithInt_(intVal);
}

- (jdouble)getLonWithInt:(jint)id_ {
  return [self getLongitudeWithInt:id_];
}

- (jdouble)getElevationWithInt:(jint)id_ {
  if (![self is3D]) return JavaLangDouble_NaN;
  jint intVal = [((id<DataAccess>) nil_chk(da_)) getIntWithLong:(jlong) id_ * rowSizeInBytes_ + PillarInfo_ELE];
  return Helper_intToEleWithInt_(intVal);
}

- (jdouble)getEleWithInt:(jint)id_ {
  return [self getElevationWithInt:id_];
}

- (void)clear {
  [((id<Directory>) nil_chk(dir_)) removeWithDataAccess:da_];
}

- (void)dealloc {
  RELEASE_(da_);
  RELEASE_(dir_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(PillarInfo *)other {
  [super copyAllFieldsTo:other];
  other->enabled3D_ = enabled3D_;
  PillarInfo_set_da_(other, da_);
  other->rowSizeInBytes_ = rowSizeInBytes_;
  PillarInfo_set_dir_(other, dir_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withDirectory:", "PillarInfo", NULL, 0x1, NULL },
    { "is3D", NULL, "Z", 0x1, NULL },
    { "getDimension", NULL, "I", 0x1, NULL },
    { "ensureNodeWithInt:", "ensureNode", "V", 0x1, NULL },
    { "setNodeWithInt:withDouble:withDouble:", "setNode", "V", 0x1, NULL },
    { "setNodeWithInt:withDouble:withDouble:withDouble:", "setNode", "V", 0x1, NULL },
    { "_setNodeWithInt:withDouble:withDouble:withDouble:", "_setNode", "V", 0x2, NULL },
    { "getLatitudeWithInt:", "getLatitude", "D", 0x1, NULL },
    { "getLatWithInt:", "getLat", "D", 0x1, NULL },
    { "getLongitudeWithInt:", "getLongitude", "D", 0x1, NULL },
    { "getLonWithInt:", "getLon", "D", 0x1, NULL },
    { "getElevationWithInt:", "getElevation", "D", 0x1, NULL },
    { "getEleWithInt:", "getEle", "D", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LAT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = PillarInfo_LAT },
    { "LON_", NULL, 0x1a, "I", NULL, .constantValue.asInt = PillarInfo_LON },
    { "ELE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = PillarInfo_ELE },
    { "enabled3D_", NULL, 0x12, "Z", NULL,  },
    { "da_", NULL, 0x12, "Lcom.graphhopper.storage.DataAccess;", NULL,  },
    { "rowSizeInBytes_", NULL, 0x12, "I", NULL,  },
    { "dir_", NULL, 0x12, "Lcom.graphhopper.storage.Directory;", NULL,  },
  };
  static const J2ObjcClassInfo _PillarInfo = { 1, "PillarInfo", "com.graphhopper.reader", NULL, 0x1, 14, methods, 7, fields, 0, NULL};
  return &_PillarInfo;
}

@end

void PillarInfo__setNodeWithInt_withDouble_withDouble_withDouble_(PillarInfo *self, jint nodeId, jdouble lat, jdouble lon, jdouble ele) {
  [self ensureNodeWithInt:nodeId];
  jlong tmp = (jlong) nodeId * self->rowSizeInBytes_;
  [((id<DataAccess>) nil_chk(self->da_)) setIntWithLong:tmp + PillarInfo_LAT withInt:Helper_degreeToIntWithDouble_(lat)];
  [self->da_ setIntWithLong:tmp + PillarInfo_LON withInt:Helper_degreeToIntWithDouble_(lon)];
  if ([self is3D]) [self->da_ setIntWithLong:tmp + PillarInfo_ELE withInt:Helper_eleToIntWithDouble_(ele)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PillarInfo)
