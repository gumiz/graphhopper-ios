//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/ReaderNode.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/reader/ReaderElement.h"
#include "com/graphhopper/reader/ReaderNode.h"
#include "com/graphhopper/util/PointAccess.h"
#include "java/lang/Double.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Map.h"

@interface ReaderNode () {
 @public
  jdouble lat_;
  jdouble lon_;
}
@end

@implementation ReaderNode

- (instancetype)initWithLong:(jlong)id_
             withPointAccess:(id<PointAccess>)pointAccess
                     withInt:(jint)accessId {
  if (self = [super initWithLong:id_ withInt:ReaderElement_NODE]) {
    self->lat_ = [((id<PointAccess>) nil_chk(pointAccess)) getLatitudeWithInt:accessId];
    self->lon_ = [pointAccess getLongitudeWithInt:accessId];
    if ([pointAccess is3D]) [self setTagWithNSString:@"ele" withId:JavaLangDouble_valueOfWithDouble_([pointAccess getElevationWithInt:accessId])];
  }
  return self;
}

- (instancetype)initWithLong:(jlong)id_
                  withDouble:(jdouble)lat
                  withDouble:(jdouble)lon {
  if (self = [super initWithLong:id_ withInt:ReaderElement_NODE]) {
    self->lat_ = lat;
    self->lon_ = lon;
  }
  return self;
}

- (jdouble)getLat {
  return lat_;
}

- (jdouble)getLon {
  return lon_;
}

- (jdouble)getEle {
  id ele = [((id<JavaUtilMap>) nil_chk([self getTags])) getWithId:@"ele"];
  if (ele == nil) return JavaLangDouble_NaN;
  return [((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast(ele, [JavaLangDouble class]))) doubleValue];
}

- (void)setTagWithNSString:(NSString *)name
                    withId:(id)value {
  if ([@"ele" isEqual:name]) {
    if (value == nil) value = nil;
    else if ([value isKindOfClass:[NSString class]]) {
      NSString *str = (NSString *) check_class_cast(value, [NSString class]);
      str = [((NSString *) nil_chk([str trim])) replaceAll:@"\\," withReplacement:@"."];
      if ([((NSString *) nil_chk(str)) isEmpty]) value = nil;
      else @try {
        value = JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_(str));
      }
      @catch (JavaLangNumberFormatException *ex) {
        return;
      }
    }
    else value = JavaLangDouble_valueOfWithDouble_([((NSNumber *) check_class_cast(value, [NSNumber class])) doubleValue]);
  }
  [super setTagWithNSString:name withId:value];
}

- (NSString *)description {
  JavaLangStringBuilder *txt = [[[JavaLangStringBuilder alloc] init] autorelease];
  [txt appendWithNSString:@"Node: "];
  [txt appendWithLong:[self getId]];
  [txt appendWithNSString:@" lat="];
  [txt appendWithDouble:[self getLat]];
  [txt appendWithNSString:@" lon="];
  [txt appendWithDouble:[self getLon]];
  if (![((id<JavaUtilMap>) nil_chk([self getTags])) isEmpty]) {
    [txt appendWithNSString:@"\n"];
    [txt appendWithNSString:[self tagsToString]];
  }
  return [txt description];
}

- (void)copyAllFieldsTo:(ReaderNode *)other {
  [super copyAllFieldsTo:other];
  other->lat_ = lat_;
  other->lon_ = lon_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:withPointAccess:withInt:", "ReaderNode", NULL, 0x1, NULL },
    { "initWithLong:withDouble:withDouble:", "ReaderNode", NULL, 0x1, NULL },
    { "getLat", NULL, "D", 0x1, NULL },
    { "getLon", NULL, "D", 0x1, NULL },
    { "getEle", NULL, "D", 0x1, NULL },
    { "setTagWithNSString:withId:", "setTag", "V", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lat_", NULL, 0x12, "D", NULL,  },
    { "lon_", NULL, 0x12, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ReaderNode = { 1, "ReaderNode", "com.graphhopper.reader", NULL, 0x1, 7, methods, 2, fields, 0, NULL};
  return &_ReaderNode;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ReaderNode)
