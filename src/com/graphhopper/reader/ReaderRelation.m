//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/ReaderRelation.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/reader/ReaderElement.h"
#include "com/graphhopper/reader/ReaderRelation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ReaderRelation_Member () {
 @public
  jint type_;
  jlong ref_;
  NSString *role_;
}
@end

J2OBJC_FIELD_SETTER(ReaderRelation_Member, role_, NSString *)

@implementation ReaderRelation

- (instancetype)initWithLong:(jlong)id_ {
  if (self = [super initWithLong:id_ withInt:ReaderElement_RELATION]) {
    ReaderRelation_setAndConsume_members_(self, [[JavaUtilArrayList alloc] initWithInt:5]);
  }
  return self;
}

- (NSString *)description {
  return JreStrcat("$J$I$", @"Relation (", [self getId], @", ", [((id<JavaUtilList>) nil_chk(members_)) size], @" members)");
}

- (id<JavaUtilList>)getMembers {
  return members_;
}

- (jboolean)isMetaRelation {
  for (ReaderRelation_Member * __strong member in nil_chk(members_)) {
    if ([((ReaderRelation_Member *) nil_chk(member)) getType] == ReaderElement_RELATION) {
      return YES;
    }
  }
  return NO;
}

- (jboolean)isMixedRelation {
  jboolean hasRel = NO;
  jboolean hasOther = NO;
  for (ReaderRelation_Member * __strong member in nil_chk(members_)) {
    if ([((ReaderRelation_Member *) nil_chk(member)) getType] == ReaderElement_RELATION) hasRel = YES;
    else hasOther = YES;
    if (hasRel && hasOther) return YES;
  }
  return NO;
}

- (void)removeRelations {
  for (jint i = [((id<JavaUtilList>) nil_chk(members_)) size] - 1; i >= 0; i--) {
    if ([((ReaderRelation_Member *) nil_chk([members_ getWithInt:i])) getType] == ReaderElement_RELATION) [members_ removeWithInt:i];
  }
}

- (void)addWithReaderRelation_Member:(ReaderRelation_Member *)member {
  [((id<JavaUtilList>) nil_chk(members_)) addWithId:member];
}

- (void)dealloc {
  RELEASE_(members_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ReaderRelation *)other {
  [super copyAllFieldsTo:other];
  ReaderRelation_set_members_(other, members_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithLong:", "ReaderRelation", NULL, 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getMembers", NULL, "Ljava.util.List;", 0x1, NULL },
    { "isMetaRelation", NULL, "Z", 0x1, NULL },
    { "isMixedRelation", NULL, "Z", 0x1, NULL },
    { "removeRelations", NULL, "V", 0x1, NULL },
    { "addWithReaderRelation_Member:", "add", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "members_", NULL, 0x14, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ReaderRelation = { 1, "ReaderRelation", "com.graphhopper.reader", NULL, 0x1, 7, methods, 1, fields, 0, NULL};
  return &_ReaderRelation;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ReaderRelation)

@implementation ReaderRelation_Member

- (instancetype)initWithReaderRelation_Member:(ReaderRelation_Member *)input {
  if (self = [super init]) {
    type_ = ((ReaderRelation_Member *) nil_chk(input))->type_;
    ref_ = input->ref_;
    ReaderRelation_Member_set_role_(self, input->role_);
  }
  return self;
}

- (instancetype)initWithInt:(jint)type
                   withLong:(jlong)ref
               withNSString:(NSString *)role {
  if (self = [super init]) {
    self->type_ = type;
    self->ref_ = ref;
    ReaderRelation_Member_set_role_(self, role);
  }
  return self;
}

- (NSString *)description {
  return JreStrcat("$ICJ", @"Member ", type_, ':', ref_);
}

- (jint)getType {
  return type_;
}

- (jlong)getRef {
  return ref_;
}

- (NSString *)getRole {
  return role_;
}

- (void)dealloc {
  RELEASE_(role_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ReaderRelation_Member *)other {
  [super copyAllFieldsTo:other];
  other->type_ = type_;
  other->ref_ = ref_;
  ReaderRelation_Member_set_role_(other, role_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithReaderRelation_Member:", "Member", NULL, 0x1, NULL },
    { "initWithInt:withLong:withNSString:", "Member", NULL, 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getType", NULL, "I", 0x1, NULL },
    { "getRef", NULL, "J", 0x1, NULL },
    { "getRole", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ReaderRelation_Member_NODE },
    { "WAY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ReaderRelation_Member_WAY },
    { "RELATION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ReaderRelation_Member_RELATION },
    { "type_", NULL, 0x12, "I", NULL,  },
    { "ref_", NULL, 0x12, "J", NULL,  },
    { "role_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ReaderRelation_Member = { 1, "Member", "com.graphhopper.reader", "ReaderRelation", 0x9, 6, methods, 6, fields, 0, NULL};
  return &_ReaderRelation_Member;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ReaderRelation_Member)
