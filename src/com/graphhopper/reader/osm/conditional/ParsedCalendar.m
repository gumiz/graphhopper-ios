//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/osm/conditional/ParsedCalendar.h"
#include "com/graphhopper/util/Helper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/DateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"

@implementation ComGraphhopperReaderOsmConditionalParsedCalendar

- (instancetype)initWithComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum:(ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum *)parseType
                                                                  withJavaUtilCalendar:(JavaUtilCalendar *)parsedCalendar {
  if (self = [super init]) {
    ComGraphhopperReaderOsmConditionalParsedCalendar_set_parseType_(self, parseType);
    ComGraphhopperReaderOsmConditionalParsedCalendar_set_parsedCalendar_(self, parsedCalendar);
  }
  return self;
}

- (jboolean)isYearless {
  return parseType_ == ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_MONTH() || parseType_ == ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_MONTH_DAY();
}

- (jboolean)isDayless {
  return parseType_ == ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_MONTH() || parseType_ == ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_YEAR_MONTH();
}

- (jboolean)isDayOnly {
  return parseType_ == ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_DAY();
}

- (JavaUtilCalendar *)getMax {
  if ([self isDayless]) {
    [parsedCalendar_ setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:[((JavaUtilCalendar *) nil_chk(parsedCalendar_)) getActualMaximumWithInt:JavaUtilCalendar_DAY_OF_MONTH]];
  }
  [parsedCalendar_ setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:[((JavaUtilCalendar *) nil_chk(parsedCalendar_)) getActualMaximumWithInt:JavaUtilCalendar_HOUR_OF_DAY]];
  [parsedCalendar_ setWithInt:JavaUtilCalendar_MINUTE withInt:[parsedCalendar_ getActualMaximumWithInt:JavaUtilCalendar_MINUTE]];
  [parsedCalendar_ setWithInt:JavaUtilCalendar_SECOND withInt:[parsedCalendar_ getActualMaximumWithInt:JavaUtilCalendar_SECOND]];
  [parsedCalendar_ setWithInt:JavaUtilCalendar_MILLISECOND withInt:[parsedCalendar_ getActualMaximumWithInt:JavaUtilCalendar_MILLISECOND]];
  return parsedCalendar_;
}

- (JavaUtilCalendar *)getMin {
  if ([self isDayless]) {
    [parsedCalendar_ setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:[((JavaUtilCalendar *) nil_chk(parsedCalendar_)) getActualMinimumWithInt:JavaUtilCalendar_DAY_OF_MONTH]];
  }
  [parsedCalendar_ setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:[((JavaUtilCalendar *) nil_chk(parsedCalendar_)) getActualMinimumWithInt:JavaUtilCalendar_HOUR_OF_DAY]];
  [parsedCalendar_ setWithInt:JavaUtilCalendar_MINUTE withInt:[parsedCalendar_ getActualMinimumWithInt:JavaUtilCalendar_MINUTE]];
  [parsedCalendar_ setWithInt:JavaUtilCalendar_SECOND withInt:[parsedCalendar_ getActualMinimumWithInt:JavaUtilCalendar_SECOND]];
  [parsedCalendar_ setWithInt:JavaUtilCalendar_MILLISECOND withInt:[parsedCalendar_ getActualMinimumWithInt:JavaUtilCalendar_MILLISECOND]];
  return parsedCalendar_;
}

- (NSString *)description {
  return JreStrcat("@$$", parseType_, @"; ", [((JavaTextDateFormat *) nil_chk(Helper_createFormatter())) formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(parsedCalendar_)) getTime]]);
}

- (void)dealloc {
  RELEASE_(parseType_);
  RELEASE_(parsedCalendar_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperReaderOsmConditionalParsedCalendar *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperReaderOsmConditionalParsedCalendar_set_parseType_(other, parseType_);
  ComGraphhopperReaderOsmConditionalParsedCalendar_set_parsedCalendar_(other, parsedCalendar_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum:withJavaUtilCalendar:", "ParsedCalendar", NULL, 0x1, NULL },
    { "isYearless", NULL, "Z", 0x1, NULL },
    { "isDayless", NULL, "Z", 0x1, NULL },
    { "isDayOnly", NULL, "Z", 0x1, NULL },
    { "getMax", NULL, "Ljava.util.Calendar;", 0x1, NULL },
    { "getMin", NULL, "Ljava.util.Calendar;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parseType_", NULL, 0x11, "Lcom.graphhopper.reader.osm.conditional.ParsedCalendar$ParseType;", NULL,  },
    { "parsedCalendar_", NULL, 0x11, "Ljava.util.Calendar;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderOsmConditionalParsedCalendar = { 1, "ParsedCalendar", "com.graphhopper.reader.osm.conditional", NULL, 0x1, 7, methods, 2, fields, 0, NULL};
  return &_ComGraphhopperReaderOsmConditionalParsedCalendar;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderOsmConditionalParsedCalendar)

BOOL ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_initialized = NO;

ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum *ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_values_[5];

@implementation ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

IOSObjectArray *ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_values() {
  ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_init();
  return [IOSObjectArray arrayWithObjects:ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_values_ count:5 type:ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_class_()];
}
+ (IOSObjectArray *)values {
  return ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_values();
}

+ (ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum *)valueOfWithNSString:(NSString *)name {
  return ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_valueOfWithNSString_(name);
}

ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum *ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_valueOfWithNSString_(NSString *name) {
  ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_init();
  for (int i = 0; i < 5; i++) {
    ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum *e = ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum class]) {
    ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_YEAR_MONTH_DAY = [[ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum alloc] initWithNSString:@"YEAR_MONTH_DAY" withInt:0];
    ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_YEAR_MONTH = [[ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum alloc] initWithNSString:@"YEAR_MONTH" withInt:1];
    ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_MONTH_DAY = [[ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum alloc] initWithNSString:@"MONTH_DAY" withInt:2];
    ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_MONTH = [[ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum alloc] initWithNSString:@"MONTH" withInt:3];
    ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_DAY = [[ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum alloc] initWithNSString:@"DAY" withInt:4];
    J2OBJC_SET_INITIALIZED(ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "init", NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "YEAR_MONTH_DAY", "YEAR_MONTH_DAY", 0x4019, "Lcom.graphhopper.reader.osm.conditional.ParsedCalendar$ParseType;", &ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_YEAR_MONTH_DAY,  },
    { "YEAR_MONTH", "YEAR_MONTH", 0x4019, "Lcom.graphhopper.reader.osm.conditional.ParsedCalendar$ParseType;", &ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_YEAR_MONTH,  },
    { "MONTH_DAY", "MONTH_DAY", 0x4019, "Lcom.graphhopper.reader.osm.conditional.ParsedCalendar$ParseType;", &ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_MONTH_DAY,  },
    { "MONTH", "MONTH", 0x4019, "Lcom.graphhopper.reader.osm.conditional.ParsedCalendar$ParseType;", &ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_MONTH,  },
    { "DAY", "DAY", 0x4019, "Lcom.graphhopper.reader.osm.conditional.ParsedCalendar$ParseType;", &ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_DAY,  },
  };
  static const char *superclass_type_args[] = {"Lcom.graphhopper.reader.osm.conditional.ParsedCalendar$ParseType;"};
  static const J2ObjcClassInfo _ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum = { 1, "ParseType", "com.graphhopper.reader.osm.conditional", "ParsedCalendar", 0x4019, 1, methods, 5, fields, 1, superclass_type_args};
  return &_ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum)
