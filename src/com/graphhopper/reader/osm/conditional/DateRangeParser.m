//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/osm/conditional/DateRange.h"
#include "com/graphhopper/reader/osm/conditional/DateRangeParser.h"
#include "com/graphhopper/reader/osm/conditional/ParsedCalendar.h"
#include "com/graphhopper/util/Helper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/util/Arrays.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"

@interface ComGraphhopperReaderOsmConditionalDateRangeParser () {
}
@end

BOOL ComGraphhopperReaderOsmConditionalDateRangeParser_initialized = NO;

@implementation ComGraphhopperReaderOsmConditionalDateRangeParser

JavaTextDateFormat * ComGraphhopperReaderOsmConditionalDateRangeParser_YEAR_MONTH_DAY_DF_;
JavaTextDateFormat * ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DAY_DF_;
JavaTextDateFormat * ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DAY2_DF_;
JavaTextDateFormat * ComGraphhopperReaderOsmConditionalDateRangeParser_YEAR_MONTH_DF_;
JavaTextDateFormat * ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DF_;
id<JavaUtilList> ComGraphhopperReaderOsmConditionalDateRangeParser_DAY_NAMES_;

+ (JavaUtilCalendar *)createCalendar {
  return ComGraphhopperReaderOsmConditionalDateRangeParser_createCalendar();
}

+ (ComGraphhopperReaderOsmConditionalParsedCalendar *)parseDateStringWithNSString:(NSString *)dateString {
  return ComGraphhopperReaderOsmConditionalDateRangeParser_parseDateStringWithNSString_(dateString);
}

+ (ComGraphhopperReaderOsmConditionalDateRange *)parseDateRangeWithNSString:(NSString *)dateRangeString {
  return ComGraphhopperReaderOsmConditionalDateRangeParser_parseDateRangeWithNSString_(dateRangeString);
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComGraphhopperReaderOsmConditionalDateRangeParser class]) {
    JreStrongAssign(&ComGraphhopperReaderOsmConditionalDateRangeParser_YEAR_MONTH_DAY_DF_, nil, Helper_createFormatterWithNSString_(@"yyyy MMM dd"));
    JreStrongAssign(&ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DAY_DF_, nil, Helper_createFormatterWithNSString_(@"MMM dd"));
    JreStrongAssign(&ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DAY2_DF_, nil, Helper_createFormatterWithNSString_(@"dd.MM"));
    JreStrongAssign(&ComGraphhopperReaderOsmConditionalDateRangeParser_YEAR_MONTH_DF_, nil, Helper_createFormatterWithNSString_(@"yyyy MMM"));
    JreStrongAssign(&ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DF_, nil, Helper_createFormatterWithNSString_(@"MMM"));
    JreStrongAssign(&ComGraphhopperReaderOsmConditionalDateRangeParser_DAY_NAMES_, nil, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"Su", @"Mo", @"Tu", @"We", @"Th", @"Fr", @"Sa" } count:7 type:NSString_class_()]));
    J2OBJC_SET_INITIALIZED(ComGraphhopperReaderOsmConditionalDateRangeParser)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createCalendar", NULL, "Ljava.util.Calendar;", 0x9, NULL },
    { "parseDateStringWithNSString:", "parseDateString", "Lcom.graphhopper.reader.osm.conditional.ParsedCalendar;", 0x8, "Ljava.text.ParseException;" },
    { "parseDateRangeWithNSString:", "parseDateRange", "Lcom.graphhopper.reader.osm.conditional.DateRange;", 0x9, "Ljava.text.ParseException;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "YEAR_MONTH_DAY_DF_", NULL, 0x1a, "Ljava.text.DateFormat;", &ComGraphhopperReaderOsmConditionalDateRangeParser_YEAR_MONTH_DAY_DF_,  },
    { "MONTH_DAY_DF_", NULL, 0x1a, "Ljava.text.DateFormat;", &ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DAY_DF_,  },
    { "MONTH_DAY2_DF_", NULL, 0x1a, "Ljava.text.DateFormat;", &ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DAY2_DF_,  },
    { "YEAR_MONTH_DF_", NULL, 0x1a, "Ljava.text.DateFormat;", &ComGraphhopperReaderOsmConditionalDateRangeParser_YEAR_MONTH_DF_,  },
    { "MONTH_DF_", NULL, 0x1a, "Ljava.text.DateFormat;", &ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DF_,  },
    { "DAY_NAMES_", NULL, 0x1a, "Ljava.util.List;", &ComGraphhopperReaderOsmConditionalDateRangeParser_DAY_NAMES_,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderOsmConditionalDateRangeParser = { 1, "DateRangeParser", "com.graphhopper.reader.osm.conditional", NULL, 0x1, 4, methods, 6, fields, 0, NULL};
  return &_ComGraphhopperReaderOsmConditionalDateRangeParser;
}

@end

JavaUtilCalendar *ComGraphhopperReaderOsmConditionalDateRangeParser_createCalendar() {
  ComGraphhopperReaderOsmConditionalDateRangeParser_init();
  return JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(Helper_get_UTC_(), JavaUtilLocale_get_US_());
}

ComGraphhopperReaderOsmConditionalParsedCalendar *ComGraphhopperReaderOsmConditionalDateRangeParser_parseDateStringWithNSString_(NSString *dateString) {
  ComGraphhopperReaderOsmConditionalDateRangeParser_init();
  dateString = [((NSString *) nil_chk(dateString)) replaceAll:@"(,( )*)?(PH|SH)" withReplacement:@""];
  dateString = [((NSString *) nil_chk(dateString)) trim];
  JavaUtilCalendar *calendar = ComGraphhopperReaderOsmConditionalDateRangeParser_createCalendar();
  ComGraphhopperReaderOsmConditionalParsedCalendar *parsedCalendar;
  @try {
    [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:[((JavaTextDateFormat *) nil_chk(ComGraphhopperReaderOsmConditionalDateRangeParser_YEAR_MONTH_DAY_DF_)) parseWithNSString:dateString]];
    parsedCalendar = [[[ComGraphhopperReaderOsmConditionalParsedCalendar alloc] initWithComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum:ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_YEAR_MONTH_DAY() withJavaUtilCalendar:calendar] autorelease];
  }
  @catch (JavaTextParseException *e1) {
    @try {
      [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:[((JavaTextDateFormat *) nil_chk(ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DAY_DF_)) parseWithNSString:dateString]];
      parsedCalendar = [[[ComGraphhopperReaderOsmConditionalParsedCalendar alloc] initWithComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum:ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_MONTH_DAY() withJavaUtilCalendar:calendar] autorelease];
    }
    @catch (JavaTextParseException *e2) {
      @try {
        [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:[((JavaTextDateFormat *) nil_chk(ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DAY2_DF_)) parseWithNSString:dateString]];
        parsedCalendar = [[[ComGraphhopperReaderOsmConditionalParsedCalendar alloc] initWithComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum:ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_MONTH_DAY() withJavaUtilCalendar:calendar] autorelease];
      }
      @catch (JavaTextParseException *e3) {
        @try {
          [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:[((JavaTextDateFormat *) nil_chk(ComGraphhopperReaderOsmConditionalDateRangeParser_YEAR_MONTH_DF_)) parseWithNSString:dateString]];
          parsedCalendar = [[[ComGraphhopperReaderOsmConditionalParsedCalendar alloc] initWithComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum:ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_YEAR_MONTH() withJavaUtilCalendar:calendar] autorelease];
        }
        @catch (JavaTextParseException *e4) {
          @try {
            [((JavaUtilCalendar *) nil_chk(calendar)) setTimeWithJavaUtilDate:[((JavaTextDateFormat *) nil_chk(ComGraphhopperReaderOsmConditionalDateRangeParser_MONTH_DF_)) parseWithNSString:dateString]];
            parsedCalendar = [[[ComGraphhopperReaderOsmConditionalParsedCalendar alloc] initWithComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum:ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_MONTH() withJavaUtilCalendar:calendar] autorelease];
          }
          @catch (JavaTextParseException *e5) {
            jint index = [((id<JavaUtilList>) nil_chk(ComGraphhopperReaderOsmConditionalDateRangeParser_DAY_NAMES_)) indexOfWithId:dateString];
            if (index < 0) @throw [[[JavaTextParseException alloc] initWithNSString:JreStrcat("$$C", @"Unparseable date: \"", dateString, '"') withInt:0] autorelease];
            [((JavaUtilCalendar *) nil_chk(calendar)) setWithInt:JavaUtilCalendar_DAY_OF_WEEK withInt:index + 1];
            parsedCalendar = [[[ComGraphhopperReaderOsmConditionalParsedCalendar alloc] initWithComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum:ComGraphhopperReaderOsmConditionalParsedCalendar_ParseTypeEnum_get_DAY() withJavaUtilCalendar:calendar] autorelease];
          }
        }
      }
    }
  }
  return parsedCalendar;
}

ComGraphhopperReaderOsmConditionalDateRange *ComGraphhopperReaderOsmConditionalDateRangeParser_parseDateRangeWithNSString_(NSString *dateRangeString) {
  ComGraphhopperReaderOsmConditionalDateRangeParser_init();
  if (dateRangeString == nil || [dateRangeString isEmpty]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Passing empty Strings is not allowed"] autorelease];
  IOSObjectArray *dateArr = [((NSString *) nil_chk(dateRangeString)) split:@"-"];
  if (((IOSObjectArray *) nil_chk(dateArr))->size_ > 2 || dateArr->size_ < 1) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Only Strings containing two Date separated by a '-' or a single Date are allowed"] autorelease];
  ComGraphhopperReaderOsmConditionalParsedCalendar *from = ComGraphhopperReaderOsmConditionalDateRangeParser_parseDateStringWithNSString_(IOSObjectArray_Get(dateArr, 0));
  ComGraphhopperReaderOsmConditionalParsedCalendar *to;
  if (dateArr->size_ == 2) to = ComGraphhopperReaderOsmConditionalDateRangeParser_parseDateStringWithNSString_(IOSObjectArray_Get(dateArr, 1));
  else to = ComGraphhopperReaderOsmConditionalDateRangeParser_parseDateStringWithNSString_(IOSObjectArray_Get(dateArr, 0));
  return [[[ComGraphhopperReaderOsmConditionalDateRange alloc] initWithComGraphhopperReaderOsmConditionalParsedCalendar:from withComGraphhopperReaderOsmConditionalParsedCalendar:to] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderOsmConditionalDateRangeParser)
