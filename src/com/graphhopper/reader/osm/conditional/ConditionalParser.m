//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/osm/conditional/ConditionalParser.h"
#include "com/graphhopper/reader/osm/conditional/DateRange.h"
#include "com/graphhopper/reader/osm/conditional/DateRangeParser.h"
#include "com/graphhopper/reader/osm/conditional/ValueRange.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/text/ParseException.h"
#include "java/util/Set.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface ComGraphhopperReaderOsmConditionalConditionalParser () {
 @public
  id<OrgSlf4jLogger> logger_;
  id<JavaUtilSet> restrictedTags_;
  jboolean enabledLogs_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalConditionalParser, logger_, id<OrgSlf4jLogger>)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalConditionalParser, restrictedTags_, id<JavaUtilSet>)

@interface ComGraphhopperReaderOsmConditionalConditionalParser_$1 () {
 @public
  jdouble val$value_;
  NSString *val$key_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalConditionalParser_$1, val$key_, NSString *)

@interface ComGraphhopperReaderOsmConditionalConditionalParser_$2 () {
 @public
  jdouble val$value_;
  NSString *val$key_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalConditionalParser_$2, val$key_, NSString *)

@implementation ComGraphhopperReaderOsmConditionalConditionalParser

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)restrictedTags {
  return [self initComGraphhopperReaderOsmConditionalConditionalParserWithJavaUtilSet:restrictedTags withBoolean:NO];
}

- (instancetype)initComGraphhopperReaderOsmConditionalConditionalParserWithJavaUtilSet:(id<JavaUtilSet>)restrictedTags
                                                                           withBoolean:(jboolean)enabledLogs {
  if (self = [super init]) {
    ComGraphhopperReaderOsmConditionalConditionalParser_set_logger_(self, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_([self getClass]));
    ComGraphhopperReaderOsmConditionalConditionalParser_set_restrictedTags_(self, restrictedTags);
    self->enabledLogs_ = enabledLogs;
  }
  return self;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)restrictedTags
                        withBoolean:(jboolean)enabledLogs {
  return [self initComGraphhopperReaderOsmConditionalConditionalParserWithJavaUtilSet:restrictedTags withBoolean:enabledLogs];
}

- (id<ComGraphhopperReaderOsmConditionalValueRange>)getRangeWithNSString:(NSString *)conditionalTag {
  if (conditionalTag == nil || [conditionalTag isEmpty] || ![conditionalTag contains:@"@"]) return nil;
  if ([((NSString *) nil_chk(conditionalTag)) contains:@";"]) {
    if (enabledLogs_) [((id<OrgSlf4jLogger>) nil_chk(logger_)) warnWithNSString:JreStrcat("$$", @"We do not support multiple conditions yet: ", conditionalTag)];
    return nil;
  }
  IOSObjectArray *conditionalArr = [conditionalTag split:@"@"];
  if (((IOSObjectArray *) nil_chk(conditionalArr))->size_ != 2) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$$", @"could not split this condition: ", conditionalTag)] autorelease];
  NSString *restrictiveValue = [((NSString *) nil_chk(IOSObjectArray_Get(conditionalArr, 0))) trim];
  if (![((id<JavaUtilSet>) nil_chk(restrictedTags_)) containsWithId:restrictiveValue]) return nil;
  NSString *conditional = IOSObjectArray_Get(conditionalArr, 1);
  conditional = [((NSString *) nil_chk(conditional)) replace:'(' withChar:' '];
  conditional = [((NSString *) nil_chk(conditional)) replace:')' withChar:' '];
  conditional = [((NSString *) nil_chk(conditional)) trim];
  jint index = [((NSString *) nil_chk(conditional)) indexOfString:@">"];
  if (index > 0 && ((jint) [conditional length]) > 2) {
    NSString *key = [((NSString *) nil_chk([conditional substring:0 endIndex:index])) trim];
    if ([conditional charAtWithInt:index + 1] == '=') index++;
    jdouble value = [self parseNumberWithNSString:[conditional substring:index + 1]];
    return [[[ComGraphhopperReaderOsmConditionalConditionalParser_$1 alloc] initWithDouble:value withNSString:key] autorelease];
  }
  index = [conditional indexOfString:@"<"];
  if (index > 0 && ((jint) [conditional length]) > 2) {
    NSString *key = [((NSString *) nil_chk([conditional substring:0 endIndex:index])) trim];
    if ([conditional charAtWithInt:index + 1] == '=') index++;
    jdouble value = [self parseNumberWithNSString:[conditional substring:index + 1]];
    return [[[ComGraphhopperReaderOsmConditionalConditionalParser_$2 alloc] initWithDouble:value withNSString:key] autorelease];
  }
  return ComGraphhopperReaderOsmConditionalDateRangeParser_parseDateRangeWithNSString_(conditional);
}

- (jdouble)parseNumberWithNSString:(NSString *)str {
  jint untilIndex = ((jint) [((NSString *) nil_chk(str)) length]) - 1;
  for (; untilIndex >= 0; untilIndex--) {
    if (JavaLangCharacter_isDigitWithChar_([str charAtWithInt:untilIndex])) break;
  }
  return JavaLangDouble_parseDoubleWithNSString_([str substring:0 endIndex:untilIndex + 1]);
}

- (void)dealloc {
  RELEASE_(logger_);
  RELEASE_(restrictedTags_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperReaderOsmConditionalConditionalParser *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperReaderOsmConditionalConditionalParser_set_logger_(other, logger_);
  ComGraphhopperReaderOsmConditionalConditionalParser_set_restrictedTags_(other, restrictedTags_);
  other->enabledLogs_ = enabledLogs_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilSet:", "ConditionalParser", NULL, 0x1, NULL },
    { "initWithJavaUtilSet:withBoolean:", "ConditionalParser", NULL, 0x1, NULL },
    { "getRangeWithNSString:", "getRange", "Lcom.graphhopper.reader.osm.conditional.ValueRange;", 0x1, "Ljava.text.ParseException;" },
    { "parseNumberWithNSString:", "parseNumber", "D", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger_", NULL, 0x12, "Lorg.slf4j.Logger;", NULL,  },
    { "restrictedTags_", NULL, 0x12, "Ljava.util.Set;", NULL,  },
    { "enabledLogs_", NULL, 0x12, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderOsmConditionalConditionalParser = { 1, "ConditionalParser", "com.graphhopper.reader.osm.conditional", NULL, 0x1, 4, methods, 3, fields, 0, NULL};
  return &_ComGraphhopperReaderOsmConditionalConditionalParser;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderOsmConditionalConditionalParser)

@implementation ComGraphhopperReaderOsmConditionalConditionalParser_$1

- (jboolean)isInRangeWithId:(NSNumber *)obj {
  return [((NSNumber *) nil_chk(obj)) doubleValue] > val$value_;
}

- (NSString *)getKey {
  return val$key_;
}

- (instancetype)initWithDouble:(jdouble)capture$0
                  withNSString:(NSString *)capture$1 {
  val$value_ = capture$0;
  ComGraphhopperReaderOsmConditionalConditionalParser_$1_set_val$key_(self, capture$1);
  return [super init];
}

- (void)dealloc {
  RELEASE_(val$key_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperReaderOsmConditionalConditionalParser_$1 *)other {
  [super copyAllFieldsTo:other];
  other->val$value_ = val$value_;
  ComGraphhopperReaderOsmConditionalConditionalParser_$1_set_val$key_(other, val$key_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isInRangeWithNSNumber:", "isInRange", "Z", 0x1, NULL },
    { "getKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "initWithDouble:withNSString:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", NULL, 0x1012, "D", NULL,  },
    { "val$key_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderOsmConditionalConditionalParser_$1 = { 1, "$1", "com.graphhopper.reader.osm.conditional", "ConditionalParser", 0x8000, 3, methods, 2, fields, 0, NULL};
  return &_ComGraphhopperReaderOsmConditionalConditionalParser_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderOsmConditionalConditionalParser_$1)

@implementation ComGraphhopperReaderOsmConditionalConditionalParser_$2

- (jboolean)isInRangeWithId:(NSNumber *)obj {
  return [((NSNumber *) nil_chk(obj)) doubleValue] < val$value_;
}

- (NSString *)getKey {
  return val$key_;
}

- (instancetype)initWithDouble:(jdouble)capture$0
                  withNSString:(NSString *)capture$1 {
  val$value_ = capture$0;
  ComGraphhopperReaderOsmConditionalConditionalParser_$2_set_val$key_(self, capture$1);
  return [super init];
}

- (void)dealloc {
  RELEASE_(val$key_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperReaderOsmConditionalConditionalParser_$2 *)other {
  [super copyAllFieldsTo:other];
  other->val$value_ = val$value_;
  ComGraphhopperReaderOsmConditionalConditionalParser_$2_set_val$key_(other, val$key_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isInRangeWithNSNumber:", "isInRange", "Z", 0x1, NULL },
    { "getKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "initWithDouble:withNSString:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", NULL, 0x1012, "D", NULL,  },
    { "val$key_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderOsmConditionalConditionalParser_$2 = { 1, "$2", "com.graphhopper.reader.osm.conditional", "ConditionalParser", 0x8000, 3, methods, 2, fields, 0, NULL};
  return &_ComGraphhopperReaderOsmConditionalConditionalParser_$2;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderOsmConditionalConditionalParser_$2)
