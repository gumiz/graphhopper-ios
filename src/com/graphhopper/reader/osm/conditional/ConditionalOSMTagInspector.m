//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalOSMTagInspector.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/ReaderWay.h"
#include "com/graphhopper/reader/osm/conditional/ConditionalOSMTagInspector.h"
#include "com/graphhopper/reader/osm/conditional/ConditionalParser.h"
#include "com/graphhopper/reader/osm/conditional/DateRange.h"
#include "com/graphhopper/reader/osm/conditional/ValueRange.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector () {
 @public
  id<OrgSlf4jLogger> logger_;
  id<JavaUtilList> tagsToCheck_;
  id<JavaUtilMap> valueMap_;
  ComGraphhopperReaderOsmConditionalConditionalParser *permitParser_, *restrictiveParser_;
  jboolean enabledLogs_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector, logger_, id<OrgSlf4jLogger>)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector, tagsToCheck_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector, valueMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector, permitParser_, ComGraphhopperReaderOsmConditionalConditionalParser *)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector, restrictiveParser_, ComGraphhopperReaderOsmConditionalConditionalParser *)

@implementation ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector

- (instancetype)initWithId:(id)value
          withJavaUtilList:(id<JavaUtilList>)tagsToCheck
           withJavaUtilSet:(id<JavaUtilSet>)restrictiveValues
           withJavaUtilSet:(id<JavaUtilSet>)permittedValues {
  return [self initComGraphhopperReaderOsmConditionalConditionalOSMTagInspectorWithJavaUtilList:tagsToCheck withJavaUtilMap:ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_createDefaultMappingWithId_(value) withJavaUtilSet:restrictiveValues withJavaUtilSet:permittedValues withBoolean:NO];
}

- (instancetype)initComGraphhopperReaderOsmConditionalConditionalOSMTagInspectorWithJavaUtilList:(id<JavaUtilList>)tagsToCheck
                                                                                 withJavaUtilMap:(id<JavaUtilMap>)valueMap
                                                                                 withJavaUtilSet:(id<JavaUtilSet>)restrictiveValues
                                                                                 withJavaUtilSet:(id<JavaUtilSet>)permittedValues
                                                                                     withBoolean:(jboolean)enabledLogs {
  if (self = [super init]) {
    ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_set_logger_(self, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_([self getClass]));
    enabledLogs_ = YES;
    ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_set_valueMap_(self, valueMap);
    ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_setAndConsume_tagsToCheck_(self, [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(tagsToCheck)) size]]);
    for (NSString * __strong tagToCheck in tagsToCheck) {
      [self->tagsToCheck_ addWithId:JreStrcat("$$", tagToCheck, @":conditional")];
    }
    self->enabledLogs_ = enabledLogs;
    jboolean logUnsupportedFeatures = NO;
    ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_setAndConsume_permitParser_(self, [[ComGraphhopperReaderOsmConditionalConditionalParser alloc] initWithJavaUtilSet:permittedValues withBoolean:logUnsupportedFeatures]);
    ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_setAndConsume_restrictiveParser_(self, [[ComGraphhopperReaderOsmConditionalConditionalParser alloc] initWithJavaUtilSet:restrictiveValues withBoolean:logUnsupportedFeatures]);
  }
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)tagsToCheck
                     withJavaUtilMap:(id<JavaUtilMap>)valueMap
                     withJavaUtilSet:(id<JavaUtilSet>)restrictiveValues
                     withJavaUtilSet:(id<JavaUtilSet>)permittedValues
                         withBoolean:(jboolean)enabledLogs {
  return [self initComGraphhopperReaderOsmConditionalConditionalOSMTagInspectorWithJavaUtilList:tagsToCheck withJavaUtilMap:valueMap withJavaUtilSet:restrictiveValues withJavaUtilSet:permittedValues withBoolean:enabledLogs];
}

+ (id<JavaUtilMap>)createDefaultMappingWithId:(id)value {
  return ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_createDefaultMappingWithId_(value);
}

- (jboolean)isRestrictedWayConditionallyPermittedWithReaderWay:(ReaderWay *)way {
  return [self appliesWithReaderWay:way withBoolean:YES];
}

- (jboolean)isPermittedWayConditionallyRestrictedWithReaderWay:(ReaderWay *)way {
  return [self appliesWithReaderWay:way withBoolean:NO];
}

- (jboolean)appliesWithReaderWay:(ReaderWay *)way
                     withBoolean:(jboolean)checkPermissiveValues {
  for (jint index = 0; index < [((id<JavaUtilList>) nil_chk(tagsToCheck_)) size]; index++) {
    NSString *tagToCheck = [tagsToCheck_ getWithInt:index];
    NSString *val = [((ReaderWay *) nil_chk(way)) getTagWithNSString:tagToCheck];
    if (val == nil || [val isEmpty]) continue;
    @try {
      id<ComGraphhopperReaderOsmConditionalValueRange> valueRange;
      if (checkPermissiveValues) valueRange = [((ComGraphhopperReaderOsmConditionalConditionalParser *) nil_chk(permitParser_)) getRangeWithNSString:val];
      else valueRange = [((ComGraphhopperReaderOsmConditionalConditionalParser *) nil_chk(restrictiveParser_)) getRangeWithNSString:val];
      if (valueRange != nil) {
        id value = [((id<JavaUtilMap>) nil_chk(valueMap_)) getWithId:[valueRange getKey]];
        if (value != nil && [valueRange isInRangeWithId:value]) return YES;
      }
    }
    @catch (JavaLangException *e) {
      if (enabledLogs_) {
        if (![((NSString *) nil_chk(val)) contains:@":"]) [((id<OrgSlf4jLogger>) nil_chk(logger_)) warnWithNSString:JreStrcat("J$$$$$$", [way getId], @" - could not parse the conditional value:", val, @" of tag:", tagToCheck, @". Exception:", [((JavaLangException *) nil_chk(e)) getMessage])];
      }
    }
  }
  return NO;
}

- (void)dealloc {
  RELEASE_(logger_);
  RELEASE_(tagsToCheck_);
  RELEASE_(valueMap_);
  RELEASE_(permitParser_);
  RELEASE_(restrictiveParser_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_set_logger_(other, logger_);
  ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_set_tagsToCheck_(other, tagsToCheck_);
  ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_set_valueMap_(other, valueMap_);
  ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_set_permitParser_(other, permitParser_);
  ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_set_restrictiveParser_(other, restrictiveParser_);
  other->enabledLogs_ = enabledLogs_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withJavaUtilList:withJavaUtilSet:withJavaUtilSet:", "ConditionalOSMTagInspector", NULL, 0x1, NULL },
    { "initWithJavaUtilList:withJavaUtilMap:withJavaUtilSet:withJavaUtilSet:withBoolean:", "ConditionalOSMTagInspector", NULL, 0x1, NULL },
    { "createDefaultMappingWithId:", "createDefaultMapping", "Ljava.util.Map;", 0x8, NULL },
    { "isRestrictedWayConditionallyPermittedWithReaderWay:", "isRestrictedWayConditionallyPermitted", "Z", 0x1, NULL },
    { "isPermittedWayConditionallyRestrictedWithReaderWay:", "isPermittedWayConditionallyRestricted", "Z", 0x1, NULL },
    { "appliesWithReaderWay:withBoolean:", "applies", "Z", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger_", NULL, 0x12, "Lorg.slf4j.Logger;", NULL,  },
    { "tagsToCheck_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "valueMap_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "permitParser_", NULL, 0x12, "Lcom.graphhopper.reader.osm.conditional.ConditionalParser;", NULL,  },
    { "restrictiveParser_", NULL, 0x12, "Lcom.graphhopper.reader.osm.conditional.ConditionalParser;", NULL,  },
    { "enabledLogs_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector = { 1, "ConditionalOSMTagInspector", "com.graphhopper.reader.osm.conditional", NULL, 0x1, 6, methods, 6, fields, 0, NULL};
  return &_ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector;
}

@end

id<JavaUtilMap> ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_createDefaultMappingWithId_(id value) {
  ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector_init();
  id<JavaUtilMap> map = [[[JavaUtilHashMap alloc] initWithInt:1] autorelease];
  [map putWithId:ComGraphhopperReaderOsmConditionalDateRange_get_KEY_() withId:value];
  return map;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderOsmConditionalConditionalOSMTagInspector)
