//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/reader/osm/conditional/DateRange.h"
#include "com/graphhopper/reader/osm/conditional/ParsedCalendar.h"
#include "com/graphhopper/util/Helper.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/text/DateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"

__attribute__((unused)) static jboolean ComGraphhopperReaderOsmConditionalDateRange_isInRangeYearlessWithJavaUtilCalendar_(ComGraphhopperReaderOsmConditionalDateRange *self, JavaUtilCalendar *date);
__attribute__((unused)) static jboolean ComGraphhopperReaderOsmConditionalDateRange_isInRangeYearlessReverseWithJavaUtilCalendar_(ComGraphhopperReaderOsmConditionalDateRange *self, JavaUtilCalendar *date);

@interface ComGraphhopperReaderOsmConditionalDateRange () {
 @public
  JavaUtilCalendar *from_;
  JavaUtilCalendar *to_;
}

- (jboolean)isInRangeYearlessWithJavaUtilCalendar:(JavaUtilCalendar *)date;

- (jboolean)isInRangeYearlessReverseWithJavaUtilCalendar:(JavaUtilCalendar *)date;
@end

J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalDateRange, from_, JavaUtilCalendar *)
J2OBJC_FIELD_SETTER(ComGraphhopperReaderOsmConditionalDateRange, to_, JavaUtilCalendar *)

@implementation ComGraphhopperReaderOsmConditionalDateRange

NSString * ComGraphhopperReaderOsmConditionalDateRange_KEY_ = @"DateRange";

- (instancetype)initWithComGraphhopperReaderOsmConditionalParsedCalendar:(ComGraphhopperReaderOsmConditionalParsedCalendar *)from
                    withComGraphhopperReaderOsmConditionalParsedCalendar:(ComGraphhopperReaderOsmConditionalParsedCalendar *)to {
  if (self = [super init]) {
    yearless_ = NO;
    dayOnly_ = NO;
    reverse_ = NO;
    JavaUtilCalendar *fromCal = ((ComGraphhopperReaderOsmConditionalParsedCalendar *) nil_chk(from))->parsedCalendar_;
    JavaUtilCalendar *toCal = ((ComGraphhopperReaderOsmConditionalParsedCalendar *) nil_chk(to))->parsedCalendar_;
    if ([((JavaUtilCalendar *) nil_chk(fromCal)) getWithInt:JavaUtilCalendar_ERA] != [((JavaUtilCalendar *) nil_chk(toCal)) getWithInt:JavaUtilCalendar_ERA]) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$@", @"Different ERAs are not allowed. From:", from, @" To:", to)] autorelease];
    }
    if ([from isYearless] && [to isYearless]) {
      yearless_ = YES;
    }
    if ([from isDayOnly] && [to isDayOnly]) {
      dayOnly_ = YES;
    }
    if ([fromCal getTimeInMillis] > [toCal getTimeInMillis]) {
      if (!yearless_ && !dayOnly_) {
        @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$@", @"From after to makes no sense, except for isYearless and isDayOnly DateRanges. From:", from, @" To:", to)] autorelease];
      }
      else {
        reverse_ = YES;
      }
    }
    ComGraphhopperReaderOsmConditionalDateRange_set_from_(self, [from getMin]);
    ComGraphhopperReaderOsmConditionalDateRange_set_to_(self, [to getMax]);
  }
  return self;
}

- (NSString *)getKey {
  return ComGraphhopperReaderOsmConditionalDateRange_KEY_;
}

- (jboolean)isInRangeWithId:(JavaUtilCalendar *)date {
  if (!yearless_ && !dayOnly_) return [((JavaUtilCalendar *) nil_chk(date)) afterWithId:from_] && [date beforeWithId:to_];
  if (dayOnly_) {
    jint currentDayOfWeek = [((JavaUtilCalendar *) nil_chk(date)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK];
    if (reverse_) {
      return [((JavaUtilCalendar *) nil_chk(from_)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK] <= currentDayOfWeek || currentDayOfWeek <= [((JavaUtilCalendar *) nil_chk(to_)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK];
    }
    else {
      return [((JavaUtilCalendar *) nil_chk(from_)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK] <= currentDayOfWeek && currentDayOfWeek <= [((JavaUtilCalendar *) nil_chk(to_)) getWithInt:JavaUtilCalendar_DAY_OF_WEEK];
    }
  }
  if (reverse_) return ComGraphhopperReaderOsmConditionalDateRange_isInRangeYearlessReverseWithJavaUtilCalendar_(self, date);
  else return ComGraphhopperReaderOsmConditionalDateRange_isInRangeYearlessWithJavaUtilCalendar_(self, date);
}

- (jboolean)isInRangeYearlessWithJavaUtilCalendar:(JavaUtilCalendar *)date {
  return ComGraphhopperReaderOsmConditionalDateRange_isInRangeYearlessWithJavaUtilCalendar_(self, date);
}

- (jboolean)isInRangeYearlessReverseWithJavaUtilCalendar:(JavaUtilCalendar *)date {
  return ComGraphhopperReaderOsmConditionalDateRange_isInRangeYearlessReverseWithJavaUtilCalendar_(self, date);
}

- (NSString *)description {
  JavaTextDateFormat *f = Helper_createFormatter();
  return JreStrcat("$Z$Z$Z$$$$", @"yearless:", yearless_, @", dayOnly:", dayOnly_, @", reverse:", reverse_, @", from:", [((JavaTextDateFormat *) nil_chk(f)) formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(from_)) getTime]], @", to:", [f formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(to_)) getTime]]);
}

- (void)dealloc {
  RELEASE_(from_);
  RELEASE_(to_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperReaderOsmConditionalDateRange *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperReaderOsmConditionalDateRange_set_from_(other, from_);
  ComGraphhopperReaderOsmConditionalDateRange_set_to_(other, to_);
  other->yearless_ = yearless_;
  other->dayOnly_ = dayOnly_;
  other->reverse_ = reverse_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComGraphhopperReaderOsmConditionalParsedCalendar:withComGraphhopperReaderOsmConditionalParsedCalendar:", "DateRange", NULL, 0x1, NULL },
    { "getKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "isInRangeWithJavaUtilCalendar:", "isInRange", "Z", 0x1, NULL },
    { "isInRangeYearlessWithJavaUtilCalendar:", "isInRangeYearless", "Z", 0x2, NULL },
    { "isInRangeYearlessReverseWithJavaUtilCalendar:", "isInRangeYearlessReverse", "Z", 0x2, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "KEY_", NULL, 0x19, "Ljava.lang.String;", &ComGraphhopperReaderOsmConditionalDateRange_KEY_,  },
    { "from_", NULL, 0x12, "Ljava.util.Calendar;", NULL,  },
    { "to_", NULL, 0x12, "Ljava.util.Calendar;", NULL,  },
    { "yearless_", NULL, 0x0, "Z", NULL,  },
    { "dayOnly_", NULL, 0x0, "Z", NULL,  },
    { "reverse_", NULL, 0x0, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperReaderOsmConditionalDateRange = { 1, "DateRange", "com.graphhopper.reader.osm.conditional", NULL, 0x1, 6, methods, 6, fields, 0, NULL};
  return &_ComGraphhopperReaderOsmConditionalDateRange;
}

@end

jboolean ComGraphhopperReaderOsmConditionalDateRange_isInRangeYearlessWithJavaUtilCalendar_(ComGraphhopperReaderOsmConditionalDateRange *self, JavaUtilCalendar *date) {
  if ([((JavaUtilCalendar *) nil_chk(self->from_)) getWithInt:JavaUtilCalendar_MONTH] < [((JavaUtilCalendar *) nil_chk(date)) getWithInt:JavaUtilCalendar_MONTH] && [date getWithInt:JavaUtilCalendar_MONTH] < [((JavaUtilCalendar *) nil_chk(self->to_)) getWithInt:JavaUtilCalendar_MONTH]) return YES;
  if ([self->from_ getWithInt:JavaUtilCalendar_MONTH] == [date getWithInt:JavaUtilCalendar_MONTH] && [((JavaUtilCalendar *) nil_chk(self->to_)) getWithInt:JavaUtilCalendar_MONTH] == [date getWithInt:JavaUtilCalendar_MONTH]) {
    if ([self->from_ getWithInt:JavaUtilCalendar_DAY_OF_MONTH] <= [date getWithInt:JavaUtilCalendar_DAY_OF_MONTH] && [date getWithInt:JavaUtilCalendar_DAY_OF_MONTH] <= [self->to_ getWithInt:JavaUtilCalendar_DAY_OF_MONTH]) return YES;
    else return NO;
  }
  if ([self->from_ getWithInt:JavaUtilCalendar_MONTH] == [date getWithInt:JavaUtilCalendar_MONTH]) {
    if ([self->from_ getWithInt:JavaUtilCalendar_DAY_OF_MONTH] <= [date getWithInt:JavaUtilCalendar_DAY_OF_MONTH]) return YES;
    else return NO;
  }
  if ([((JavaUtilCalendar *) nil_chk(self->to_)) getWithInt:JavaUtilCalendar_MONTH] == [date getWithInt:JavaUtilCalendar_MONTH]) {
    if ([date getWithInt:JavaUtilCalendar_DAY_OF_MONTH] <= [self->to_ getWithInt:JavaUtilCalendar_DAY_OF_MONTH]) return YES;
    else return NO;
  }
  return NO;
}

jboolean ComGraphhopperReaderOsmConditionalDateRange_isInRangeYearlessReverseWithJavaUtilCalendar_(ComGraphhopperReaderOsmConditionalDateRange *self, JavaUtilCalendar *date) {
  jint currMonth = [((JavaUtilCalendar *) nil_chk(date)) getWithInt:JavaUtilCalendar_MONTH];
  if ([((JavaUtilCalendar *) nil_chk(self->from_)) getWithInt:JavaUtilCalendar_MONTH] < currMonth || currMonth < [((JavaUtilCalendar *) nil_chk(self->to_)) getWithInt:JavaUtilCalendar_MONTH]) return YES;
  if ([self->from_ getWithInt:JavaUtilCalendar_MONTH] == currMonth && [((JavaUtilCalendar *) nil_chk(self->to_)) getWithInt:JavaUtilCalendar_MONTH] == currMonth) {
    if ([self->from_ getWithInt:JavaUtilCalendar_DAY_OF_MONTH] < [date getWithInt:JavaUtilCalendar_DAY_OF_MONTH] || [date getWithInt:JavaUtilCalendar_DAY_OF_MONTH] < [self->to_ getWithInt:JavaUtilCalendar_DAY_OF_MONTH]) return YES;
    else return NO;
  }
  if ([self->from_ getWithInt:JavaUtilCalendar_MONTH] == currMonth) {
    if ([self->from_ getWithInt:JavaUtilCalendar_DAY_OF_MONTH] <= [date getWithInt:JavaUtilCalendar_DAY_OF_MONTH]) return YES;
    else return NO;
  }
  if ([((JavaUtilCalendar *) nil_chk(self->to_)) getWithInt:JavaUtilCalendar_MONTH] == currMonth) {
    if ([date getWithInt:JavaUtilCalendar_DAY_OF_MONTH] <= [self->to_ getWithInt:JavaUtilCalendar_DAY_OF_MONTH]) return YES;
    else return NO;
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperReaderOsmConditionalDateRange)
