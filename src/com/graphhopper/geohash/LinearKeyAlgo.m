//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/geohash/LinearKeyAlgo.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/geohash/LinearKeyAlgo.h"
#include "com/graphhopper/util/shapes/BBox.h"
#include "com/graphhopper/util/shapes/GHPoint.h"
#include "java/lang/Math.h"

__attribute__((unused)) static jlong LinearKeyAlgo_encodeWithDouble_withDouble_(LinearKeyAlgo *self, jdouble lat, jdouble lon);

@interface LinearKeyAlgo () {
 @public
  jint latUnits_, lonUnits_;
  BBox *bounds_;
  jdouble latDelta_, lonDelta_;
}
@end

J2OBJC_FIELD_SETTER(LinearKeyAlgo, bounds_, BBox *)

@implementation LinearKeyAlgo

- (instancetype)initWithInt:(jint)latUnits
                    withInt:(jint)lonUnits {
  if (self = [super init]) {
    self->latUnits_ = latUnits;
    self->lonUnits_ = lonUnits;
    [self setWorldBounds];
  }
  return self;
}

- (LinearKeyAlgo *)setBoundsWithDouble:(jdouble)minLonInit
                            withDouble:(jdouble)maxLonInit
                            withDouble:(jdouble)minLatInit
                            withDouble:(jdouble)maxLatInit {
  LinearKeyAlgo_setAndConsume_bounds_(self, [[BBox alloc] initWithDouble:minLonInit withDouble:maxLonInit withDouble:minLatInit withDouble:maxLatInit]);
  latDelta_ = (bounds_->maxLat_ - bounds_->minLat_) / latUnits_;
  lonDelta_ = (bounds_->maxLon_ - bounds_->minLon_) / lonUnits_;
  return self;
}

- (LinearKeyAlgo *)setBoundsWithBBox:(BBox *)bounds {
  [self setBoundsWithDouble:((BBox *) nil_chk(bounds))->minLon_ withDouble:bounds->maxLon_ withDouble:bounds->minLat_ withDouble:bounds->maxLat_];
  return self;
}

- (void)setWorldBounds {
  [self setBoundsWithDouble:-180 withDouble:180 withDouble:-90 withDouble:90];
}

- (jlong)encodeWithGHPoint:(GHPoint *)coord {
  return LinearKeyAlgo_encodeWithDouble_withDouble_(self, ((GHPoint *) nil_chk(coord))->lat_, coord->lon_);
}

- (jlong)encodeWithDouble:(jdouble)lat
               withDouble:(jdouble)lon {
  return LinearKeyAlgo_encodeWithDouble_withDouble_(self, lat, lon);
}

- (void)decodeWithLong:(jlong)linearKey
           withGHPoint:(GHPoint *)latLon {
  jdouble lat = linearKey / lonUnits_ * latDelta_ + ((BBox *) nil_chk(bounds_))->minLat_;
  jdouble lon = linearKey % lonUnits_ * lonDelta_ + bounds_->minLon_;
  ((GHPoint *) nil_chk(latLon))->lat_ = lat + latDelta_ / 2;
  latLon->lon_ = lon + lonDelta_ / 2;
}

- (jdouble)getLatDelta {
  return latDelta_;
}

- (jdouble)getLonDelta {
  return lonDelta_;
}

- (void)dealloc {
  RELEASE_(bounds_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(LinearKeyAlgo *)other {
  [super copyAllFieldsTo:other];
  other->latUnits_ = latUnits_;
  other->lonUnits_ = lonUnits_;
  LinearKeyAlgo_set_bounds_(other, bounds_);
  other->latDelta_ = latDelta_;
  other->lonDelta_ = lonDelta_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "LinearKeyAlgo", NULL, 0x1, NULL },
    { "setBoundsWithDouble:withDouble:withDouble:withDouble:", "setBounds", "Lcom.graphhopper.geohash.LinearKeyAlgo;", 0x1, NULL },
    { "setBoundsWithBBox:", "setBounds", "Lcom.graphhopper.geohash.LinearKeyAlgo;", 0x1, NULL },
    { "setWorldBounds", NULL, "V", 0x4, NULL },
    { "encodeWithGHPoint:", "encode", "J", 0x1, NULL },
    { "encodeWithDouble:withDouble:", "encode", "J", 0x11, NULL },
    { "decodeWithLong:withGHPoint:", "decode", "V", 0x11, NULL },
    { "getLatDelta", NULL, "D", 0x1, NULL },
    { "getLonDelta", NULL, "D", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "C_", NULL, 0x1a, "D", NULL, .constantValue.asDouble = LinearKeyAlgo_C },
    { "latUnits_", NULL, 0x12, "I", NULL,  },
    { "lonUnits_", NULL, 0x12, "I", NULL,  },
    { "bounds_", NULL, 0x2, "Lcom.graphhopper.util.shapes.BBox;", NULL,  },
    { "latDelta_", NULL, 0x2, "D", NULL,  },
    { "lonDelta_", NULL, 0x2, "D", NULL,  },
  };
  static const J2ObjcClassInfo _LinearKeyAlgo = { 1, "LinearKeyAlgo", "com.graphhopper.geohash", NULL, 0x1, 9, methods, 6, fields, 0, NULL};
  return &_LinearKeyAlgo;
}

@end

jlong LinearKeyAlgo_encodeWithDouble_withDouble_(LinearKeyAlgo *self, jdouble lat, jdouble lon) {
  lat = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(lat, ((BBox *) nil_chk(self->bounds_))->minLat_), self->bounds_->maxLat_);
  lon = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(lon, self->bounds_->minLon_), self->bounds_->maxLon_);
  jlong latIndex = J2ObjCFpToLong(((lat - self->bounds_->minLat_) / self->latDelta_ * LinearKeyAlgo_C));
  jlong lonIndex = J2ObjCFpToLong(((lon - self->bounds_->minLon_) / self->lonDelta_ * LinearKeyAlgo_C));
  return latIndex * self->lonUnits_ + lonIndex;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(LinearKeyAlgo)
