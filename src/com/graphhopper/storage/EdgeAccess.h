//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/EdgeAccess.java
//

#ifndef _EdgeAccess_H_
#define _EdgeAccess_H_

@class BaseGraph_EdgeIterable;
@class BitUtil;
@protocol DataAccess;
@protocol EdgeFilter;
@protocol EdgeIteratorState;

#include "J2ObjC_header.h"

#define EdgeAccess_INT_DIST_FACTOR 1000.0
#define EdgeAccess_NO_NODE -1

/**
 @author Peter Karich
 */
@interface EdgeAccess : NSObject {
 @public
  id<DataAccess> edges_;
  jint E_NODEA_, E_NODEB_, E_LINKA_, E_LINKB_, E_DIST_, E_FLAGS_;
}

- (instancetype)initWithDataAccess:(id<DataAccess>)edges
                       withBitUtil:(BitUtil *)bitUtil;

- (void)init__WithInt:(jint)E_NODEA
              withInt:(jint)E_NODEB
              withInt:(jint)E_LINKA
              withInt:(jint)E_LINKB
              withInt:(jint)E_DIST
              withInt:(jint)E_FLAGS
          withBoolean:(jboolean)flagsSizeIsLong OBJC_METHOD_FAMILY_NONE;

- (BaseGraph_EdgeIterable *)createSingleEdgeWithEdgeFilter:(id<EdgeFilter>)edgeFilter;

- (jlong)toPointerWithInt:(jint)edgeOrShortcutId;

- (jboolean)isInBoundsWithInt:(jint)edgeOrShortcutId;

- (jlong)reverseFlagsWithLong:(jlong)edgePointer
                     withLong:(jlong)flags;

- (jint)getEdgeRefWithInt:(jint)nodeId;

- (void)setEdgeRefWithInt:(jint)nodeId
                  withInt:(jint)edgeId;

- (jint)getEntryBytes;

- (void)invalidateEdgeWithLong:(jlong)edgePointer;

- (void)setDistWithLong:(jlong)edgePointer
             withDouble:(jdouble)distance;

/**
 @brief returns distance (already translated from integer to double)
 */
- (jdouble)getDistWithLong:(jlong)pointer;

- (jlong)getFlags_WithLong:(jlong)edgePointer
               withBoolean:(jboolean)reverse;

- (jlong)setFlags_WithLong:(jlong)edgePointer
               withBoolean:(jboolean)reverse
                  withLong:(jlong)flags;

/**
 @brief Write new edge between nodes fromNodeId, and toNodeId both to nodes index and edges index
 */
- (jint)internalEdgeAddWithInt:(jint)newEdgeId
                       withInt:(jint)fromNodeId
                       withInt:(jint)toNodeId;

- (jint)getOtherNodeWithInt:(jint)nodeThis
                   withLong:(jlong)edgePointer;

- (jint)getEdgeRefWithInt:(jint)nodeThis
                  withInt:(jint)nodeOther
                 withLong:(jlong)edgePointer;

- (void)connectNewEdgeWithInt:(jint)fromNode
                      withInt:(jint)newOrExistingEdge;

- (jlong)writeEdgeWithInt:(jint)edgeId
                  withInt:(jint)nodeThis
                  withInt:(jint)nodeOther
                  withInt:(jint)nextEdge
                  withInt:(jint)nextEdgeOther;

/**
 @brief This method disconnects the specified edge from the list of edges of the specified node.
 It does not release the freed space to be reused. <p>
 @param edgeToUpdatePointer if it is negative then the nextEdgeId will be saved to refToEdges of nodes
 */
- (jlong)internalEdgeDisconnectWithInt:(jint)edgeToRemove
                              withLong:(jlong)edgeToUpdatePointer
                               withInt:(jint)baseNode
                               withInt:(jint)adjNode;

- (id<EdgeIteratorState>)getEdgePropsWithInt:(jint)edgeId
                                     withInt:(jint)adjNode;

@end

J2OBJC_EMPTY_STATIC_INIT(EdgeAccess)

J2OBJC_FIELD_SETTER(EdgeAccess, edges_, id<DataAccess>)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(EdgeAccess, NO_NODE, jint)

J2OBJC_STATIC_FIELD_GETTER(EdgeAccess, INT_DIST_FACTOR, jdouble)

FOUNDATION_EXPORT jdouble EdgeAccess_MAX_DIST_;
J2OBJC_STATIC_FIELD_GETTER(EdgeAccess, MAX_DIST_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(EdgeAccess, MAX_DIST_, jdouble)
CF_EXTERN_C_END

typedef EdgeAccess ComGraphhopperStorageEdgeAccess;

J2OBJC_TYPE_LITERAL_HEADER(EdgeAccess)

#endif // _EdgeAccess_H_
