//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/BaseGraph.java
//

#ifndef _BaseGraph_H_
#define _BaseGraph_H_

@class BBox;
@class BaseGraph_CommonEdgeIterator;
@class BitUtil;
@class EncodingManager;
@class IOSByteArray;
@class NameIndex;
@class PointList;
@protocol DataAccess;
@protocol Directory;
@protocol EdgeFilter;
@protocol FlagEncoder;
@protocol GHBitSet;
@protocol GraphExtension;
@protocol InternalGraphEventListener;
@protocol NodeAccess;

#include "J2ObjC_header.h"
#include "com/graphhopper/routing/util/AllEdgesIterator.h"
#include "com/graphhopper/storage/EdgeAccess.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/util/EdgeExplorer.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/EdgeIteratorState.h"

/**
 @brief The base graph handles nodes and edges file format.
 It can be used with different Directory implementations like RAMDirectory for fast access or via MMapDirectory for virtual-memory and not thread safe usage. <p> Note: A RAM DataAccess Object is thread-safe in itself but if used in this Graph implementation it is not write thread safe. <p> Life cycle: (1) object creation, (2) configuration via setters & getters, (3) create or loadExisting, (4) usage, (5) flush, (6) close
 */
@interface BaseGraph : NSObject < Graph > {
 @public
  id<DataAccess> edges_;
  id<DataAccess> nodes_;
  BBox *bounds_;
  id<NodeAccess> nodeAccess_;
  id<GraphExtension> extStorage_;
  NameIndex *nameIndex_;
  BitUtil *bitUtil_;
  EncodingManager *encodingManager_;
  EdgeAccess *edgeAccess_;
  /**
   @brief interval [0,n)
   */
  jint edgeCount_;
  jint N_EDGE_REF_, N_LAT_, N_LON_, N_ELE_, N_ADDITIONAL_;
  jint E_GEO_, E_NAME_, E_ADDITIONAL_;
  /**
   @brief Specifies how many entries (integers) are used per edge.
   */
  jint edgeEntryBytes_;
  /**
   @brief Specifies how many entries (integers) are used per node
   */
  jint nodeEntryBytes_;
}

- (instancetype)initWithDirectory:(id<Directory>)dir
              withEncodingManager:(EncodingManager *)encodingManager
                      withBoolean:(jboolean)withElevation
   withInternalGraphEventListener:(id<InternalGraphEventListener>)listener
               withGraphExtension:(id<GraphExtension>)extendedStorage;

- (id<Graph>)getBaseGraph;

- (void)checkInit;

- (jint)loadNodesHeader;

- (jint)setNodesHeader;

- (jint)loadEdgesHeader;

- (jint)setEdgesHeader;

- (jint)loadWayGeometryHeader;

- (jint)setWayGeometryHeader;

- (void)initStorage OBJC_METHOD_FAMILY_NONE;

/**
 @brief Initializes the node area with the empty edge value and default additional value.
 */
- (void)initNodeRefsWithLong:(jlong)oldCapacity
                    withLong:(jlong)newCapacity OBJC_METHOD_FAMILY_NONE;

- (jint)nextEdgeEntryIndexWithInt:(jint)sizeInBytes;

- (jint)nextNodeEntryIndexWithInt:(jint)sizeInBytes;

- (void)initNodeAndEdgeEntrySize OBJC_METHOD_FAMILY_NONE;

/**
 @brief Check if byte capacity of DataAcess nodes object is sufficient to include node index, else extend byte capacity
 */
- (void)ensureNodeIndexWithInt:(jint)nodeIndex;

- (jint)getNodes;

- (id<NodeAccess>)getNodeAccess;

- (BBox *)getBounds;

- (id<EdgeIteratorState>)edgeWithInt:(jint)a
                             withInt:(jint)b
                          withDouble:(jdouble)distance
                         withBoolean:(jboolean)bothDirection;

- (void)setSegmentSizeWithInt:(jint)bytes;

- (void)freeze;

- (jboolean)isFrozen;

- (void)checkFreeze;

- (void)createWithLong:(jlong)initSize;

- (NSString *)toDetailsString;

- (void)flush;

- (void)close;

- (jlong)getCapacity;

- (jlong)getMaxGeoRef;

- (void)loadExistingWithNSString:(NSString *)dim;

/**
 @return to
 */
- (id<EdgeIteratorState>)copyPropertiesWithBaseGraph_CommonEdgeIterator:(BaseGraph_CommonEdgeIterator *)from
                                                  withEdgeIteratorState:(id<EdgeIteratorState>)to OBJC_METHOD_FAMILY_NONE;

/**
 @brief Create edge between nodes a and b <p>
 @return EdgeIteratorState of newly created edge
 */
- (id<EdgeIteratorState>)edgeWithInt:(jint)nodeA
                             withInt:(jint)nodeB;

- (void)setEdgeCountWithInt:(jint)cnt;

/**
 @brief Determine next free edgeId and ensure byte capacity to store edge <p>
 @return next free edgeId
 */
- (jint)nextEdgeId;

- (id<EdgeIteratorState>)getEdgeIteratorStateWithInt:(jint)edgeId
                                             withInt:(jint)adjNode;

- (void)checkAdjNodeBoundsWithInt:(jint)adjNode;

- (id<EdgeExplorer>)createEdgeExplorerWithEdgeFilter:(id<EdgeFilter>)filter;

- (id<EdgeExplorer>)createEdgeExplorer;

- (id<AllEdgesIterator>)getAllEdges;

- (id<Graph>)copyToWithGraph:(id<Graph>)g OBJC_METHOD_FAMILY_NONE;

- (void)_copyToWithBaseGraph:(BaseGraph *)clonedG;

- (void)trimToSize;

/**
 @brief This methods disconnects all edges from removed nodes.
 It does no edge compaction. Then it moves the last nodes into the deleted nodes, where it needs to update the node ids in every edge.
 */
- (void)inPlaceNodeRemoveWithInt:(jint)removeNodeCount;

- (id<GraphExtension>)getExtension;

- (void)setAdditionalEdgeFieldWithLong:(jlong)edgePointer
                               withInt:(jint)value;

- (id<GHBitSet>)getRemovedNodes;

@end

J2OBJC_EMPTY_STATIC_INIT(BaseGraph)

J2OBJC_FIELD_SETTER(BaseGraph, edges_, id<DataAccess>)
J2OBJC_FIELD_SETTER(BaseGraph, nodes_, id<DataAccess>)
J2OBJC_FIELD_SETTER(BaseGraph, bounds_, BBox *)
J2OBJC_FIELD_SETTER(BaseGraph, nodeAccess_, id<NodeAccess>)
J2OBJC_FIELD_SETTER(BaseGraph, extStorage_, id<GraphExtension>)
J2OBJC_FIELD_SETTER(BaseGraph, nameIndex_, NameIndex *)
J2OBJC_FIELD_SETTER(BaseGraph, bitUtil_, BitUtil *)
J2OBJC_FIELD_SETTER(BaseGraph, encodingManager_, EncodingManager *)
J2OBJC_FIELD_SETTER(BaseGraph, edgeAccess_, EdgeAccess *)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

typedef BaseGraph ComGraphhopperStorageBaseGraph;

J2OBJC_TYPE_LITERAL_HEADER(BaseGraph)

/**
 @brief Common private super class for AllEdgesIteratorImpl and EdgeIterable
 */
@interface BaseGraph_CommonEdgeIterator : NSObject < EdgeIteratorState > {
 @public
  BaseGraph *baseGraph_;
  jlong edgePointer_;
  jint baseNode_;
  jint adjNode_;
  EdgeAccess *edgeAccess_;
  jboolean reverse_;
  jboolean freshFlags_;
  jint edgeId_;
}

- (instancetype)initWithLong:(jlong)edgePointer
              withEdgeAccess:(EdgeAccess *)edgeAccess
               withBaseGraph:(BaseGraph *)baseGraph;

- (jint)getBaseNode;

- (jint)getAdjNode;

- (jdouble)getDistance;

- (id<EdgeIteratorState>)setDistanceWithDouble:(jdouble)dist;

- (jlong)getDirectFlags;

- (jlong)getFlags;

- (id<EdgeIteratorState>)setFlagsWithLong:(jlong)fl;

- (jint)getAdditionalField;

- (id<EdgeIteratorState>)setAdditionalFieldWithInt:(jint)value;

- (id<EdgeIteratorState>)copyPropertiesToWithEdgeIteratorState:(id<EdgeIteratorState>)edge OBJC_METHOD_FAMILY_NONE;

/**
 @brief Reports whether the edge is available in forward direction for the specified encoder.
 */
- (jboolean)isForwardWithFlagEncoder:(id<FlagEncoder>)encoder;

/**
 @brief Reports whether the edge is available in backward direction for the specified encoder.
 */
- (jboolean)isBackwardWithFlagEncoder:(id<FlagEncoder>)encoder;

- (id<EdgeIteratorState>)setWayGeometryWithPointList:(PointList *)pillarNodes;

- (PointList *)fetchWayGeometryWithInt:(jint)mode;

- (jint)getEdge;

- (NSString *)getName;

- (id<EdgeIteratorState>)setNameWithNSString:(NSString *)name;

- (jboolean)getBoolWithInt:(jint)key
               withBoolean:(jboolean)_default;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(BaseGraph_CommonEdgeIterator)

J2OBJC_FIELD_SETTER(BaseGraph_CommonEdgeIterator, baseGraph_, BaseGraph *)
J2OBJC_FIELD_SETTER(BaseGraph_CommonEdgeIterator, edgeAccess_, EdgeAccess *)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(BaseGraph_CommonEdgeIterator)

@interface BaseGraph_EdgeIterable : BaseGraph_CommonEdgeIterator < EdgeExplorer, EdgeIterator > {
 @public
  id<EdgeFilter> filter_;
  jint nextEdgeId_;
}

- (instancetype)initWithBaseGraph:(BaseGraph *)baseGraph
                   withEdgeAccess:(EdgeAccess *)edgeAccess
                   withEdgeFilter:(id<EdgeFilter>)filter;

- (void)setEdgeIdWithInt:(jint)edgeId;

- (jboolean)init__WithInt:(jint)tmpEdgeId
                  withInt:(jint)expectedAdjNode OBJC_METHOD_FAMILY_NONE;

- (void)_setBaseNodeWithInt:(jint)baseNode;

- (id<EdgeIterator>)setBaseNodeWithInt:(jint)baseNode;

- (void)selectEdgeAccess;

- (jboolean)next;

- (id<EdgeIteratorState>)detachWithBoolean:(jboolean)reverseArg;

@end

J2OBJC_EMPTY_STATIC_INIT(BaseGraph_EdgeIterable)

J2OBJC_FIELD_SETTER(BaseGraph_EdgeIterable, filter_, id<EdgeFilter>)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(BaseGraph_EdgeIterable)

/**
 @brief Include all edges of this storage in the iterator.
 */
@interface BaseGraph_AllEdgeIterator : BaseGraph_CommonEdgeIterator < AllEdgesIterator > {
}

- (instancetype)initWithBaseGraph:(BaseGraph *)baseGraph;

- (jint)getMaxId;

- (jboolean)next;

- (jboolean)checkRange;

- (id<EdgeIteratorState>)detachWithBoolean:(jboolean)reverseArg;

@end

J2OBJC_EMPTY_STATIC_INIT(BaseGraph_AllEdgeIterator)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(BaseGraph_AllEdgeIterator)

@interface BaseGraph_$1 : EdgeAccess {
}

- (BaseGraph_EdgeIterable *)createSingleEdgeWithEdgeFilter:(id<EdgeFilter>)filter;

- (jint)getEdgeRefWithInt:(jint)nodeId;

- (void)setEdgeRefWithInt:(jint)nodeId
                  withInt:(jint)edgeId;

- (jint)getEntryBytes;

- (jlong)toPointerWithInt:(jint)edgeId;

- (jboolean)isInBoundsWithInt:(jint)edgeId;

- (jlong)reverseFlagsWithLong:(jlong)edgePointer
                     withLong:(jlong)flags;

- (NSString *)description;

- (instancetype)initWithBaseGraph:(BaseGraph *)outer$
                   withDataAccess:(id<DataAccess>)arg$0
                      withBitUtil:(BitUtil *)arg$1
              withEncodingManager:(EncodingManager *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(BaseGraph_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(BaseGraph_$1)

#endif // _BaseGraph_H_
