//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/EdgeAccess.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/EdgeFilter.h"
#include "com/graphhopper/storage/BaseGraph.h"
#include "com/graphhopper/storage/DataAccess.h"
#include "com/graphhopper/storage/EdgeAccess.h"
#include "com/graphhopper/util/BitUtil.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"

__attribute__((unused)) static jint EdgeAccess_distToIntWithDouble_(EdgeAccess *self, jdouble distance);
__attribute__((unused)) static jint EdgeAccess_getOtherNodeWithInt_withLong_(EdgeAccess *self, jint nodeThis, jlong edgePointer);
__attribute__((unused)) static jlong EdgeAccess__getLinkPosInEdgeAreaWithInt_withInt_withLong_(EdgeAccess *self, jint nodeThis, jint nodeOther, jlong edgePointer);
__attribute__((unused)) static jint EdgeAccess_getEdgeRefWithInt_withInt_withLong_(EdgeAccess *self, jint nodeThis, jint nodeOther, jlong edgePointer);
__attribute__((unused)) static void EdgeAccess_connectNewEdgeWithInt_withInt_(EdgeAccess *self, jint fromNode, jint newOrExistingEdge);
__attribute__((unused)) static jlong EdgeAccess_writeEdgeWithInt_withInt_withInt_withInt_withInt_(EdgeAccess *self, jint edgeId, jint nodeThis, jint nodeOther, jint nextEdge, jint nextEdgeOther);

@interface EdgeAccess () {
 @public
  BitUtil *bitUtil_;
  jboolean flagsSizeIsLong_;
}

/**
 @brief Translates double distance to integer in order to save it in a DataAccess object
 */
- (jint)distToIntWithDouble:(jdouble)distance;

- (jlong)_getLinkPosInEdgeAreaWithInt:(jint)nodeThis
                              withInt:(jint)nodeOther
                             withLong:(jlong)edgePointer;
@end

J2OBJC_FIELD_SETTER(EdgeAccess, bitUtil_, BitUtil *)

@implementation EdgeAccess

jdouble EdgeAccess_MAX_DIST_ = 2147483.646;

- (instancetype)initWithDataAccess:(id<DataAccess>)edges
                       withBitUtil:(BitUtil *)bitUtil {
  if (self = [super init]) {
    EdgeAccess_set_edges_(self, edges);
    EdgeAccess_set_bitUtil_(self, bitUtil);
  }
  return self;
}

- (void)init__WithInt:(jint)E_NODEA
              withInt:(jint)E_NODEB
              withInt:(jint)E_LINKA
              withInt:(jint)E_LINKB
              withInt:(jint)E_DIST
              withInt:(jint)E_FLAGS
          withBoolean:(jboolean)flagsSizeIsLong {
  self->E_NODEA_ = E_NODEA;
  self->E_NODEB_ = E_NODEB;
  self->E_LINKA_ = E_LINKA;
  self->E_LINKB_ = E_LINKB;
  self->E_DIST_ = E_DIST;
  self->E_FLAGS_ = E_FLAGS;
  self->flagsSizeIsLong_ = flagsSizeIsLong;
}

- (BaseGraph_EdgeIterable *)createSingleEdgeWithEdgeFilter:(id<EdgeFilter>)edgeFilter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)toPointerWithInt:(jint)edgeOrShortcutId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isInBoundsWithInt:(jint)edgeOrShortcutId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)reverseFlagsWithLong:(jlong)edgePointer
                     withLong:(jlong)flags {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getEdgeRefWithInt:(jint)nodeId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setEdgeRefWithInt:(jint)nodeId
                  withInt:(jint)edgeId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)getEntryBytes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)invalidateEdgeWithLong:(jlong)edgePointer {
  [((id<DataAccess>) nil_chk(edges_)) setIntWithLong:edgePointer + E_NODEA_ withInt:EdgeAccess_NO_NODE];
}

- (void)setDistWithLong:(jlong)edgePointer
             withDouble:(jdouble)distance {
  [((id<DataAccess>) nil_chk(edges_)) setIntWithLong:edgePointer + E_DIST_ withInt:EdgeAccess_distToIntWithDouble_(self, distance)];
}

- (jint)distToIntWithDouble:(jdouble)distance {
  return EdgeAccess_distToIntWithDouble_(self, distance);
}

- (jdouble)getDistWithLong:(jlong)pointer {
  jint val = [((id<DataAccess>) nil_chk(edges_)) getIntWithLong:pointer + E_DIST_];
  return val / EdgeAccess_INT_DIST_FACTOR;
}

- (jlong)getFlags_WithLong:(jlong)edgePointer
               withBoolean:(jboolean)reverse {
  jint low = [((id<DataAccess>) nil_chk(edges_)) getIntWithLong:edgePointer + E_FLAGS_];
  jlong resFlags = low;
  if (flagsSizeIsLong_) {
    jint high = [edges_ getIntWithLong:edgePointer + E_FLAGS_ + 4];
    resFlags = [((BitUtil *) nil_chk(bitUtil_)) combineIntsToLongWithInt:low withInt:high];
  }
  if (reverse) resFlags = [self reverseFlagsWithLong:edgePointer withLong:resFlags];
  return resFlags;
}

- (jlong)setFlags_WithLong:(jlong)edgePointer
               withBoolean:(jboolean)reverse
                  withLong:(jlong)flags {
  if (reverse) flags = [self reverseFlagsWithLong:edgePointer withLong:flags];
  [((id<DataAccess>) nil_chk(edges_)) setIntWithLong:edgePointer + E_FLAGS_ withInt:[((BitUtil *) nil_chk(bitUtil_)) getIntLowWithLong:flags]];
  if (flagsSizeIsLong_) [edges_ setIntWithLong:edgePointer + E_FLAGS_ + 4 withInt:[bitUtil_ getIntHighWithLong:flags]];
  return flags;
}

- (jint)internalEdgeAddWithInt:(jint)newEdgeId
                       withInt:(jint)fromNodeId
                       withInt:(jint)toNodeId {
  EdgeAccess_writeEdgeWithInt_withInt_withInt_withInt_withInt_(self, newEdgeId, fromNodeId, toNodeId, EdgeIterator_NO_EDGE, EdgeIterator_NO_EDGE);
  EdgeAccess_connectNewEdgeWithInt_withInt_(self, fromNodeId, newEdgeId);
  if (fromNodeId != toNodeId) EdgeAccess_connectNewEdgeWithInt_withInt_(self, toNodeId, newEdgeId);
  return newEdgeId;
}

- (jint)getOtherNodeWithInt:(jint)nodeThis
                   withLong:(jlong)edgePointer {
  return EdgeAccess_getOtherNodeWithInt_withLong_(self, nodeThis, edgePointer);
}

- (jlong)_getLinkPosInEdgeAreaWithInt:(jint)nodeThis
                              withInt:(jint)nodeOther
                             withLong:(jlong)edgePointer {
  return EdgeAccess__getLinkPosInEdgeAreaWithInt_withInt_withLong_(self, nodeThis, nodeOther, edgePointer);
}

- (jint)getEdgeRefWithInt:(jint)nodeThis
                  withInt:(jint)nodeOther
                 withLong:(jlong)edgePointer {
  return EdgeAccess_getEdgeRefWithInt_withInt_withLong_(self, nodeThis, nodeOther, edgePointer);
}

- (void)connectNewEdgeWithInt:(jint)fromNode
                      withInt:(jint)newOrExistingEdge {
  EdgeAccess_connectNewEdgeWithInt_withInt_(self, fromNode, newOrExistingEdge);
}

- (jlong)writeEdgeWithInt:(jint)edgeId
                  withInt:(jint)nodeThis
                  withInt:(jint)nodeOther
                  withInt:(jint)nextEdge
                  withInt:(jint)nextEdgeOther {
  return EdgeAccess_writeEdgeWithInt_withInt_withInt_withInt_withInt_(self, edgeId, nodeThis, nodeOther, nextEdge, nextEdgeOther);
}

- (jlong)internalEdgeDisconnectWithInt:(jint)edgeToRemove
                              withLong:(jlong)edgeToUpdatePointer
                               withInt:(jint)baseNode
                               withInt:(jint)adjNode {
  jlong edgeToRemovePointer = [self toPointerWithInt:edgeToRemove];
  jint nextEdgeId = EdgeAccess_getEdgeRefWithInt_withInt_withLong_(self, baseNode, adjNode, edgeToRemovePointer);
  if (edgeToUpdatePointer < 0) {
    [self setEdgeRefWithInt:baseNode withInt:nextEdgeId];
  }
  else {
    jlong link = [((id<DataAccess>) nil_chk(edges_)) getIntWithLong:edgeToUpdatePointer + E_NODEA_] == baseNode ? edgeToUpdatePointer + E_LINKA_ : edgeToUpdatePointer + E_LINKB_;
    [edges_ setIntWithLong:link withInt:nextEdgeId];
  }
  return edgeToRemovePointer;
}

- (id<EdgeIteratorState>)getEdgePropsWithInt:(jint)edgeId
                                     withInt:(jint)adjNode {
  if (edgeId <= EdgeIterator_NO_EDGE) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$I$@", @"edgeId invalid ", edgeId, @", ", self)] autorelease];
  BaseGraph_EdgeIterable *edge = [self createSingleEdgeWithEdgeFilter:EdgeFilter_get_ALL_EDGES_()];
  if ([((BaseGraph_EdgeIterable *) nil_chk(edge)) init__WithInt:edgeId withInt:adjNode]) return edge;
  return nil;
}

- (void)dealloc {
  RELEASE_(edges_);
  RELEASE_(bitUtil_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(EdgeAccess *)other {
  [super copyAllFieldsTo:other];
  EdgeAccess_set_edges_(other, edges_);
  EdgeAccess_set_bitUtil_(other, bitUtil_);
  other->E_NODEA_ = E_NODEA_;
  other->E_NODEB_ = E_NODEB_;
  other->E_LINKA_ = E_LINKA_;
  other->E_LINKB_ = E_LINKB_;
  other->E_DIST_ = E_DIST_;
  other->E_FLAGS_ = E_FLAGS_;
  other->flagsSizeIsLong_ = flagsSizeIsLong_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDataAccess:withBitUtil:", "EdgeAccess", NULL, 0x0, NULL },
    { "init__WithInt:withInt:withInt:withInt:withInt:withInt:withBoolean:", "init", "V", 0x10, NULL },
    { "createSingleEdgeWithEdgeFilter:", "createSingleEdge", "Lcom.graphhopper.storage.BaseGraph$EdgeIterable;", 0x400, NULL },
    { "toPointerWithInt:", "toPointer", "J", 0x400, NULL },
    { "isInBoundsWithInt:", "isInBounds", "Z", 0x400, NULL },
    { "reverseFlagsWithLong:withLong:", "reverseFlags", "J", 0x400, NULL },
    { "getEdgeRefWithInt:", "getEdgeRef", "I", 0x400, NULL },
    { "setEdgeRefWithInt:withInt:", "setEdgeRef", "V", 0x400, NULL },
    { "getEntryBytes", NULL, "I", 0x400, NULL },
    { "invalidateEdgeWithLong:", "invalidateEdge", "V", 0x10, NULL },
    { "setDistWithLong:withDouble:", "setDist", "V", 0x10, NULL },
    { "distToIntWithDouble:", "distToInt", "I", 0x2, NULL },
    { "getDistWithLong:", "getDist", "D", 0x10, NULL },
    { "getFlags_WithLong:withBoolean:", "getFlags_", "J", 0x10, NULL },
    { "setFlags_WithLong:withBoolean:withLong:", "setFlags_", "J", 0x10, NULL },
    { "internalEdgeAddWithInt:withInt:withInt:", "internalEdgeAdd", "I", 0x10, NULL },
    { "getOtherNodeWithInt:withLong:", "getOtherNode", "I", 0x10, NULL },
    { "_getLinkPosInEdgeAreaWithInt:withInt:withLong:", "_getLinkPosInEdgeArea", "J", 0x2, NULL },
    { "getEdgeRefWithInt:withInt:withLong:", "getEdgeRef", "I", 0x10, NULL },
    { "connectNewEdgeWithInt:withInt:", "connectNewEdge", "V", 0x10, NULL },
    { "writeEdgeWithInt:withInt:withInt:withInt:withInt:", "writeEdge", "J", 0x10, NULL },
    { "internalEdgeDisconnectWithInt:withLong:withInt:withInt:", "internalEdgeDisconnect", "J", 0x10, NULL },
    { "getEdgePropsWithInt:withInt:", "getEdgeProps", "Lcom.graphhopper.util.EdgeIteratorState;", 0x10, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NO_NODE_", NULL, 0x18, "I", NULL, .constantValue.asInt = EdgeAccess_NO_NODE },
    { "INT_DIST_FACTOR_", NULL, 0x1a, "D", NULL, .constantValue.asDouble = EdgeAccess_INT_DIST_FACTOR },
    { "MAX_DIST_", NULL, 0x8, "D", &EdgeAccess_MAX_DIST_,  },
    { "edges_", NULL, 0x10, "Lcom.graphhopper.storage.DataAccess;", NULL,  },
    { "bitUtil_", NULL, 0x12, "Lcom.graphhopper.util.BitUtil;", NULL,  },
    { "E_NODEA_", NULL, 0x0, "I", NULL,  },
    { "E_NODEB_", NULL, 0x0, "I", NULL,  },
    { "E_LINKA_", NULL, 0x0, "I", NULL,  },
    { "E_LINKB_", NULL, 0x0, "I", NULL,  },
    { "E_DIST_", NULL, 0x0, "I", NULL,  },
    { "E_FLAGS_", NULL, 0x0, "I", NULL,  },
    { "flagsSizeIsLong_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _EdgeAccess = { 1, "EdgeAccess", "com.graphhopper.storage", NULL, 0x400, 23, methods, 12, fields, 0, NULL};
  return &_EdgeAccess;
}

@end

jint EdgeAccess_distToIntWithDouble_(EdgeAccess *self, jdouble distance) {
  jint integ = J2ObjCFpToInt((distance * EdgeAccess_INT_DIST_FACTOR));
  if (integ < 0) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$D", @"Distance cannot be negative: ", distance)] autorelease];
  if (integ >= JavaLangInteger_MAX_VALUE) return JavaLangInteger_MAX_VALUE;
  return integ;
}

jint EdgeAccess_getOtherNodeWithInt_withLong_(EdgeAccess *self, jint nodeThis, jlong edgePointer) {
  jint nodeA = [((id<DataAccess>) nil_chk(self->edges_)) getIntWithLong:edgePointer + self->E_NODEA_];
  if (nodeA == nodeThis) return [self->edges_ getIntWithLong:edgePointer + self->E_NODEB_];
  return nodeA;
}

jlong EdgeAccess__getLinkPosInEdgeAreaWithInt_withInt_withLong_(EdgeAccess *self, jint nodeThis, jint nodeOther, jlong edgePointer) {
  return nodeThis <= nodeOther ? edgePointer + self->E_LINKA_ : edgePointer + self->E_LINKB_;
}

jint EdgeAccess_getEdgeRefWithInt_withInt_withLong_(EdgeAccess *self, jint nodeThis, jint nodeOther, jlong edgePointer) {
  return [((id<DataAccess>) nil_chk(self->edges_)) getIntWithLong:EdgeAccess__getLinkPosInEdgeAreaWithInt_withInt_withLong_(self, nodeThis, nodeOther, edgePointer)];
}

void EdgeAccess_connectNewEdgeWithInt_withInt_(EdgeAccess *self, jint fromNode, jint newOrExistingEdge) {
  jint edge = [self getEdgeRefWithInt:fromNode];
  if (edge > EdgeIterator_NO_EDGE) {
    jlong edgePointer = [self toPointerWithInt:newOrExistingEdge];
    jint otherNode = EdgeAccess_getOtherNodeWithInt_withLong_(self, fromNode, edgePointer);
    jlong lastLink = EdgeAccess__getLinkPosInEdgeAreaWithInt_withInt_withLong_(self, fromNode, otherNode, edgePointer);
    [((id<DataAccess>) nil_chk(self->edges_)) setIntWithLong:lastLink withInt:edge];
  }
  [self setEdgeRefWithInt:fromNode withInt:newOrExistingEdge];
}

jlong EdgeAccess_writeEdgeWithInt_withInt_withInt_withInt_withInt_(EdgeAccess *self, jint edgeId, jint nodeThis, jint nodeOther, jint nextEdge, jint nextEdgeOther) {
  if (nodeThis > nodeOther) {
    jint tmp = nodeThis;
    nodeThis = nodeOther;
    nodeOther = tmp;
    tmp = nextEdge;
    nextEdge = nextEdgeOther;
    nextEdgeOther = tmp;
  }
  if (edgeId < 0 || edgeId == EdgeIterator_NO_EDGE) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$I$I$I", @"Cannot write edge with illegal ID:", edgeId, @"; nodeThis:", nodeThis, @", nodeOther:", nodeOther)] autorelease];
  jlong edgePointer = [self toPointerWithInt:edgeId];
  [((id<DataAccess>) nil_chk(self->edges_)) setIntWithLong:edgePointer + self->E_NODEA_ withInt:nodeThis];
  [self->edges_ setIntWithLong:edgePointer + self->E_NODEB_ withInt:nodeOther];
  [self->edges_ setIntWithLong:edgePointer + self->E_LINKA_ withInt:nextEdge];
  [self->edges_ setIntWithLong:edgePointer + self->E_LINKB_ withInt:nextEdgeOther];
  return edgePointer;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EdgeAccess)
