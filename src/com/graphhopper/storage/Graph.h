//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/Graph.java
//

#ifndef _Graph_H_
#define _Graph_H_

@class BBox;
@protocol AllEdgesIterator;
@protocol EdgeExplorer;
@protocol EdgeFilter;
@protocol EdgeIteratorState;
@protocol GraphExtension;
@protocol NodeAccess;

#include "J2ObjC_header.h"

/**
 @brief An interface to represent a (geo) graph - suited for efficient storage as it can be requested via indices called node IDs.
 To get the lat,lon point you need to set up a LocationIndex instance. <p>
 @author Peter Karich
 */
@protocol Graph < NSObject, JavaObject >

/**
 @return a graph which behaves like an unprepared graph and e.g. the normal unidirectional Dijkstra or any graph traversal algorithm can be executed.
 */
- (id<Graph>)getBaseGraph;

/**
 @return the number of created locations - via setNode() or edge()
 */
- (jint)getNodes;

/**
 @brief Creates a node explorer to access node properties.
 */
- (id<NodeAccess>)getNodeAccess;

/**
 @brief Returns the implicit bounds of this graph calculated from the lat,lon input of setNode
 */
- (BBox *)getBounds;

/**
 @brief Creates an edge between the nodes a and b.
 To set distance or access use the returned edge and e.g. edgeState.setDistance <p>
 @param a the index of the starting (tower) node of the edge
 @param b the index of the ending (tower) node of the edge
 @return the newly created edge
 */
- (id<EdgeIteratorState>)edgeWithInt:(jint)a
                             withInt:(jint)b;

/**
 @brief Use edge(a,b).setDistance().setFlags instead
 */
- (id<EdgeIteratorState>)edgeWithInt:(jint)a
                             withInt:(jint)b
                          withDouble:(jdouble)distance
                         withBoolean:(jboolean)bothDirections;

/**
 @brief Returns a wrapper over the specified edgeId.
 <p>
 @param adjNode is the node that will be returned via adjNode(). If adjNode is Integer.MIN_VALUE then the edge with uncertain values for adjNode and baseNode (two possibilities) will be returned.
 @return an edge iterator state or potentially null if adjNode does not match
 @throws IllegalStateException if edgeId is not valid
 */
- (id<EdgeIteratorState>)getEdgeIteratorStateWithInt:(jint)edgeId
                                             withInt:(jint)adjNode;

/**
 @return all edges in this graph, where baseNode will be the smaller node.
 */
- (id<AllEdgesIterator>)getAllEdges;

/**
 @brief Returns an EdgeExplorer which makes it possible to traverse all filtered edges of a specific node.
 Reduce calling this method as much as possible, e.g. create an explorer before a for loop! <p>
 */
- (id<EdgeExplorer>)createEdgeExplorerWithEdgeFilter:(id<EdgeFilter>)filter;

/**
 */
- (id<EdgeExplorer>)createEdgeExplorer;

/**
 @brief Copy this Graph into the specified Graph g.
 <p>
 @return the specified Graph g
 */
- (id<Graph>)copyToWithGraph:(id<Graph>)g OBJC_METHOD_FAMILY_NONE;

/**
 @return the graph extension like a TurnCostExtension
 */
- (id<GraphExtension>)getExtension;

@end

J2OBJC_EMPTY_STATIC_INIT(Graph)

#define ComGraphhopperStorageGraph Graph

J2OBJC_TYPE_LITERAL_HEADER(Graph)

#endif // _Graph_H_
