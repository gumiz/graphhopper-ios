//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/RAMDataAccess.java
//

#ifndef _RAMDataAccess_H_
#define _RAMDataAccess_H_

@class DAType;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaNioByteOrder;
@protocol DataAccess;

#include "J2ObjC_header.h"
#include "com/graphhopper/storage/AbstractDataAccess.h"

/**
 @brief This is an in-memory byte-based data structure with the possibility to be stored on flush().
 Thread safe. <p>
 @author Peter Karich
 */
@interface RAMDataAccess : AbstractDataAccess {
}

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)location
                     withBoolean:(jboolean)store
            withJavaNioByteOrder:(JavaNioByteOrder *)order;

/**
 @param store true if in-memory data should be saved when calling flush
 */
- (RAMDataAccess *)storeWithBoolean:(jboolean)store;

- (jboolean)isStoring;

- (id<DataAccess>)copyToWithDataAccess:(id<DataAccess>)da OBJC_METHOD_FAMILY_NONE;

- (RAMDataAccess *)createWithLong:(jlong)bytes;

- (jboolean)ensureCapacityWithLong:(jlong)bytes;

- (jboolean)loadExisting;

- (void)flush;

- (void)setIntWithLong:(jlong)bytePos
               withInt:(jint)value;

- (jint)getIntWithLong:(jlong)bytePos;

- (void)setShortWithLong:(jlong)bytePos
               withShort:(jshort)value;

- (jshort)getShortWithLong:(jlong)bytePos;

- (void)setBytesWithLong:(jlong)bytePos
           withByteArray:(IOSByteArray *)values
                 withInt:(jint)length;

- (void)getBytesWithLong:(jlong)bytePos
           withByteArray:(IOSByteArray *)values
                 withInt:(jint)length;

- (void)close;

- (jlong)getCapacity;

- (jint)getSegments;

- (void)trimToWithLong:(jlong)capacity;

- (void)renameWithNSString:(NSString *)newName;

- (DAType *)getType;

@end

J2OBJC_EMPTY_STATIC_INIT(RAMDataAccess)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

typedef RAMDataAccess ComGraphhopperStorageRAMDataAccess;

J2OBJC_TYPE_LITERAL_HEADER(RAMDataAccess)

#endif // _RAMDataAccess_H_
