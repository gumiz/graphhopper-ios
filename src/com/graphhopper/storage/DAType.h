//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/DAType.java
//

#ifndef _DAType_H_
#define _DAType_H_

@class DAType_MemRefEnum;

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

/**
 @brief Defines how a DataAccess object is created.
 <p>
 @author Peter Karich
 */
@interface DAType : NSObject {
}

- (instancetype)initWithDAType:(DAType *)type
                   withBoolean:(jboolean)synched;

- (instancetype)initWithDAType_MemRefEnum:(DAType_MemRefEnum *)memRef
                              withBoolean:(jboolean)storing
                              withBoolean:(jboolean)integ
                              withBoolean:(jboolean)allowWrites
                              withBoolean:(jboolean)synched;

+ (DAType *)fromStringWithNSString:(NSString *)dataAccess;

/**
 @brief Memory mapped or purely in memory?
 default is HEAP
 */
- (DAType_MemRefEnum *)getMemRef;

- (jboolean)isAllowWrites;

/**
 @return true if data resides in the JVM heap.
 */
- (jboolean)isInMemory;

- (jboolean)isMMap;

/**
 @brief Temporary data or store (with loading and storing)?
 default is false
 */
- (jboolean)isStoring;

/**
 @brief Optimized for integer values?
 default is false
 */
- (jboolean)isInteg;

/**
 @brief Synchronized access wrapper around DataAccess objects?
 default is false and so an in-memory DataAccess object is only read-thread safe where a memory mapped one is not even read-threadsafe!
 */
- (jboolean)isSynched;

- (NSString *)description;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

@end

FOUNDATION_EXPORT BOOL DAType_initialized;
J2OBJC_STATIC_INIT(DAType)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT DAType *DAType_fromStringWithNSString_(NSString *dataAccess);

FOUNDATION_EXPORT DAType *DAType_RAM_;
J2OBJC_STATIC_FIELD_GETTER(DAType, RAM_, DAType *)

FOUNDATION_EXPORT DAType *DAType_RAM_INT_;
J2OBJC_STATIC_FIELD_GETTER(DAType, RAM_INT_, DAType *)

FOUNDATION_EXPORT DAType *DAType_RAM_STORE_;
J2OBJC_STATIC_FIELD_GETTER(DAType, RAM_STORE_, DAType *)

FOUNDATION_EXPORT DAType *DAType_RAM_INT_STORE_;
J2OBJC_STATIC_FIELD_GETTER(DAType, RAM_INT_STORE_, DAType *)

FOUNDATION_EXPORT DAType *DAType_MMAP_;
J2OBJC_STATIC_FIELD_GETTER(DAType, MMAP_, DAType *)

FOUNDATION_EXPORT DAType *DAType_MMAP_RO_;
J2OBJC_STATIC_FIELD_GETTER(DAType, MMAP_RO_, DAType *)

FOUNDATION_EXPORT DAType *DAType_UNSAFE_STORE_;
J2OBJC_STATIC_FIELD_GETTER(DAType, UNSAFE_STORE_, DAType *)
CF_EXTERN_C_END

typedef DAType ComGraphhopperStorageDAType;

J2OBJC_TYPE_LITERAL_HEADER(DAType)

typedef NS_ENUM(NSUInteger, DAType_MemRef) {
  DAType_MemRef_HEAP = 0,
  DAType_MemRef_MMAP = 1,
  DAType_MemRef_UNSAFE = 2,
};

@interface DAType_MemRefEnum : JavaLangEnum < NSCopying > {
}

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal;

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *DAType_MemRefEnum_values();

+ (DAType_MemRefEnum *)valueOfWithNSString:(NSString *)name;

FOUNDATION_EXPORT DAType_MemRefEnum *DAType_MemRefEnum_valueOfWithNSString_(NSString *name);
- (id)copyWithZone:(NSZone *)zone;

@end

FOUNDATION_EXPORT BOOL DAType_MemRefEnum_initialized;
J2OBJC_STATIC_INIT(DAType_MemRefEnum)

FOUNDATION_EXPORT DAType_MemRefEnum *DAType_MemRefEnum_values_[];

#define DAType_MemRefEnum_HEAP DAType_MemRefEnum_values_[DAType_MemRef_HEAP]
J2OBJC_ENUM_CONSTANT_GETTER(DAType_MemRefEnum, HEAP)

#define DAType_MemRefEnum_MMAP DAType_MemRefEnum_values_[DAType_MemRef_MMAP]
J2OBJC_ENUM_CONSTANT_GETTER(DAType_MemRefEnum, MMAP)

#define DAType_MemRefEnum_UNSAFE DAType_MemRefEnum_values_[DAType_MemRef_UNSAFE]
J2OBJC_ENUM_CONSTANT_GETTER(DAType_MemRefEnum, UNSAFE)

J2OBJC_TYPE_LITERAL_HEADER(DAType_MemRefEnum)

#endif // _DAType_H_
