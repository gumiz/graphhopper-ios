//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/coll/GHBitSet.h"
#include "com/graphhopper/routing/util/AllEdgesIterator.h"
#include "com/graphhopper/routing/util/EdgeFilter.h"
#include "com/graphhopper/routing/util/EncodingManager.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/BaseGraph.h"
#include "com/graphhopper/storage/CHGraph.h"
#include "com/graphhopper/storage/CHGraphImpl.h"
#include "com/graphhopper/storage/DAType.h"
#include "com/graphhopper/storage/DataAccess.h"
#include "com/graphhopper/storage/Directory.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/storage/GraphExtension.h"
#include "com/graphhopper/storage/GraphHopperStorage.h"
#include "com/graphhopper/storage/InternalGraphEventListener.h"
#include "com/graphhopper/storage/NodeAccess.h"
#include "com/graphhopper/storage/StorableProperties.h"
#include "com/graphhopper/util/EdgeExplorer.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/shapes/BBox.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/nio/ByteOrder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface GraphHopperStorage () {
 @public
  id<Directory> dir_;
  EncodingManager *encodingManager_;
  StorableProperties *properties_;
  BaseGraph *baseGraph_;
  id<JavaUtilCollection> chGraphs_;
}
@end

J2OBJC_FIELD_SETTER(GraphHopperStorage, dir_, id<Directory>)
J2OBJC_FIELD_SETTER(GraphHopperStorage, encodingManager_, EncodingManager *)
J2OBJC_FIELD_SETTER(GraphHopperStorage, properties_, StorableProperties *)
J2OBJC_FIELD_SETTER(GraphHopperStorage, baseGraph_, BaseGraph *)
J2OBJC_FIELD_SETTER(GraphHopperStorage, chGraphs_, id<JavaUtilCollection>)

@interface GraphHopperStorage_$1 () {
 @public
  GraphHopperStorage *this$0_;
}
@end

J2OBJC_FIELD_SETTER(GraphHopperStorage_$1, this$0_, GraphHopperStorage *)

@implementation GraphHopperStorage

- (instancetype)initWithDirectory:(id<Directory>)dir
              withEncodingManager:(EncodingManager *)encodingManager
                      withBoolean:(jboolean)withElevation
               withGraphExtension:(id<GraphExtension>)extendedStorage {
  return [self initGraphHopperStorageWithJavaUtilList:JavaUtilCollections_emptyList() withDirectory:dir withEncodingManager:encodingManager withBoolean:withElevation withGraphExtension:extendedStorage];
}

- (instancetype)initGraphHopperStorageWithJavaUtilList:(id<JavaUtilList>)chWeightings
                                         withDirectory:(id<Directory>)dir
                                   withEncodingManager:(EncodingManager *)encodingManager
                                           withBoolean:(jboolean)withElevation
                                    withGraphExtension:(id<GraphExtension>)extendedStorage {
  if (self = [super init]) {
    GraphHopperStorage_setAndConsume_chGraphs_(self, [[JavaUtilArrayList alloc] initWithInt:5]);
    if (extendedStorage == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"GraphExtension cannot be null, use NoOpExtension"] autorelease];
    if (encodingManager == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"EncodingManager needs to be non-null since 0.7. Create one using new EncodingManager or EncodingManager.create(flagEncoderFactory, ghLocation)"] autorelease];
    GraphHopperStorage_set_encodingManager_(self, encodingManager);
    GraphHopperStorage_set_dir_(self, dir);
    GraphHopperStorage_setAndConsume_properties_(self, [[StorableProperties alloc] initWithDirectory:dir]);
    id<InternalGraphEventListener> listener = [[[GraphHopperStorage_$1 alloc] initWithGraphHopperStorage:self] autorelease];
    GraphHopperStorage_setAndConsume_baseGraph_(self, [[BaseGraph alloc] initWithDirectory:dir withEncodingManager:encodingManager withBoolean:withElevation withInternalGraphEventListener:listener withGraphExtension:extendedStorage]);
    for (id<ComGraphhopperRoutingWeightingWeighting> __strong w in nil_chk(chWeightings)) {
      [chGraphs_ addWithId:[[[CHGraphImpl alloc] initWithComGraphhopperRoutingWeightingWeighting:w withDirectory:dir withBaseGraph:self->baseGraph_] autorelease]];
    }
  }
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)chWeightings
                       withDirectory:(id<Directory>)dir
                 withEncodingManager:(EncodingManager *)encodingManager
                         withBoolean:(jboolean)withElevation
                  withGraphExtension:(id<GraphExtension>)extendedStorage {
  return [self initGraphHopperStorageWithJavaUtilList:chWeightings withDirectory:dir withEncodingManager:encodingManager withBoolean:withElevation withGraphExtension:extendedStorage];
}

- (id)getGraphWithIOSClass:(IOSClass *)clazz
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting {
  if ([((IOSClass *) nil_chk(clazz)) isEqual:Graph_class_()]) return (id<Graph>) check_protocol_cast(baseGraph_, @protocol(Graph));
  if ([((id<JavaUtilCollection>) nil_chk(chGraphs_)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"Cannot find graph implementation for ", clazz)] autorelease];
  if (weighting == nil) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot find CHGraph with null weighting"] autorelease];
  id<JavaUtilList> existing = [[[JavaUtilArrayList alloc] init] autorelease];
  for (CHGraphImpl * __strong cg in chGraphs_) {
    if ([((CHGraphImpl *) nil_chk(cg)) getWeighting] == weighting) return (id<Graph>) check_protocol_cast(cg, @protocol(Graph));
    [existing addWithId:[cg getWeighting]];
  }
  @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@$@", @"Cannot find CHGraph for specified weighting: ", weighting, @", existing:", existing)] autorelease];
}

- (id)getGraphWithIOSClass:(IOSClass *)clazz {
  if ([((IOSClass *) nil_chk(clazz)) isEqual:Graph_class_()]) return (id<Graph>) check_protocol_cast(baseGraph_, @protocol(Graph));
  if ([((id<JavaUtilCollection>) nil_chk(chGraphs_)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"Cannot find graph implementation for ", clazz)] autorelease];
  id<CHGraph> cg = [((id<JavaUtilIterator>) nil_chk([chGraphs_ iterator])) next];
  return (id<Graph>) check_protocol_cast(cg, @protocol(Graph));
}

- (jboolean)isCHPossible {
  return ![((id<JavaUtilCollection>) nil_chk(chGraphs_)) isEmpty];
}

- (id<JavaUtilList>)getCHWeightings {
  id<JavaUtilList> list = [[[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilCollection>) nil_chk(chGraphs_)) size]] autorelease];
  for (CHGraphImpl * __strong cg in chGraphs_) {
    [list addWithId:[((CHGraphImpl *) nil_chk(cg)) getWeighting]];
  }
  return list;
}

- (id<Directory>)getDirectory {
  return dir_;
}

- (void)setSegmentSizeWithInt:(jint)bytes {
  [((BaseGraph *) nil_chk(baseGraph_)) setSegmentSizeWithInt:bytes];
  for (CHGraphImpl * __strong cg in nil_chk(chGraphs_)) {
    [((CHGraphImpl *) nil_chk(cg)) setSegmentSizeWithInt:bytes];
  }
}

- (GraphHopperStorage *)createWithLong:(jlong)byteCount {
  [((BaseGraph *) nil_chk(baseGraph_)) checkInit];
  if (encodingManager_ == nil) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"EncodingManager can only be null if you call loadExisting"] autorelease];
  [((id<Directory>) nil_chk(dir_)) create];
  jlong initSize = JavaLangMath_maxWithLong_withLong_(byteCount, 100);
  [((StorableProperties *) nil_chk(properties_)) createWithLong:100];
  [properties_ putWithNSString:@"graph.bytes_for_flags" withId:JavaLangInteger_valueOfWithInt_([((EncodingManager *) nil_chk(encodingManager_)) getBytesForFlags])];
  [properties_ putWithNSString:@"graph.flag_encoders" withNSString:[encodingManager_ toDetailsString]];
  [properties_ putWithNSString:@"graph.byte_order" withId:[dir_ getByteOrder]];
  [properties_ putWithNSString:@"graph.dimension" withId:JavaLangInteger_valueOfWithInt_([((id<NodeAccess>) nil_chk(baseGraph_->nodeAccess_)) getDimension])];
  [properties_ putCurrentVersions];
  [baseGraph_ createWithLong:initSize];
  for (CHGraphImpl * __strong cg in nil_chk(chGraphs_)) {
    [((CHGraphImpl *) nil_chk(cg)) createWithLong:byteCount];
  }
  [properties_ putWithNSString:@"graph.ch.weightings" withNSString:[((id<JavaUtilList>) nil_chk([self getCHWeightings])) description]];
  return self;
}

- (EncodingManager *)getEncodingManager {
  return encodingManager_;
}

- (StorableProperties *)getProperties {
  return properties_;
}

- (void)setAdditionalEdgeFieldWithLong:(jlong)edgePointer
                               withInt:(jint)value {
  [((BaseGraph *) nil_chk(baseGraph_)) setAdditionalEdgeFieldWithLong:edgePointer withInt:value];
}

- (void)markNodeRemovedWithInt:(jint)index {
  [((id<GHBitSet>) nil_chk([((BaseGraph *) nil_chk(baseGraph_)) getRemovedNodes])) addWithInt:index];
}

- (jboolean)isNodeRemovedWithInt:(jint)index {
  return [((id<GHBitSet>) nil_chk([((BaseGraph *) nil_chk(baseGraph_)) getRemovedNodes])) containsWithInt:index];
}

- (void)optimize {
  if ([self isFrozen]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"do not optimize after graph was frozen"] autorelease];
  jint delNodes = [((id<GHBitSet>) nil_chk([((BaseGraph *) nil_chk(baseGraph_)) getRemovedNodes])) getCardinality];
  if (delNodes <= 0) return;
  [baseGraph_ inPlaceNodeRemoveWithInt:delNodes];
  [baseGraph_ trimToSize];
}

- (jboolean)loadExisting {
  [((BaseGraph *) nil_chk(baseGraph_)) checkInit];
  if ([((StorableProperties *) nil_chk(properties_)) loadExisting]) {
    [properties_ checkVersionsWithBoolean:NO];
    NSString *flagEncodersStr = [properties_ getWithNSString:@"graph.flag_encoders"];
    if (![((NSString *) nil_chk(flagEncodersStr)) isEmpty] && ![((NSString *) nil_chk([((EncodingManager *) nil_chk(encodingManager_)) toDetailsString])) equalsIgnoreCase:flagEncodersStr]) {
      @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$$$$$$", @"Encoding does not match:\nGraphhopper config: ", [encodingManager_ toDetailsString], @"\nGraph: ", flagEncodersStr, @", dir:", [((id<Directory>) nil_chk(dir_)) getLocation])] autorelease];
    }
    NSString *byteOrder = [properties_ getWithNSString:@"graph.byte_order"];
    if (![((NSString *) nil_chk(byteOrder)) equalsIgnoreCase:JreStrcat("@", [((id<Directory>) nil_chk(dir_)) getByteOrder])]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@$$", @"Configured graph.byte_order (", [dir_ getByteOrder], @") is not equal to loaded ", byteOrder)] autorelease];
    NSString *bytesForFlags = [properties_ getWithNSString:@"graph.bytes_for_flags"];
    if (![((NSString *) nil_chk(bytesForFlags)) equalsIgnoreCase:JreStrcat("I", [((EncodingManager *) nil_chk(encodingManager_)) getBytesForFlags])]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$I$$", @"Configured graph.bytes_for_flags (", [encodingManager_ getBytesForFlags], @") is not equal to loaded ", bytesForFlags)] autorelease];
    NSString *dim = [properties_ getWithNSString:@"graph.dimension"];
    [baseGraph_ loadExistingWithNSString:dim];
    NSString *loadedCHWeightings = [properties_ getWithNSString:@"graph.ch.weightings"];
    NSString *configuredCHWeightings = [((id<JavaUtilList>) nil_chk([self getCHWeightings])) description];
    if (![((NSString *) nil_chk(loadedCHWeightings)) isEqual:configuredCHWeightings]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$$$$", @"Configured graph.ch.weightings: ", configuredCHWeightings, @" is not equal to loaded ", loadedCHWeightings)] autorelease];
    for (CHGraphImpl * __strong cg in nil_chk(chGraphs_)) {
      if (![((CHGraphImpl *) nil_chk(cg)) loadExisting]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"Cannot load ", cg)] autorelease];
    }
    return YES;
  }
  return NO;
}

- (void)flush {
  for (CHGraphImpl * __strong cg in nil_chk(chGraphs_)) {
    [((CHGraphImpl *) nil_chk(cg)) setEdgesHeader];
    [cg flush];
  }
  [((BaseGraph *) nil_chk(baseGraph_)) flush];
  [((StorableProperties *) nil_chk(properties_)) flush];
}

- (void)close {
  [((StorableProperties *) nil_chk(properties_)) close];
  [((BaseGraph *) nil_chk(baseGraph_)) close];
  for (CHGraphImpl * __strong cg in nil_chk(chGraphs_)) {
    [((CHGraphImpl *) nil_chk(cg)) close];
  }
}

- (jboolean)isClosed {
  return [((id<DataAccess>) nil_chk(((BaseGraph *) nil_chk(baseGraph_))->nodes_)) isClosed];
}

- (jlong)getCapacity {
  jlong cnt = [((BaseGraph *) nil_chk(baseGraph_)) getCapacity] + [((StorableProperties *) nil_chk(properties_)) getCapacity];
  for (CHGraphImpl * __strong cg in nil_chk(chGraphs_)) {
    cnt += [((CHGraphImpl *) nil_chk(cg)) getCapacity];
  }
  return cnt;
}

- (void)freeze {
  @synchronized(self) {
    if (![((BaseGraph *) nil_chk(baseGraph_)) isFrozen]) [baseGraph_ freeze];
  }
}

- (jboolean)isFrozen {
  return [((BaseGraph *) nil_chk(baseGraph_)) isFrozen];
}

- (NSString *)toDetailsString {
  NSString *str = [((BaseGraph *) nil_chk(baseGraph_)) toDetailsString];
  for (CHGraphImpl * __strong cg in nil_chk(chGraphs_)) {
    str = JreStrcat("$$", str, JreStrcat("$$", @", ", [((CHGraphImpl *) nil_chk(cg)) toDetailsString]));
  }
  return str;
}

- (NSString *)description {
  return JreStrcat("$@C@CI$@C$", ([self isCHPossible] ? @"CH|" : @""), encodingManager_, '|', [((id<Directory>) nil_chk([self getDirectory])) getDefaultType], '|', [((id<NodeAccess>) nil_chk(((BaseGraph *) nil_chk(baseGraph_))->nodeAccess_)) getDimension], @"D|", baseGraph_->extStorage_, '|', [((StorableProperties *) nil_chk([self getProperties])) versionsToString]);
}

- (id<Graph>)getBaseGraph {
  return baseGraph_;
}

- (jint)getNodes {
  return [((BaseGraph *) nil_chk(baseGraph_)) getNodes];
}

- (id<NodeAccess>)getNodeAccess {
  return [((BaseGraph *) nil_chk(baseGraph_)) getNodeAccess];
}

- (BBox *)getBounds {
  return [((BaseGraph *) nil_chk(baseGraph_)) getBounds];
}

- (id<EdgeIteratorState>)edgeWithInt:(jint)a
                             withInt:(jint)b {
  return [((BaseGraph *) nil_chk(baseGraph_)) edgeWithInt:a withInt:b];
}

- (id<EdgeIteratorState>)edgeWithInt:(jint)a
                             withInt:(jint)b
                          withDouble:(jdouble)distance
                         withBoolean:(jboolean)bothDirections {
  return [((BaseGraph *) nil_chk(baseGraph_)) edgeWithInt:a withInt:b withDouble:distance withBoolean:bothDirections];
}

- (id<EdgeIteratorState>)getEdgeIteratorStateWithInt:(jint)edgeId
                                             withInt:(jint)adjNode {
  return [((BaseGraph *) nil_chk(baseGraph_)) getEdgeIteratorStateWithInt:edgeId withInt:adjNode];
}

- (id<AllEdgesIterator>)getAllEdges {
  return [((BaseGraph *) nil_chk(baseGraph_)) getAllEdges];
}

- (id<EdgeExplorer>)createEdgeExplorerWithEdgeFilter:(id<EdgeFilter>)filter {
  return [((BaseGraph *) nil_chk(baseGraph_)) createEdgeExplorerWithEdgeFilter:filter];
}

- (id<EdgeExplorer>)createEdgeExplorer {
  return [((BaseGraph *) nil_chk(baseGraph_)) createEdgeExplorer];
}

- (id<Graph>)copyToWithGraph:(id<Graph>)g {
  return [((BaseGraph *) nil_chk(baseGraph_)) copyToWithGraph:g];
}

- (id<GraphExtension>)getExtension {
  return [((BaseGraph *) nil_chk(baseGraph_)) getExtension];
}

- (void)dealloc {
  RELEASE_(dir_);
  RELEASE_(encodingManager_);
  RELEASE_(properties_);
  RELEASE_(baseGraph_);
  RELEASE_(chGraphs_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GraphHopperStorage *)other {
  [super copyAllFieldsTo:other];
  GraphHopperStorage_set_dir_(other, dir_);
  GraphHopperStorage_set_encodingManager_(other, encodingManager_);
  GraphHopperStorage_set_properties_(other, properties_);
  GraphHopperStorage_set_baseGraph_(other, baseGraph_);
  GraphHopperStorage_set_chGraphs_(other, chGraphs_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDirectory:withEncodingManager:withBoolean:withGraphExtension:", "GraphHopperStorage", NULL, 0x1, NULL },
    { "initWithJavaUtilList:withDirectory:withEncodingManager:withBoolean:withGraphExtension:", "GraphHopperStorage", NULL, 0x1, NULL },
    { "getGraphWithIOSClass:withComGraphhopperRoutingWeightingWeighting:", "getGraph", "TT;", 0x1, NULL },
    { "getGraphWithIOSClass:", "getGraph", "TT;", 0x1, NULL },
    { "isCHPossible", NULL, "Z", 0x1, NULL },
    { "getCHWeightings", NULL, "Ljava.util.List;", 0x1, NULL },
    { "getDirectory", NULL, "Lcom.graphhopper.storage.Directory;", 0x1, NULL },
    { "setSegmentSizeWithInt:", "setSegmentSize", "V", 0x1, NULL },
    { "createWithLong:", "create", "Lcom.graphhopper.storage.GraphHopperStorage;", 0x1, NULL },
    { "getEncodingManager", NULL, "Lcom.graphhopper.routing.util.EncodingManager;", 0x1, NULL },
    { "getProperties", NULL, "Lcom.graphhopper.storage.StorableProperties;", 0x1, NULL },
    { "setAdditionalEdgeFieldWithLong:withInt:", "setAdditionalEdgeField", "V", 0x1, NULL },
    { "markNodeRemovedWithInt:", "markNodeRemoved", "V", 0x1, NULL },
    { "isNodeRemovedWithInt:", "isNodeRemoved", "Z", 0x1, NULL },
    { "optimize", NULL, "V", 0x1, NULL },
    { "loadExisting", NULL, "Z", 0x1, NULL },
    { "flush", NULL, "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "isClosed", NULL, "Z", 0x1, NULL },
    { "getCapacity", NULL, "J", 0x1, NULL },
    { "freeze", NULL, "V", 0x21, NULL },
    { "isFrozen", NULL, "Z", 0x0, NULL },
    { "toDetailsString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getBaseGraph", NULL, "Lcom.graphhopper.storage.Graph;", 0x1, NULL },
    { "getNodes", NULL, "I", 0x1, NULL },
    { "getNodeAccess", NULL, "Lcom.graphhopper.storage.NodeAccess;", 0x1, NULL },
    { "getBounds", NULL, "Lcom.graphhopper.util.shapes.BBox;", 0x1, NULL },
    { "edgeWithInt:withInt:", "edge", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "edgeWithInt:withInt:withDouble:withBoolean:", "edge", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getEdgeIteratorStateWithInt:withInt:", "getEdgeIteratorState", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getAllEdges", NULL, "Lcom.graphhopper.routing.util.AllEdgesIterator;", 0x1, NULL },
    { "createEdgeExplorerWithEdgeFilter:", "createEdgeExplorer", "Lcom.graphhopper.util.EdgeExplorer;", 0x1, NULL },
    { "createEdgeExplorer", NULL, "Lcom.graphhopper.util.EdgeExplorer;", 0x1, NULL },
    { "copyToWithGraph:", "copyTo", "Lcom.graphhopper.storage.Graph;", 0x1, NULL },
    { "getExtension", NULL, "Lcom.graphhopper.storage.GraphExtension;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dir_", NULL, 0x12, "Lcom.graphhopper.storage.Directory;", NULL,  },
    { "encodingManager_", NULL, 0x12, "Lcom.graphhopper.routing.util.EncodingManager;", NULL,  },
    { "properties_", NULL, 0x12, "Lcom.graphhopper.storage.StorableProperties;", NULL,  },
    { "baseGraph_", NULL, 0x12, "Lcom.graphhopper.storage.BaseGraph;", NULL,  },
    { "chGraphs_", NULL, 0x12, "Ljava.util.Collection;", NULL,  },
  };
  static const J2ObjcClassInfo _GraphHopperStorage = { 1, "GraphHopperStorage", "com.graphhopper.storage", NULL, 0x11, 36, methods, 5, fields, 0, NULL};
  return &_GraphHopperStorage;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GraphHopperStorage)

@implementation GraphHopperStorage_$1

- (void)initStorage {
  for (CHGraphImpl * __strong cg in nil_chk(this$0_->chGraphs_)) {
    [((CHGraphImpl *) nil_chk(cg)) initStorage];
  }
}

- (void)freeze {
  for (CHGraphImpl * __strong cg in nil_chk(this$0_->chGraphs_)) {
    [((CHGraphImpl *) nil_chk(cg)) _freeze];
  }
}

- (instancetype)initWithGraphHopperStorage:(GraphHopperStorage *)outer$ {
  GraphHopperStorage_$1_set_this$0_(self, outer$);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(GraphHopperStorage_$1 *)other {
  [super copyAllFieldsTo:other];
  GraphHopperStorage_$1_set_this$0_(other, this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initStorage", NULL, "V", 0x1, NULL },
    { "freeze", NULL, "V", 0x1, NULL },
    { "initWithGraphHopperStorage:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.graphhopper.storage.GraphHopperStorage;", NULL,  },
  };
  static const J2ObjcClassInfo _GraphHopperStorage_$1 = { 1, "$1", "com.graphhopper.storage", "GraphHopperStorage", 0x8000, 3, methods, 1, fields, 0, NULL};
  return &_GraphHopperStorage_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GraphHopperStorage_$1)
