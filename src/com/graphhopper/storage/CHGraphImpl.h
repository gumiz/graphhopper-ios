//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
//

#ifndef _CHGraphImpl_H_
#define _CHGraphImpl_H_

@class BBox;
@class BaseGraph;
@class BaseGraph_CommonEdgeIterator;
@class BitUtil;
@class PointList;
@protocol CHEdgeIteratorState;
@protocol ComGraphhopperRoutingWeightingWeighting;
@protocol DataAccess;
@protocol Directory;
@protocol EdgeFilter;
@protocol EdgeIteratorState;
@protocol FlagEncoder;
@protocol Graph;
@protocol GraphExtension;
@protocol NodeAccess;

#include "J2ObjC_header.h"
#include "com/graphhopper/routing/util/AllCHEdgesIterator.h"
#include "com/graphhopper/storage/BaseGraph.h"
#include "com/graphhopper/storage/CHGraph.h"
#include "com/graphhopper/storage/EdgeAccess.h"
#include "com/graphhopper/storage/Storable.h"
#include "com/graphhopper/util/CHEdgeExplorer.h"
#include "com/graphhopper/util/CHEdgeIterator.h"

#define CHGraphImpl_MAX_WEIGHT 536870.911
#define CHGraphImpl_MAX_WEIGHT_LONG 2147483644LL
#define CHGraphImpl_WEIGHT_FACTOR 1000.0

/**
 @brief A Graph implementation necessary for Contraction Hierarchies.
 This class enables the storage to hold the level of a node and shortcut edges per edge. <p>
 @author Peter Karich
 */
@interface CHGraphImpl : NSObject < CHGraph, Storable > {
 @public
  id<DataAccess> shortcuts_;
  id<DataAccess> nodesCH_;
  jlong scDirMask_;
  jint N_CH_REF_;
  jint shortcutEntryBytes_;
  jint nodeCHEntryBytes_;
}

- (instancetype)initWithComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)w
                                                  withDirectory:(id<Directory>)dir
                                                  withBaseGraph:(BaseGraph *)baseGraph;

- (id<ComGraphhopperRoutingWeightingWeighting>)getWeighting;

- (jboolean)isShortcutWithInt:(jint)edgeId;

- (void)setLevelWithInt:(jint)nodeIndex
                withInt:(jint)level;

- (jint)getLevelWithInt:(jint)nodeIndex;

- (void)checkNodeIdWithInt:(jint)nodeId;

- (id<CHEdgeIteratorState>)shortcutWithInt:(jint)a
                                   withInt:(jint)b;

- (jint)nextShortcutId;

- (id<EdgeIteratorState>)edgeWithInt:(jint)a
                             withInt:(jint)b
                          withDouble:(jdouble)distance
                         withBoolean:(jboolean)bothDirections;

- (id<CHEdgeIteratorState>)edgeWithInt:(jint)a
                               withInt:(jint)b;

- (id<CHEdgeExplorer>)createEdgeExplorer;

- (id<CHEdgeExplorer>)createEdgeExplorerWithEdgeFilter:(id<EdgeFilter>)filter;

- (id<CHEdgeIteratorState>)getEdgeIteratorStateWithInt:(jint)edgeId
                                               withInt:(jint)endNode;

- (jint)getNodes;

- (id<NodeAccess>)getNodeAccess;

- (BBox *)getBounds;

- (void)_freeze;

- (NSString *)toDetailsString;

/**
 @brief Disconnects the edges (higher to lower node) via the specified edgeState pointing from lower to higher node.
 <p>
 @param edgeState the edge from lower to higher
 */
- (void)disconnectWithCHEdgeExplorer:(id<CHEdgeExplorer>)explorer
               withEdgeIteratorState:(id<EdgeIteratorState>)edgeState;

- (id<AllCHEdgesIterator>)getAllEdges;

- (void)setWeightWithBaseGraph_CommonEdgeIterator:(BaseGraph_CommonEdgeIterator *)edge
                                       withDouble:(jdouble)weight;

- (jdouble)getWeightWithBaseGraph_CommonEdgeIterator:(BaseGraph_CommonEdgeIterator *)edge;

- (jint)loadEdgesHeader;

- (jint)setEdgesHeader;

- (id<GraphExtension>)getExtension;

- (id<Graph>)getBaseGraph;

- (id<Graph>)copyToWithGraph:(id<Graph>)g OBJC_METHOD_FAMILY_NONE;

- (void)initStorage OBJC_METHOD_FAMILY_NONE;

- (void)setSegmentSizeWithInt:(jint)bytes;

- (id<CHGraph>)createWithLong:(jlong)bytes;

- (jboolean)loadExisting;

- (void)flush;

- (void)close;

- (jboolean)isClosed;

- (jlong)getCapacity;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(CHGraphImpl)

J2OBJC_FIELD_SETTER(CHGraphImpl, shortcuts_, id<DataAccess>)
J2OBJC_FIELD_SETTER(CHGraphImpl, nodesCH_, id<DataAccess>)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(CHGraphImpl, WEIGHT_FACTOR, jdouble)

J2OBJC_STATIC_FIELD_GETTER(CHGraphImpl, MAX_WEIGHT_LONG, jlong)

J2OBJC_STATIC_FIELD_GETTER(CHGraphImpl, MAX_WEIGHT, jdouble)
CF_EXTERN_C_END

typedef CHGraphImpl ComGraphhopperStorageCHGraphImpl;

J2OBJC_TYPE_LITERAL_HEADER(CHGraphImpl)

@interface CHGraphImpl_CHEdgeIteratorImpl : BaseGraph_EdgeIterable < CHEdgeExplorer, CHEdgeIterator > {
}

- (instancetype)initWithCHGraphImpl:(CHGraphImpl *)outer$
                      withBaseGraph:(BaseGraph *)baseGraph
                     withEdgeAccess:(EdgeAccess *)edgeAccess
                     withEdgeFilter:(id<EdgeFilter>)filter;

- (jlong)getFlags;

- (id<CHEdgeIterator>)setBaseNodeWithInt:(jint)baseNode;

- (void)setSkippedEdgesWithInt:(jint)edge1
                       withInt:(jint)edge2;

- (jint)getSkippedEdge1;

- (jint)getSkippedEdge2;

- (jboolean)isShortcut;

- (jboolean)isBackwardWithFlagEncoder:(id<FlagEncoder>)encoder;

- (jboolean)isForwardWithFlagEncoder:(id<FlagEncoder>)encoder;

- (id<CHEdgeIteratorState>)setWeightWithDouble:(jdouble)weight;

- (jdouble)getWeight;

- (void)selectEdgeAccess;

- (void)checkShortcutWithBoolean:(jboolean)shouldBeShortcut
                    withNSString:(NSString *)methodName;

- (NSString *)getName;

- (id<EdgeIteratorState>)setNameWithNSString:(NSString *)name;

- (PointList *)fetchWayGeometryWithInt:(jint)mode;

- (id<EdgeIteratorState>)setWayGeometryWithPointList:(PointList *)list;

- (jboolean)canBeOverwrittenWithLong:(jlong)flags;

@end

J2OBJC_EMPTY_STATIC_INIT(CHGraphImpl_CHEdgeIteratorImpl)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(CHGraphImpl_CHEdgeIteratorImpl)

@interface CHGraphImpl_AllCHEdgesIteratorImpl : BaseGraph_AllEdgeIterator < AllCHEdgesIterator > {
}

- (instancetype)initWithCHGraphImpl:(CHGraphImpl *)outer$
                      withBaseGraph:(BaseGraph *)baseGraph;

- (jboolean)checkRange;

- (jint)getEdge;

- (jboolean)isBackwardWithFlagEncoder:(id<FlagEncoder>)encoder;

- (jboolean)isForwardWithFlagEncoder:(id<FlagEncoder>)encoder;

- (jlong)getFlags;

- (jint)getMaxId;

- (void)setSkippedEdgesWithInt:(jint)edge1
                       withInt:(jint)edge2;

- (jint)getSkippedEdge1;

- (jint)getSkippedEdge2;

- (jboolean)isShortcut;

- (id<CHEdgeIteratorState>)setWeightWithDouble:(jdouble)weight;

- (jdouble)getWeight;

- (jboolean)canBeOverwrittenWithLong:(jlong)flags;

@end

J2OBJC_EMPTY_STATIC_INIT(CHGraphImpl_AllCHEdgesIteratorImpl)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(CHGraphImpl_AllCHEdgesIteratorImpl)

@interface CHGraphImpl_$1 : EdgeAccess {
}

- (BaseGraph_EdgeIterable *)createSingleEdgeWithEdgeFilter:(id<EdgeFilter>)edgeFilter;

- (jint)getEdgeRefWithInt:(jint)nodeId;

- (void)setEdgeRefWithInt:(jint)nodeId
                  withInt:(jint)edgeId;

- (jint)getEntryBytes;

- (jlong)toPointerWithInt:(jint)shortcutId;

- (jboolean)isInBoundsWithInt:(jint)shortcutId;

- (jlong)reverseFlagsWithLong:(jlong)edgePointer
                     withLong:(jlong)flags;

- (NSString *)description;

- (instancetype)initWithCHGraphImpl:(CHGraphImpl *)outer$
                     withDataAccess:(id<DataAccess>)arg$0
                        withBitUtil:(BitUtil *)arg$1
                      withBaseGraph:(BaseGraph *)capture$0
                       withNSString:(NSString *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(CHGraphImpl_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(CHGraphImpl_$1)

#endif // _CHGraphImpl_H_
