//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/DAType.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/storage/DAType.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"

@interface DAType () {
 @public
  DAType_MemRefEnum *memRef_;
  jboolean storing_;
  jboolean integ_;
  jboolean synched_;
  jboolean allowWrites_;
}
@end

J2OBJC_FIELD_SETTER(DAType, memRef_, DAType_MemRefEnum *)

BOOL DAType_initialized = NO;

@implementation DAType

DAType * DAType_RAM_;
DAType * DAType_RAM_INT_;
DAType * DAType_RAM_STORE_;
DAType * DAType_RAM_INT_STORE_;
DAType * DAType_MMAP_;
DAType * DAType_MMAP_RO_;
DAType * DAType_UNSAFE_STORE_;

- (instancetype)initWithDAType:(DAType *)type
                   withBoolean:(jboolean)synched {
  if (self = [self initDATypeWithDAType_MemRefEnum:[((DAType *) nil_chk(type)) getMemRef] withBoolean:[type isStoring] withBoolean:[type isInteg] withBoolean:[type isAllowWrites] withBoolean:synched]) {
    if (!synched) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"constructor can only be used with synched=true"] autorelease];
    if ([type isSynched]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"something went wrong as DataAccess object is already synched!?"] autorelease];
  }
  return self;
}

- (instancetype)initDATypeWithDAType_MemRefEnum:(DAType_MemRefEnum *)memRef
                                    withBoolean:(jboolean)storing
                                    withBoolean:(jboolean)integ
                                    withBoolean:(jboolean)allowWrites
                                    withBoolean:(jboolean)synched {
  if (self = [super init]) {
    DAType_set_memRef_(self, memRef);
    self->storing_ = storing;
    self->integ_ = integ;
    self->allowWrites_ = allowWrites;
    self->synched_ = synched;
  }
  return self;
}

- (instancetype)initWithDAType_MemRefEnum:(DAType_MemRefEnum *)memRef
                              withBoolean:(jboolean)storing
                              withBoolean:(jboolean)integ
                              withBoolean:(jboolean)allowWrites
                              withBoolean:(jboolean)synched {
  return [self initDATypeWithDAType_MemRefEnum:memRef withBoolean:storing withBoolean:integ withBoolean:allowWrites withBoolean:synched];
}

+ (DAType *)fromStringWithNSString:(NSString *)dataAccess {
  return DAType_fromStringWithNSString_(dataAccess);
}

- (DAType_MemRefEnum *)getMemRef {
  return memRef_;
}

- (jboolean)isAllowWrites {
  return allowWrites_;
}

- (jboolean)isInMemory {
  return memRef_ == DAType_MemRefEnum_get_HEAP();
}

- (jboolean)isMMap {
  return memRef_ == DAType_MemRefEnum_get_MMAP();
}

- (jboolean)isStoring {
  return storing_;
}

- (jboolean)isInteg {
  return integ_;
}

- (jboolean)isSynched {
  return synched_;
}

- (NSString *)description {
  NSString *str;
  if ([self getMemRef] == DAType_MemRefEnum_get_MMAP()) str = @"MMAP";
  else if ([self getMemRef] == DAType_MemRefEnum_get_HEAP()) str = @"RAM";
  else str = @"UNSAFE";
  if ([self isInteg]) str = JreStrcat("$$", str, @"_INT");
  if ([self isStoring]) str = JreStrcat("$$", str, @"_STORE");
  if ([self isSynched]) str = JreStrcat("$$", str, @"_SYNC");
  return str;
}

- (NSUInteger)hash {
  jint hash_ = 7;
  hash_ = 59 * hash_ + 37 * ((jint) [((DAType_MemRefEnum *) nil_chk(self->memRef_)) hash]);
  hash_ = 59 * hash_ + (self->storing_ ? 1 : 0);
  hash_ = 59 * hash_ + (self->integ_ ? 1 : 0);
  hash_ = 59 * hash_ + (self->synched_ ? 1 : 0);
  return hash_;
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil) return NO;
  if ([self getClass] != [nil_chk(obj) getClass]) return NO;
  DAType *other = (DAType *) check_class_cast(obj, [DAType class]);
  if (self->memRef_ != other->memRef_) return NO;
  if (self->storing_ != other->storing_) return NO;
  if (self->integ_ != other->integ_) return NO;
  if (self->synched_ != other->synched_) return NO;
  return YES;
}

- (void)dealloc {
  RELEASE_(memRef_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(DAType *)other {
  [super copyAllFieldsTo:other];
  DAType_set_memRef_(other, memRef_);
  other->storing_ = storing_;
  other->integ_ = integ_;
  other->synched_ = synched_;
  other->allowWrites_ = allowWrites_;
}

+ (void)initialize {
  if (self == [DAType class]) {
    JreStrongAssignAndConsume(&DAType_RAM_, nil, [[DAType alloc] initWithDAType_MemRefEnum:DAType_MemRefEnum_get_HEAP() withBoolean:NO withBoolean:NO withBoolean:YES withBoolean:NO]);
    JreStrongAssignAndConsume(&DAType_RAM_INT_, nil, [[DAType alloc] initWithDAType_MemRefEnum:DAType_MemRefEnum_get_HEAP() withBoolean:NO withBoolean:YES withBoolean:YES withBoolean:NO]);
    JreStrongAssignAndConsume(&DAType_RAM_STORE_, nil, [[DAType alloc] initWithDAType_MemRefEnum:DAType_MemRefEnum_get_HEAP() withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:NO]);
    JreStrongAssignAndConsume(&DAType_RAM_INT_STORE_, nil, [[DAType alloc] initWithDAType_MemRefEnum:DAType_MemRefEnum_get_HEAP() withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO]);
    JreStrongAssignAndConsume(&DAType_MMAP_, nil, [[DAType alloc] initWithDAType_MemRefEnum:DAType_MemRefEnum_get_MMAP() withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:NO]);
    JreStrongAssignAndConsume(&DAType_MMAP_RO_, nil, [[DAType alloc] initWithDAType_MemRefEnum:DAType_MemRefEnum_get_MMAP() withBoolean:YES withBoolean:NO withBoolean:NO withBoolean:NO]);
    JreStrongAssignAndConsume(&DAType_UNSAFE_STORE_, nil, [[DAType alloc] initWithDAType_MemRefEnum:DAType_MemRefEnum_get_UNSAFE() withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:NO]);
    J2OBJC_SET_INITIALIZED(DAType)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDAType:withBoolean:", "DAType", NULL, 0x1, NULL },
    { "initWithDAType_MemRefEnum:withBoolean:withBoolean:withBoolean:withBoolean:", "DAType", NULL, 0x1, NULL },
    { "fromStringWithNSString:", "fromString", "Lcom.graphhopper.storage.DAType;", 0x9, NULL },
    { "getMemRef", NULL, "Lcom.graphhopper.storage.DAType$MemRef;", 0x0, NULL },
    { "isAllowWrites", NULL, "Z", 0x1, NULL },
    { "isInMemory", NULL, "Z", 0x1, NULL },
    { "isMMap", NULL, "Z", 0x1, NULL },
    { "isStoring", NULL, "Z", 0x1, NULL },
    { "isInteg", NULL, "Z", 0x1, NULL },
    { "isSynched", NULL, "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "RAM_", NULL, 0x19, "Lcom.graphhopper.storage.DAType;", &DAType_RAM_,  },
    { "RAM_INT_", NULL, 0x19, "Lcom.graphhopper.storage.DAType;", &DAType_RAM_INT_,  },
    { "RAM_STORE_", NULL, 0x19, "Lcom.graphhopper.storage.DAType;", &DAType_RAM_STORE_,  },
    { "RAM_INT_STORE_", NULL, 0x19, "Lcom.graphhopper.storage.DAType;", &DAType_RAM_INT_STORE_,  },
    { "MMAP_", NULL, 0x19, "Lcom.graphhopper.storage.DAType;", &DAType_MMAP_,  },
    { "MMAP_RO_", NULL, 0x19, "Lcom.graphhopper.storage.DAType;", &DAType_MMAP_RO_,  },
    { "UNSAFE_STORE_", NULL, 0x19, "Lcom.graphhopper.storage.DAType;", &DAType_UNSAFE_STORE_,  },
    { "memRef_", NULL, 0x12, "Lcom.graphhopper.storage.DAType$MemRef;", NULL,  },
    { "storing_", NULL, 0x12, "Z", NULL,  },
    { "integ_", NULL, 0x12, "Z", NULL,  },
    { "synched_", NULL, 0x12, "Z", NULL,  },
    { "allowWrites_", NULL, 0x12, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _DAType = { 1, "DAType", "com.graphhopper.storage", NULL, 0x1, 13, methods, 12, fields, 0, NULL};
  return &_DAType;
}

@end

DAType *DAType_fromStringWithNSString_(NSString *dataAccess) {
  DAType_init();
  dataAccess = [((NSString *) nil_chk(dataAccess)) uppercaseString];
  DAType *type;
  if ([((NSString *) nil_chk(dataAccess)) contains:@"MMAP"]) type = DAType_MMAP_;
  else if ([dataAccess contains:@"UNSAFE"]) type = DAType_UNSAFE_STORE_;
  else if ([dataAccess contains:@"RAM_STORE"]) type = DAType_RAM_STORE_;
  else type = DAType_RAM_;
  if ([dataAccess contains:@"SYNC"]) type = [[[DAType alloc] initWithDAType:type withBoolean:YES] autorelease];
  return type;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DAType)

BOOL DAType_MemRefEnum_initialized = NO;

DAType_MemRefEnum *DAType_MemRefEnum_values_[3];

@implementation DAType_MemRefEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

IOSObjectArray *DAType_MemRefEnum_values() {
  DAType_MemRefEnum_init();
  return [IOSObjectArray arrayWithObjects:DAType_MemRefEnum_values_ count:3 type:DAType_MemRefEnum_class_()];
}
+ (IOSObjectArray *)values {
  return DAType_MemRefEnum_values();
}

+ (DAType_MemRefEnum *)valueOfWithNSString:(NSString *)name {
  return DAType_MemRefEnum_valueOfWithNSString_(name);
}

DAType_MemRefEnum *DAType_MemRefEnum_valueOfWithNSString_(NSString *name) {
  DAType_MemRefEnum_init();
  for (int i = 0; i < 3; i++) {
    DAType_MemRefEnum *e = DAType_MemRefEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [DAType_MemRefEnum class]) {
    DAType_MemRefEnum_HEAP = [[DAType_MemRefEnum alloc] initWithNSString:@"HEAP" withInt:0];
    DAType_MemRefEnum_MMAP = [[DAType_MemRefEnum alloc] initWithNSString:@"MMAP" withInt:1];
    DAType_MemRefEnum_UNSAFE = [[DAType_MemRefEnum alloc] initWithNSString:@"UNSAFE" withInt:2];
    J2OBJC_SET_INITIALIZED(DAType_MemRefEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "init", NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HEAP", "HEAP", 0x4019, "Lcom.graphhopper.storage.DAType$MemRef;", &DAType_MemRefEnum_HEAP,  },
    { "MMAP", "MMAP", 0x4019, "Lcom.graphhopper.storage.DAType$MemRef;", &DAType_MemRefEnum_MMAP,  },
    { "UNSAFE", "UNSAFE", 0x4019, "Lcom.graphhopper.storage.DAType$MemRef;", &DAType_MemRefEnum_UNSAFE,  },
  };
  static const char *superclass_type_args[] = {"Lcom.graphhopper.storage.DAType$MemRef;"};
  static const J2ObjcClassInfo _DAType_MemRefEnum = { 1, "MemRef", "com.graphhopper.storage", "DAType", 0x4019, 1, methods, 3, fields, 1, superclass_type_args};
  return &_DAType_MemRefEnum;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DAType_MemRefEnum)
