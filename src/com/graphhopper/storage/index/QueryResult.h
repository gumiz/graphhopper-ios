//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/index/QueryResult.java
//

#ifndef _QueryResult_H_
#define _QueryResult_H_

@class GHPoint3D;
@class GHPoint;
@class QueryResult_PositionEnum;
@protocol DistanceCalc;
@protocol EdgeIteratorState;

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

/**
 @brief Result of LocationIndex lookup.
 <pre> X=query coordinates S=snapped coordinates: "snapping" real coords to road N=tower or pillar node T=closest tower node XS=distance X | T--S----N </pre> <p>
 @author Peter Karich
 */
@interface QueryResult : NSObject {
}

- (instancetype)initWithDouble:(jdouble)queryLat
                    withDouble:(jdouble)queryLon;

/**
 @return the closest matching node. -1 if nothing found, this should be avoided via a call of 'isValid'
 */
- (jint)getClosestNode;

- (void)setClosestNodeWithInt:(jint)node;

/**
 @return the distance of the query to the snapped coordinates. In meter
 */
- (jdouble)getQueryDistance;

- (void)setQueryDistanceWithDouble:(jdouble)dist;

/**
 @brief References to a tower node or the index of wayGeometry of the closest edge.
 If wayGeometry has length L then the wayIndex 0 refers to the *base* node, 1 to L (inclusive) refer to the wayGeometry indices (minus one) and L+1 to the *adjacent* node. Currently only initialized if returned from Location2NodesNtree.
 */
- (jint)getWayIndex;

- (void)setWayIndexWithInt:(jint)wayIndex;

/**
 @return 0 if on edge. 1 if on pillar node and 2 if on tower node.
 */
- (QueryResult_PositionEnum *)getSnappedPosition;

- (void)setSnappedPositionWithQueryResult_PositionEnum:(QueryResult_PositionEnum *)pos;

/**
 @return true if a close node was found
 */
- (jboolean)isValid;

/**
 @return the closest matching edge. Will be null if nothing found or call isValid before
 */
- (id<EdgeIteratorState>)getClosestEdge;

- (void)setClosestEdgeWithEdgeIteratorState:(id<EdgeIteratorState>)detach;

- (GHPoint *)getQueryPoint;

/**
 @brief Calculates the position of the query point 'snapped' to a close road segment or node.
 Call calcSnappedPoint before, if not, an IllegalStateException is thrown.
 */
- (GHPoint3D *)getSnappedPoint;

/**
 @brief Calculates the closet point on the edge from the query point.
 */
- (void)calcSnappedPointWithDistanceCalc:(id<DistanceCalc>)distCalc;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(QueryResult)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

typedef QueryResult ComGraphhopperStorageIndexQueryResult;

J2OBJC_TYPE_LITERAL_HEADER(QueryResult)

typedef NS_ENUM(NSUInteger, QueryResult_Position) {
  QueryResult_Position_EDGE = 0,
  QueryResult_Position_TOWER = 1,
  QueryResult_Position_PILLAR = 2,
};

@interface QueryResult_PositionEnum : JavaLangEnum < NSCopying > {
}

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal;

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *QueryResult_PositionEnum_values();

+ (QueryResult_PositionEnum *)valueOfWithNSString:(NSString *)name;

FOUNDATION_EXPORT QueryResult_PositionEnum *QueryResult_PositionEnum_valueOfWithNSString_(NSString *name);
- (id)copyWithZone:(NSZone *)zone;

@end

FOUNDATION_EXPORT BOOL QueryResult_PositionEnum_initialized;
J2OBJC_STATIC_INIT(QueryResult_PositionEnum)

FOUNDATION_EXPORT QueryResult_PositionEnum *QueryResult_PositionEnum_values_[];

#define QueryResult_PositionEnum_EDGE QueryResult_PositionEnum_values_[QueryResult_Position_EDGE]
J2OBJC_ENUM_CONSTANT_GETTER(QueryResult_PositionEnum, EDGE)

#define QueryResult_PositionEnum_TOWER QueryResult_PositionEnum_values_[QueryResult_Position_TOWER]
J2OBJC_ENUM_CONSTANT_GETTER(QueryResult_PositionEnum, TOWER)

#define QueryResult_PositionEnum_PILLAR QueryResult_PositionEnum_values_[QueryResult_Position_PILLAR]
J2OBJC_ENUM_CONSTANT_GETTER(QueryResult_PositionEnum, PILLAR)

J2OBJC_TYPE_LITERAL_HEADER(QueryResult_PositionEnum)

#endif // _QueryResult_H_
