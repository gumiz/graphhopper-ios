//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/index/LocationIndex.java
//

#ifndef _LocationIndex_H_
#define _LocationIndex_H_

@class QueryResult;
@protocol EdgeFilter;

#include "J2ObjC_header.h"
#include "com/graphhopper/storage/Storable.h"

/**
 @brief Provides a way to map real world data "lat,lon" to internal ids/indices of a memory efficient graph - often just implemented as an array.
 <p> The implementations of findID needs to be thread safe! <p>
 @author Peter Karich
 */
@protocol LocationIndex < Storable, NSObject, JavaObject >
/**
 @brief Integer value to specify the resolution of this location index.
 The higher the better the resolution.
 */
- (id<LocationIndex>)setResolutionWithInt:(jint)resolution;

/**
 @brief Creates this index - to be called once before findID.
 */
- (id<LocationIndex>)prepareIndex;

/**
 @return the closest node id for the specified geo location (latitude,longitude)
 */
- (jint)findIDWithDouble:(jdouble)lat
              withDouble:(jdouble)lon;

/**
 @brief This method returns the closest QueryResult for the specified location (lat, lon) and only if the filter accepts the edge as valid candidate (e.g. filtering away car-only results for bike search) <p>
 @param edgeFilter if a graph supports multiple vehicles we have to make sure that the entry node into the graph is accessible from a selected vehicle. E.g. if you have a FOOT-query do:      <pre> new DefaultEdgeFilter(footFlagEncoder); </pre>
 @return An object containing the closest node and edge for the specified location. The node id has at least one edge which is accepted from the specified edgeFilter. If nothing is found the method QueryResult.isValid will return false.
 */
- (QueryResult *)findClosestWithDouble:(jdouble)lat
                            withDouble:(jdouble)lon
                        withEdgeFilter:(id<EdgeFilter>)edgeFilter;

/**
 @param approxDist false if initialization and querying should be faster but less precise.
 */
- (id<LocationIndex>)setApproximationWithBoolean:(jboolean)approxDist;

- (void)setSegmentSizeWithInt:(jint)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(LocationIndex)

#define ComGraphhopperStorageIndexLocationIndex LocationIndex

J2OBJC_TYPE_LITERAL_HEADER(LocationIndex)

#endif // _LocationIndex_H_
