//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/index/BresenhamLine.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/storage/index/BresenhamLine.h"
#include "com/graphhopper/storage/index/PointEmitter.h"
#include "java/lang/Math.h"

@interface BresenhamLine_$1 () {
 @public
  id<PointEmitter> val$emitter_;
  jdouble val$deltaLat_;
  jdouble val$offsetLat_;
  jdouble val$deltaLon_;
  jdouble val$offsetLon_;
}
@end

J2OBJC_FIELD_SETTER(BresenhamLine_$1, val$emitter_, id<PointEmitter>)

@implementation BresenhamLine

+ (void)calcPointsWithInt:(jint)y1
                  withInt:(jint)x1
                  withInt:(jint)y2
                  withInt:(jint)x2
         withPointEmitter:(id<PointEmitter>)emitter {
  BresenhamLine_calcPointsWithInt_withInt_withInt_withInt_withPointEmitter_(y1, x1, y2, x2, emitter);
}

+ (void)bresenhamWithInt:(jint)y1
                 withInt:(jint)x1
                 withInt:(jint)y2
                 withInt:(jint)x2
        withPointEmitter:(id<PointEmitter>)emitter {
  BresenhamLine_bresenhamWithInt_withInt_withInt_withInt_withPointEmitter_(y1, x1, y2, x2, emitter);
}

+ (void)calcPointsWithDouble:(jdouble)lat1
                  withDouble:(jdouble)lon1
                  withDouble:(jdouble)lat2
                  withDouble:(jdouble)lon2
            withPointEmitter:(id<PointEmitter>)emitter
                  withDouble:(jdouble)offsetLat
                  withDouble:(jdouble)offsetLon
                  withDouble:(jdouble)deltaLat
                  withDouble:(jdouble)deltaLon {
  BresenhamLine_calcPointsWithDouble_withDouble_withDouble_withDouble_withPointEmitter_withDouble_withDouble_withDouble_withDouble_(lat1, lon1, lat2, lon2, emitter, offsetLat, offsetLon, deltaLat, deltaLon);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "calcPointsWithInt:withInt:withInt:withInt:withPointEmitter:", "calcPoints", "V", 0x9, NULL },
    { "bresenhamWithInt:withInt:withInt:withInt:withPointEmitter:", "bresenham", "V", 0x9, NULL },
    { "calcPointsWithDouble:withDouble:withDouble:withDouble:withPointEmitter:withDouble:withDouble:withDouble:withDouble:", "calcPoints", "V", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _BresenhamLine = { 1, "BresenhamLine", "com.graphhopper.storage.index", NULL, 0x1, 4, methods, 0, NULL, 0, NULL};
  return &_BresenhamLine;
}

@end

void BresenhamLine_calcPointsWithInt_withInt_withInt_withInt_withPointEmitter_(jint y1, jint x1, jint y2, jint x2, id<PointEmitter> emitter) {
  BresenhamLine_init();
  BresenhamLine_bresenhamWithInt_withInt_withInt_withInt_withPointEmitter_(y1, x1, y2, x2, emitter);
}

void BresenhamLine_bresenhamWithInt_withInt_withInt_withInt_withPointEmitter_(jint y1, jint x1, jint y2, jint x2, id<PointEmitter> emitter) {
  BresenhamLine_init();
  jboolean latIncreasing = y1 < y2;
  jboolean lonIncreasing = x1 < x2;
  jint dLat = JavaLangMath_absWithInt_(y2 - y1), sLat = latIncreasing ? 1 : -1;
  jint dLon = JavaLangMath_absWithInt_(x2 - x1), sLon = lonIncreasing ? 1 : -1;
  jint err = dLon - dLat;
  while (YES) {
    [((id<PointEmitter>) nil_chk(emitter)) setWithDouble:y1 withDouble:x1];
    if (y1 == y2 && x1 == x2) break;
    jint tmpErr = 2 * err;
    if (tmpErr > -dLat) {
      err -= dLat;
      x1 += sLon;
    }
    if (tmpErr < dLon) {
      err += dLon;
      y1 += sLat;
    }
  }
}

void BresenhamLine_calcPointsWithDouble_withDouble_withDouble_withDouble_withPointEmitter_withDouble_withDouble_withDouble_withDouble_(jdouble lat1, jdouble lon1, jdouble lat2, jdouble lon2, id<PointEmitter> emitter, jdouble offsetLat, jdouble offsetLon, jdouble deltaLat, jdouble deltaLon) {
  BresenhamLine_init();
  jint y1 = J2ObjCFpToInt(((lat1 - offsetLat) / deltaLat));
  jint x1 = J2ObjCFpToInt(((lon1 - offsetLon) / deltaLon));
  jint y2 = J2ObjCFpToInt(((lat2 - offsetLat) / deltaLat));
  jint x2 = J2ObjCFpToInt(((lon2 - offsetLon) / deltaLon));
  BresenhamLine_bresenhamWithInt_withInt_withInt_withInt_withPointEmitter_(y1, x1, y2, x2, [[[BresenhamLine_$1 alloc] initWithPointEmitter:emitter withDouble:deltaLat withDouble:offsetLat withDouble:deltaLon withDouble:offsetLon] autorelease]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BresenhamLine)

@implementation BresenhamLine_$1

- (void)setWithDouble:(jdouble)lat
           withDouble:(jdouble)lon {
  [((id<PointEmitter>) nil_chk(val$emitter_)) setWithDouble:(lat + .1) * val$deltaLat_ + val$offsetLat_ withDouble:(lon + .1) * val$deltaLon_ + val$offsetLon_];
}

- (instancetype)initWithPointEmitter:(id<PointEmitter>)capture$0
                          withDouble:(jdouble)capture$1
                          withDouble:(jdouble)capture$2
                          withDouble:(jdouble)capture$3
                          withDouble:(jdouble)capture$4 {
  BresenhamLine_$1_set_val$emitter_(self, capture$0);
  val$deltaLat_ = capture$1;
  val$offsetLat_ = capture$2;
  val$deltaLon_ = capture$3;
  val$offsetLon_ = capture$4;
  return [super init];
}

- (void)dealloc {
  RELEASE_(val$emitter_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(BresenhamLine_$1 *)other {
  [super copyAllFieldsTo:other];
  BresenhamLine_$1_set_val$emitter_(other, val$emitter_);
  other->val$deltaLat_ = val$deltaLat_;
  other->val$offsetLat_ = val$offsetLat_;
  other->val$deltaLon_ = val$deltaLon_;
  other->val$offsetLon_ = val$offsetLon_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setWithDouble:withDouble:", "set", "V", 0x1, NULL },
    { "initWithPointEmitter:withDouble:withDouble:withDouble:withDouble:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$emitter_", NULL, 0x1012, "Lcom.graphhopper.storage.index.PointEmitter;", NULL,  },
    { "val$deltaLat_", NULL, 0x1012, "D", NULL,  },
    { "val$offsetLat_", NULL, 0x1012, "D", NULL,  },
    { "val$deltaLon_", NULL, 0x1012, "D", NULL,  },
    { "val$offsetLon_", NULL, 0x1012, "D", NULL,  },
  };
  static const J2ObjcClassInfo _BresenhamLine_$1 = { 1, "$1", "com.graphhopper.storage.index", "BresenhamLine", 0x8000, 2, methods, 5, fields, 0, NULL};
  return &_BresenhamLine_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BresenhamLine_$1)
