//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/storage/SimpleFSLockFactory.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/storage/Lock.h"
#include "com/graphhopper/storage/SimpleFSLockFactory.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"

@interface SimpleFSLockFactory () {
 @public
  JavaIoFile *lockDir_;
}
@end

J2OBJC_FIELD_SETTER(SimpleFSLockFactory, lockDir_, JavaIoFile *)

@interface SimpleFSLockFactory_SimpleLock () {
 @public
  JavaIoFile *lockDir_;
  JavaIoFile *lockFile_;
  NSString *name_;
  JavaIoIOException *failedReason_;
}
@end

J2OBJC_FIELD_SETTER(SimpleFSLockFactory_SimpleLock, lockDir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(SimpleFSLockFactory_SimpleLock, lockFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(SimpleFSLockFactory_SimpleLock, name_, NSString *)
J2OBJC_FIELD_SETTER(SimpleFSLockFactory_SimpleLock, failedReason_, JavaIoIOException *)

@implementation SimpleFSLockFactory

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)dir {
  if (self = [super init]) {
    SimpleFSLockFactory_set_lockDir_(self, dir);
  }
  return self;
}

- (void)setLockDirWithJavaIoFile:(JavaIoFile *)lockDir {
  SimpleFSLockFactory_set_lockDir_(self, lockDir);
}

- (id<Lock>)createWithNSString:(NSString *)fileName
                   withBoolean:(jboolean)writeAccess {
  @synchronized(self) {
    if (lockDir_ == nil) @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"Set lockDir before creating locks"] autorelease];
    return [[[SimpleFSLockFactory_SimpleLock alloc] initWithJavaIoFile:lockDir_ withNSString:fileName] autorelease];
  }
}

- (void)forceRemoveWithNSString:(NSString *)fileName
                    withBoolean:(jboolean)writeAccess {
  @synchronized(self) {
    if ([((JavaIoFile *) nil_chk(lockDir_)) exists]) {
      JavaIoFile *lockFile = [[[JavaIoFile alloc] initWithJavaIoFile:lockDir_ withNSString:fileName] autorelease];
      if ([lockFile exists] && ![lockFile delete__]) @throw [[[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$@", @"Cannot delete ", lockFile)] autorelease];
    }
  }
}

- (void)dealloc {
  RELEASE_(lockDir_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(SimpleFSLockFactory *)other {
  [super copyAllFieldsTo:other];
  SimpleFSLockFactory_set_lockDir_(other, lockDir_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleFSLockFactory", NULL, 0x1, NULL },
    { "initWithJavaIoFile:", "SimpleFSLockFactory", NULL, 0x1, NULL },
    { "setLockDirWithJavaIoFile:", "setLockDir", "V", 0x1, NULL },
    { "createWithNSString:withBoolean:", "create", "Lcom.graphhopper.storage.Lock;", 0x21, NULL },
    { "forceRemoveWithNSString:withBoolean:", "forceRemove", "V", 0x21, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lockDir_", NULL, 0x2, "Ljava.io.File;", NULL,  },
  };
  static const J2ObjcClassInfo _SimpleFSLockFactory = { 1, "SimpleFSLockFactory", "com.graphhopper.storage", NULL, 0x1, 5, methods, 1, fields, 0, NULL};
  return &_SimpleFSLockFactory;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SimpleFSLockFactory)

@implementation SimpleFSLockFactory_SimpleLock

- (instancetype)initWithJavaIoFile:(JavaIoFile *)lockDir
                      withNSString:(NSString *)fileName {
  if (self = [super init]) {
    SimpleFSLockFactory_SimpleLock_set_name_(self, fileName);
    SimpleFSLockFactory_SimpleLock_set_lockDir_(self, lockDir);
    SimpleFSLockFactory_SimpleLock_setAndConsume_lockFile_(self, [[JavaIoFile alloc] initWithJavaIoFile:lockDir withNSString:fileName]);
  }
  return self;
}

- (jboolean)tryLock {
  @synchronized(self) {
    if (![((JavaIoFile *) nil_chk(lockDir_)) exists]) {
      if (![lockDir_ mkdirs]) @throw [[[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$@$@", @"Directory ", lockDir_, @" does not exist and cannot created to place lock file there: ", lockFile_)] autorelease];
    }
    if (![lockDir_ isDirectory]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@", @"lockDir has to be a directory: ", lockDir_)] autorelease];
    @try {
      return [((JavaIoFile *) nil_chk(lockFile_)) createNewFile];
    }
    @catch (JavaIoIOException *ex) {
      SimpleFSLockFactory_SimpleLock_set_failedReason_(self, ex);
      return NO;
    }
  }
}

- (jboolean)isLocked {
  @synchronized(self) {
    return [((JavaIoFile *) nil_chk(lockFile_)) exists];
  }
}

- (void)release__ {
  @synchronized(self) {
    if ([self isLocked] && [((JavaIoFile *) nil_chk(lockFile_)) exists] && ![lockFile_ delete__]) @throw [[[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$@", @"Cannot release lock file: ", lockFile_)] autorelease];
  }
}

- (NSString *)getName {
  return name_;
}

- (JavaLangException *)getObtainFailedReason {
  @synchronized(self) {
    return failedReason_;
  }
}

- (NSString *)description {
  return [((JavaIoFile *) nil_chk(lockFile_)) description];
}

- (void)dealloc {
  RELEASE_(lockDir_);
  RELEASE_(lockFile_);
  RELEASE_(name_);
  RELEASE_(failedReason_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(SimpleFSLockFactory_SimpleLock *)other {
  [super copyAllFieldsTo:other];
  SimpleFSLockFactory_SimpleLock_set_lockDir_(other, lockDir_);
  SimpleFSLockFactory_SimpleLock_set_lockFile_(other, lockFile_);
  SimpleFSLockFactory_SimpleLock_set_name_(other, name_);
  SimpleFSLockFactory_SimpleLock_set_failedReason_(other, failedReason_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoFile:withNSString:", "SimpleLock", NULL, 0x1, NULL },
    { "tryLock", NULL, "Z", 0x21, NULL },
    { "isLocked", NULL, "Z", 0x21, NULL },
    { "release__", "release", "V", 0x21, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getObtainFailedReason", NULL, "Ljava.lang.Exception;", 0x21, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lockDir_", NULL, 0x12, "Ljava.io.File;", NULL,  },
    { "lockFile_", NULL, 0x12, "Ljava.io.File;", NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "failedReason_", NULL, 0x2, "Ljava.io.IOException;", NULL,  },
  };
  static const J2ObjcClassInfo _SimpleFSLockFactory_SimpleLock = { 1, "SimpleLock", "com.graphhopper.storage", "SimpleFSLockFactory", 0x8, 7, methods, 4, fields, 0, NULL};
  return &_SimpleFSLockFactory_SimpleLock;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SimpleFSLockFactory_SimpleLock)
