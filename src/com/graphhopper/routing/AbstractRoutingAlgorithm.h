//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
//

#ifndef _AbstractRoutingAlgorithm_H_
#define _AbstractRoutingAlgorithm_H_

@class Path;
@class SPTEntry;
@class TraversalModeEnum;
@protocol ComGraphhopperRoutingWeightingWeighting;
@protocol EdgeExplorer;
@protocol EdgeFilter;
@protocol EdgeIterator;
@protocol EdgeIteratorState;
@protocol FlagEncoder;
@protocol Graph;
@protocol JavaUtilList;
@protocol NodeAccess;

#include "J2ObjC_header.h"
#include "com/graphhopper/routing/RoutingAlgorithm.h"

/**
 @author Peter Karich
 */
@interface AbstractRoutingAlgorithm : NSObject < RoutingAlgorithm > {
 @public
  id<Graph> graph_;
  id<ComGraphhopperRoutingWeightingWeighting> weighting_;
  id<FlagEncoder> flagEncoder_;
  TraversalModeEnum *traversalMode_;
  id<NodeAccess> nodeAccess_;
  id<EdgeExplorer> inEdgeExplorer_;
  id<EdgeExplorer> outEdgeExplorer_;
  jint maxVisitedNodes_;
}

/**
 @param graph specifies the graph where this algorithm will run on
 @param weighting set the used weight calculation (e.g. fastest, shortest).
 @param traversalMode how the graph is traversed e.g. if via nodes or edges.
 */
- (instancetype)initWithGraph:(id<Graph>)graph
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
        withTraversalModeEnum:(TraversalModeEnum *)traversalMode;

- (void)setMaxVisitedNodesWithInt:(jint)numberOfNodes;

- (id<RoutingAlgorithm>)setEdgeFilterWithEdgeFilter:(id<EdgeFilter>)additionalEdgeFilter;

- (jboolean)acceptWithEdgeIterator:(id<EdgeIterator>)iter
                           withInt:(jint)prevOrNextEdgeId;

- (void)updateBestPathWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                               withSPTEntry:(SPTEntry *)bestSPTEntry
                                    withInt:(jint)traversalId;

- (void)checkAlreadyRun;

- (SPTEntry *)createSPTEntryWithInt:(jint)node
                         withDouble:(jdouble)weight;

/**
 @brief To be overwritten from extending class.
 Should we make this available in RoutingAlgorithm interface? <p>
 @return true if finished.
 */
- (jboolean)finished;

/**
 @brief To be overwritten from extending class.
 Should we make this available in RoutingAlgorithm interface? <p>
 @return true if finished.
 */
- (Path *)extractPath;

- (id<JavaUtilList>)calcPathsWithInt:(jint)from
                             withInt:(jint)to;

- (Path *)createEmptyPath;

- (NSString *)getName;

- (NSString *)description;

- (jboolean)isMaxVisitedNodesExceeded;

@end

J2OBJC_EMPTY_STATIC_INIT(AbstractRoutingAlgorithm)

J2OBJC_FIELD_SETTER(AbstractRoutingAlgorithm, graph_, id<Graph>)
J2OBJC_FIELD_SETTER(AbstractRoutingAlgorithm, weighting_, id<ComGraphhopperRoutingWeightingWeighting>)
J2OBJC_FIELD_SETTER(AbstractRoutingAlgorithm, flagEncoder_, id<FlagEncoder>)
J2OBJC_FIELD_SETTER(AbstractRoutingAlgorithm, traversalMode_, TraversalModeEnum *)
J2OBJC_FIELD_SETTER(AbstractRoutingAlgorithm, nodeAccess_, id<NodeAccess>)
J2OBJC_FIELD_SETTER(AbstractRoutingAlgorithm, inEdgeExplorer_, id<EdgeExplorer>)
J2OBJC_FIELD_SETTER(AbstractRoutingAlgorithm, outEdgeExplorer_, id<EdgeExplorer>)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

typedef AbstractRoutingAlgorithm ComGraphhopperRoutingAbstractRoutingAlgorithm;

J2OBJC_TYPE_LITERAL_HEADER(AbstractRoutingAlgorithm)

#endif // _AbstractRoutingAlgorithm_H_
