//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/routing/AStar.h"
#include "com/graphhopper/routing/AStarBidirection.h"
#include "com/graphhopper/routing/AlgorithmOptions.h"
#include "com/graphhopper/routing/AlternativeRoute.h"
#include "com/graphhopper/routing/Dijkstra.h"
#include "com/graphhopper/routing/DijkstraBidirectionRef.h"
#include "com/graphhopper/routing/DijkstraOneToMany.h"
#include "com/graphhopper/routing/RoutingAlgorithm.h"
#include "com/graphhopper/routing/RoutingAlgorithmFactorySimple.h"
#include "com/graphhopper/routing/util/TraversalMode.h"
#include "com/graphhopper/routing/weighting/BeelineWeightApproximator.h"
#include "com/graphhopper/routing/weighting/WeightApproximator.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/storage/NodeAccess.h"
#include "com/graphhopper/util/DistanceCalc.h"
#include "com/graphhopper/util/DistancePlaneProjection.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/PMap.h"
#include "com/graphhopper/util/Parameters.h"
#include "java/lang/IllegalArgumentException.h"

@implementation RoutingAlgorithmFactorySimple

- (id<RoutingAlgorithm>)createAlgoWithGraph:(id<Graph>)g
                       withAlgorithmOptions:(AlgorithmOptions *)opts {
  id<RoutingAlgorithm> ra;
  NSString *algoStr = [((AlgorithmOptions *) nil_chk(opts)) getAlgorithm];
  if ([((NSString *) nil_chk(Parameters_Algorithms_get_DIJKSTRA_BI_())) equalsIgnoreCase:algoStr]) {
    ra = [[[DijkstraBidirectionRef alloc] initWithGraph:g withComGraphhopperRoutingWeightingWeighting:[opts getWeighting] withTraversalModeEnum:[opts getTraversalMode]] autorelease];
  }
  else if ([((NSString *) nil_chk(Parameters_Algorithms_get_DIJKSTRA_())) equalsIgnoreCase:algoStr]) {
    ra = [[[Dijkstra alloc] initWithGraph:g withComGraphhopperRoutingWeightingWeighting:[opts getWeighting] withTraversalModeEnum:[opts getTraversalMode]] autorelease];
  }
  else if ([((NSString *) nil_chk(Parameters_Algorithms_get_ASTAR_BI_())) equalsIgnoreCase:algoStr]) {
    AStarBidirection *aStarBi = [[[AStarBidirection alloc] initWithGraph:g withComGraphhopperRoutingWeightingWeighting:[opts getWeighting] withTraversalModeEnum:[opts getTraversalMode]] autorelease];
    [aStarBi setApproximationWithComGraphhopperRoutingWeightingWeightApproximator:RoutingAlgorithmFactorySimple_getApproximationWithNSString_withAlgorithmOptions_withNodeAccess_(Parameters_Algorithms_get_ASTAR_BI_(), opts, [((id<Graph>) nil_chk(g)) getNodeAccess])];
    ra = aStarBi;
  }
  else if ([((NSString *) nil_chk(Parameters_Algorithms_get_DIJKSTRA_ONE_TO_MANY_())) equalsIgnoreCase:algoStr]) {
    ra = [[[DijkstraOneToMany alloc] initWithGraph:g withComGraphhopperRoutingWeightingWeighting:[opts getWeighting] withTraversalModeEnum:[opts getTraversalMode]] autorelease];
  }
  else if ([((NSString *) nil_chk(Parameters_Algorithms_get_ASTAR_())) equalsIgnoreCase:algoStr]) {
    AStar *aStar = [[[AStar alloc] initWithGraph:g withComGraphhopperRoutingWeightingWeighting:[opts getWeighting] withTraversalModeEnum:[opts getTraversalMode]] autorelease];
    [aStar setApproximationWithComGraphhopperRoutingWeightingWeightApproximator:RoutingAlgorithmFactorySimple_getApproximationWithNSString_withAlgorithmOptions_withNodeAccess_(Parameters_Algorithms_get_ASTAR_(), opts, [((id<Graph>) nil_chk(g)) getNodeAccess])];
    ra = aStar;
  }
  else if ([((NSString *) nil_chk(Parameters_Algorithms_get_ALT_ROUTE_())) equalsIgnoreCase:algoStr]) {
    AlternativeRoute *altRouteAlgo = [[[AlternativeRoute alloc] initWithGraph:g withComGraphhopperRoutingWeightingWeighting:[opts getWeighting] withTraversalModeEnum:[opts getTraversalMode]] autorelease];
    [altRouteAlgo setMaxPathsWithInt:[((PMap *) nil_chk([opts getHints])) getIntWithNSString:Parameters_Algorithms_AltRoute_get_MAX_PATHS_() withInt:2]];
    [altRouteAlgo setMaxWeightFactorWithDouble:[((PMap *) nil_chk([opts getHints])) getDoubleWithNSString:Parameters_Algorithms_AltRoute_get_MAX_WEIGHT_() withDouble:1.4]];
    [altRouteAlgo setMaxShareFactorWithDouble:[((PMap *) nil_chk([opts getHints])) getDoubleWithNSString:Parameters_Algorithms_AltRoute_get_MAX_SHARE_() withDouble:0.6]];
    [altRouteAlgo setMinPlateauFactorWithDouble:[((PMap *) nil_chk([opts getHints])) getDoubleWithNSString:@"alternative_route.min_plateau_factor" withDouble:0.2]];
    [altRouteAlgo setMaxExplorationFactorWithDouble:[((PMap *) nil_chk([opts getHints])) getDoubleWithNSString:@"alternative_route.max_exploration_factor" withDouble:1]];
    ra = altRouteAlgo;
  }
  else {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$$$", @"Algorithm ", algoStr, @" not found in ", [[self getClass] getName])] autorelease];
  }
  [((id<RoutingAlgorithm>) nil_chk(ra)) setMaxVisitedNodesWithInt:[opts getMaxVisitedNodes]];
  return ra;
}

+ (id<ComGraphhopperRoutingWeightingWeightApproximator>)getApproximationWithNSString:(NSString *)prop
                                                                withAlgorithmOptions:(AlgorithmOptions *)opts
                                                                      withNodeAccess:(id<NodeAccess>)na {
  return RoutingAlgorithmFactorySimple_getApproximationWithNSString_withAlgorithmOptions_withNodeAccess_(prop, opts, na);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createAlgoWithGraph:withAlgorithmOptions:", "createAlgo", "Lcom.graphhopper.routing.RoutingAlgorithm;", 0x1, NULL },
    { "getApproximationWithNSString:withAlgorithmOptions:withNodeAccess:", "getApproximation", "Lcom.graphhopper.routing.weighting.WeightApproximator;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _RoutingAlgorithmFactorySimple = { 1, "RoutingAlgorithmFactorySimple", "com.graphhopper.routing", NULL, 0x1, 3, methods, 0, NULL, 0, NULL};
  return &_RoutingAlgorithmFactorySimple;
}

@end

id<ComGraphhopperRoutingWeightingWeightApproximator> RoutingAlgorithmFactorySimple_getApproximationWithNSString_withAlgorithmOptions_withNodeAccess_(NSString *prop, AlgorithmOptions *opts, id<NodeAccess> na) {
  RoutingAlgorithmFactorySimple_init();
  NSString *approxAsStr = [((PMap *) nil_chk([((AlgorithmOptions *) nil_chk(opts)) getHints])) getWithNSString:JreStrcat("$$", prop, @".approximation") withNSString:@"BeelineSimplification"];
  jdouble epsilon = [((PMap *) nil_chk([opts getHints])) getDoubleWithNSString:JreStrcat("$$", prop, @".epsilon") withDouble:1];
  ComGraphhopperRoutingWeightingBeelineWeightApproximator *approx = [[[ComGraphhopperRoutingWeightingBeelineWeightApproximator alloc] initWithNodeAccess:na withComGraphhopperRoutingWeightingWeighting:[opts getWeighting]] autorelease];
  [approx setEpsilonWithDouble:epsilon];
  if ([@"BeelineSimplification" isEqual:approxAsStr]) [approx setDistanceCalcWithDistanceCalc:Helper_get_DIST_PLANE_()];
  else if ([@"BeelineAccurate" isEqual:approxAsStr]) [approx setDistanceCalcWithDistanceCalc:Helper_get_DIST_EARTH_()];
  else @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$$$", @"Approximation ", approxAsStr, @" not found in ", [RoutingAlgorithmFactorySimple_class_() getName])] autorelease];
  return approx;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RoutingAlgorithmFactorySimple)
