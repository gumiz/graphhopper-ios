//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/Car4WDFlagEncoder.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/ConditionalTagInspector.h"
#include "com/graphhopper/reader/ReaderWay.h"
#include "com/graphhopper/routing/util/AbstractFlagEncoder.h"
#include "com/graphhopper/routing/util/Car4WDFlagEncoder.h"
#include "com/graphhopper/util/PMap.h"
#include "java/lang/Integer.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@implementation Car4WDFlagEncoder

- (instancetype)init {
  return [self initCar4WDFlagEncoderWithInt:5 withDouble:5 withInt:0];
}

- (instancetype)initCar4WDFlagEncoderWithPMap:(PMap *)properties {
  return [super initWithPMap:properties];
}

- (instancetype)initWithPMap:(PMap *)properties {
  return [self initCar4WDFlagEncoderWithPMap:properties];
}

- (instancetype)initWithNSString:(NSString *)propertiesStr {
  return [self initCar4WDFlagEncoderWithPMap:[[[PMap alloc] initWithNSString:propertiesStr] autorelease]];
}

- (instancetype)initCar4WDFlagEncoderWithInt:(jint)speedBits
                                  withDouble:(jdouble)speedFactor
                                     withInt:(jint)maxTurnCosts {
  if (self = [super initWithInt:speedBits withDouble:speedFactor withInt:maxTurnCosts]) {
    [self init__];
    [((id<JavaUtilMap>) nil_chk(trackTypeSpeedMap_)) putWithId:@"grade4" withId:JavaLangInteger_valueOfWithInt_(5)];
    [trackTypeSpeedMap_ putWithId:@"grade5" withId:JavaLangInteger_valueOfWithInt_(5)];
  }
  return self;
}

- (instancetype)initWithInt:(jint)speedBits
                 withDouble:(jdouble)speedFactor
                    withInt:(jint)maxTurnCosts {
  return [self initCar4WDFlagEncoderWithInt:speedBits withDouble:speedFactor withInt:maxTurnCosts];
}

- (jint)getVersion {
  return 1;
}

- (jlong)acceptWayWithReaderWay:(ReaderWay *)way {
  NSString *highwayValue = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway"];
  if (highwayValue == nil) {
    if ([way hasTagWithNSString:@"route" withJavaUtilSet:ferries_]) {
      NSString *motorcarTag = [way getTagWithNSString:@"motorcar"];
      if (motorcarTag == nil) motorcarTag = [way getTagWithNSString:@"motor_vehicle"];
      if ((motorcarTag == nil && ![way hasTagWithNSString:@"foot" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]] && ![way hasTagWithNSString:@"bicycle" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]]) || [@"yes" isEqual:motorcarTag]) return acceptBit_ | ferryBit_;
    }
    return 0;
  }
  if (![((id<JavaUtilMap>) nil_chk(defaultSpeedMap_)) containsKeyWithId:highwayValue]) return 0;
  if ([way hasTagWithNSString:@"impassable" withId:@"yes"] || [way hasTagWithNSString:@"status" withId:@"impassable"]) return 0;
  NSString *firstValue = [way getFirstPriorityTagWithJavaUtilList:restrictions_];
  if (![((NSString *) nil_chk(firstValue)) isEmpty]) {
    if ([((id<JavaUtilSet>) nil_chk(restrictedValues_)) containsWithId:firstValue] && ![((id<ConditionalTagInspector>) nil_chk([self getConditionalTagInspector])) isRestrictedWayConditionallyPermittedWithReaderWay:way]) return 0;
    if ([((id<JavaUtilSet>) nil_chk(intendedValues_)) containsWithId:firstValue]) return acceptBit_;
  }
  if ([self isBlockFords] && ([@"ford" isEqual:highwayValue] || [way hasTagWithNSString:@"ford" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]])) return 0;
  if ([((id<ConditionalTagInspector>) nil_chk([self getConditionalTagInspector])) isPermittedWayConditionallyRestrictedWithReaderWay:way]) return 0;
  else return acceptBit_;
}

- (NSString *)description {
  return @"car4wd";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Car4WDFlagEncoder", NULL, 0x1, NULL },
    { "initWithPMap:", "Car4WDFlagEncoder", NULL, 0x1, NULL },
    { "initWithNSString:", "Car4WDFlagEncoder", NULL, 0x1, NULL },
    { "initWithInt:withDouble:withInt:", "Car4WDFlagEncoder", NULL, 0x1, NULL },
    { "getVersion", NULL, "I", 0x1, NULL },
    { "acceptWayWithReaderWay:", "acceptWay", "J", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcClassInfo _Car4WDFlagEncoder = { 1, "Car4WDFlagEncoder", "com.graphhopper.routing.util", NULL, 0x1, 7, methods, 0, NULL, 0, NULL};
  return &_Car4WDFlagEncoder;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Car4WDFlagEncoder)
