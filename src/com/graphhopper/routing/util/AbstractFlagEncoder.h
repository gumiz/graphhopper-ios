//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
//

#ifndef _AbstractFlagEncoder_H_
#define _AbstractFlagEncoder_H_

@class EncodedDoubleValue;
@class IOSClass;
@class InstructionAnnotation;
@class PMap;
@class ReaderNode;
@class ReaderRelation;
@class ReaderWay;
@protocol ConditionalTagInspector;
@protocol EdgeExplorer;
@protocol EdgeIteratorState;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol OrgSlf4jLogger;
@protocol Translation;

#include "J2ObjC_header.h"
#include "com/graphhopper/routing/util/EncodedValue.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/TurnCostEncoder.h"

#define AbstractFlagEncoder_K_BACKWARD 1
#define AbstractFlagEncoder_K_FORWARD 0

/**
 @brief Abstract class which handles flag decoding and encoding.
 Every encoder should be registered to a EncodingManager to be usable. If you want the full long to be stored you need to enable this in the GraphHopperStorage. <p>
 @author Peter Karich
 @author Nop
 */
@interface AbstractFlagEncoder : NSObject < FlagEncoder, TurnCostEncoder > {
 @public
  id<JavaUtilList> restrictions_;
  id<JavaUtilSet> intendedValues_;
  id<JavaUtilSet> restrictedValues_;
  id<JavaUtilSet> ferries_;
  id<JavaUtilSet> oneways_;
  id<JavaUtilSet> absoluteBarriers_;
  id<JavaUtilSet> potentialBarriers_;
  jint speedBits_;
  jdouble speedFactor_;
  jlong forwardBit_;
  jlong backwardBit_;
  jlong directionBitMask_;
  jlong roundaboutBit_;
  EncodedDoubleValue *speedEncoder_;
  jlong acceptBit_;
  jlong ferryBit_;
  PMap *properties_;
  jint maxPossibleSpeed_;
  id<EdgeExplorer> edgeOutExplorer_;
  id<EdgeExplorer> edgeInExplorer_;
}

- (instancetype)initWithPMap:(PMap *)properties;

- (instancetype)initWithNSString:(NSString *)propertiesStr;

/**
 @param speedBits specify the number of bits used for speed
 @param speedFactor specify the factor to multiple the stored value (can be used to increase or decrease accuracy of speed value)
 @param maxTurnCosts specify the maximum value used for turn costs, if this value is reached a turn is forbidden and results in costs of positive infinity.
 */
- (instancetype)initWithInt:(jint)speedBits
                 withDouble:(jdouble)speedFactor
                    withInt:(jint)maxTurnCosts;

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (jboolean)isRegistered;

- (void)setRegisteredWithBoolean:(jboolean)registered;

/**
 @brief Should potential barriers block when no access limits are given?
 */
- (void)setBlockByDefaultWithBoolean:(jboolean)blockByDefault;

- (jboolean)isBlockFords;

- (void)setBlockFordsWithBoolean:(jboolean)blockFords;

- (id<ConditionalTagInspector>)getConditionalTagInspector;

- (void)setConditionalTagInspectorWithConditionalTagInspector:(id<ConditionalTagInspector>)conditionalTagInspector;

/**
 @brief Defines the bits for the node flags, which are currently used for barriers only.
 <p>
 @return incremented shift value pointing behind the last used bit
 */
- (jint)defineNodeBitsWithInt:(jint)index
                      withInt:(jint)shift;

/**
 @brief Defines bits used for edge flags used for access, speed etc.
 <p>
 @param shift bit offset for the first bit used by this encoder
 @return incremented shift value pointing behind the last used bit
 */
- (jint)defineWayBitsWithInt:(jint)index
                     withInt:(jint)shift;

/**
 @brief Defines the bits which are used for relation flags.
 <p>
 @return incremented shift value pointing behind the last used bit
 */
- (jint)defineRelationBitsWithInt:(jint)index
                          withInt:(jint)shift;

/**
 @brief Analyze the properties of a relation and create the routing flags for the second read step.
 In the pre-parsing step this method will be called to determine the useful relation tags. <p>
 */
- (jlong)handleRelationTagsWithReaderRelation:(ReaderRelation *)relation
                                     withLong:(jlong)oldRelationFlags;

/**
 @brief Decide whether a way is routable for a given mode of travel.
 This skips some ways before handleWayTags is called. <p>
 @return the encoded value to indicate if this encoder allows travel or not.
 */
- (jlong)acceptWayWithReaderWay:(ReaderWay *)way;

/**
 @brief Analyze properties of a way and create the routing flags.
 This method is called in the second parsing step.
 */
- (jlong)handleWayTagsWithReaderWay:(ReaderWay *)way
                           withLong:(jlong)allowed
                           withLong:(jlong)relationFlags;

/**
 @brief Parse tags on nodes.
 Node tags can add to speed (like traffic_signals) where the value is strict negative or blocks access (like a barrier), then the value is strict positive.This method is called in the second parsing step.
 */
- (jlong)handleNodeTagsWithReaderNode:(ReaderNode *)node;

- (InstructionAnnotation *)getAnnotationWithLong:(jlong)flags
                                 withTranslation:(id<Translation>)tr;

/**
 @brief Swapping directions means swapping bits which are dependent on the direction of an edge like the access bits.
 But also direction dependent speed values should be swapped too. Keep in mind that this method is performance critical!
 */
- (jlong)reverseFlagsWithLong:(jlong)flags;

/**
 @brief Sets default flags with specified access.
 */
- (jlong)flagsDefaultWithBoolean:(jboolean)forward
                     withBoolean:(jboolean)backward;

- (jlong)setAccessWithLong:(jlong)flags
               withBoolean:(jboolean)forward
               withBoolean:(jboolean)backward;

- (jlong)setSpeedWithLong:(jlong)flags
               withDouble:(jdouble)speed;

- (jlong)setLowSpeedWithLong:(jlong)flags
                  withDouble:(jdouble)speed
                 withBoolean:(jboolean)reverse;

- (jdouble)getSpeedWithLong:(jlong)flags;

- (jlong)setReverseSpeedWithLong:(jlong)flags
                      withDouble:(jdouble)speed;

- (jdouble)getReverseSpeedWithLong:(jlong)flags;

- (jlong)setPropertiesWithDouble:(jdouble)speed
                     withBoolean:(jboolean)forward
                     withBoolean:(jboolean)backward;

- (jdouble)getMaxSpeed;

/**
 @return -1 if no maxspeed found
 */
- (jdouble)getMaxSpeedWithReaderWay:(ReaderWay *)way;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

/**
 @return the speed in km/h
 */
- (jdouble)parseSpeedWithNSString:(NSString *)str;

/**
 @brief Second parsing step.
 Invoked after splitting the edges. Currently used to offer a hook to calculate precise speed values based on elevation data stored in the specified edge.
 */
- (void)applyWayTagsWithReaderWay:(ReaderWay *)way
            withEdgeIteratorState:(id<EdgeIteratorState>)edge;

/**
 @brief Special handling for ferry ways.
 */
- (jdouble)getFerrySpeedWithReaderWay:(ReaderWay *)way
                           withDouble:(jdouble)unknownSpeed
                           withDouble:(jdouble)shortTripsSpeed
                           withDouble:(jdouble)longTripsSpeed;

- (void)setWayBitMaskWithInt:(jint)usedBits
                     withInt:(jint)shift;

- (jlong)getWayBitMask;

- (void)setRelBitMaskWithInt:(jint)usedBits
                     withInt:(jint)shift;

- (jlong)getRelBitMask;

- (void)setNodeBitMaskWithInt:(jint)usedBits
                      withInt:(jint)shift;

- (jlong)getNodeBitMask;

/**
 @brief Defines the bits reserved for storing turn restriction and turn cost <p>
 @param shift bit offset for the first bit used by this encoder
 @return incremented shift value pointing behind the last used bit
 */
- (jint)defineTurnBitsWithInt:(jint)index
                      withInt:(jint)shift;

- (jboolean)isTurnRestrictedWithLong:(jlong)flags;

- (jdouble)getTurnCostWithLong:(jlong)flags;

- (jlong)getTurnFlagsWithBoolean:(jboolean)restricted
                      withDouble:(jdouble)costs;

- (jboolean)isFerryWithLong:(jlong)internalFlags;

- (jboolean)isAcceptWithLong:(jlong)internalFlags;

- (jboolean)isBackwardWithLong:(jlong)flags;

- (jboolean)isForwardWithLong:(jlong)flags;

- (jlong)setBoolWithLong:(jlong)flags
                 withInt:(jint)key
             withBoolean:(jboolean)value;

- (jboolean)isBoolWithLong:(jlong)flags
                   withInt:(jint)key;

- (jlong)setLongWithLong:(jlong)flags
                 withInt:(jint)key
                withLong:(jlong)value;

- (jlong)getLongWithLong:(jlong)flags
                 withInt:(jint)key;

- (jlong)setDoubleWithLong:(jlong)flags
                   withInt:(jint)key
                withDouble:(jdouble)value;

- (jdouble)getDoubleWithLong:(jlong)flags
                     withInt:(jint)key;

/**
 @param way:   needed to retrieve tags
 @param speed: speed guessed e.g. from the road type or other tags
 @return The assumed speed.
 */
- (jdouble)applyMaxSpeedWithReaderWay:(ReaderWay *)way
                           withDouble:(jdouble)speed;

- (NSString *)getPropertiesString;

- (jboolean)supportsWithIOSClass:(IOSClass *)feature;

@end

FOUNDATION_EXPORT BOOL AbstractFlagEncoder_initialized;
J2OBJC_STATIC_INIT(AbstractFlagEncoder)

J2OBJC_FIELD_SETTER(AbstractFlagEncoder, restrictions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, intendedValues_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, restrictedValues_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, ferries_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, oneways_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, absoluteBarriers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, potentialBarriers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, speedEncoder_, EncodedDoubleValue *)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, properties_, PMap *)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, edgeOutExplorer_, id<EdgeExplorer>)
J2OBJC_FIELD_SETTER(AbstractFlagEncoder, edgeInExplorer_, id<EdgeExplorer>)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(AbstractFlagEncoder, K_FORWARD, jint)

J2OBJC_STATIC_FIELD_GETTER(AbstractFlagEncoder, K_BACKWARD, jint)

FOUNDATION_EXPORT id<OrgSlf4jLogger> AbstractFlagEncoder_logger_;
J2OBJC_STATIC_FIELD_GETTER(AbstractFlagEncoder, logger_, id<OrgSlf4jLogger>)
CF_EXTERN_C_END

typedef AbstractFlagEncoder ComGraphhopperRoutingUtilAbstractFlagEncoder;

J2OBJC_TYPE_LITERAL_HEADER(AbstractFlagEncoder)

@interface AbstractFlagEncoder_$1 : EncodedValue {
}

- (jlong)getValueWithLong:(jlong)flags;

- (instancetype)initWithNSString:(NSString *)arg$0
                         withInt:(jint)arg$1
                         withInt:(jint)arg$2
                         withInt:(jint)arg$3
                         withInt:(jint)arg$4
                         withInt:(jint)arg$5;

@end

J2OBJC_EMPTY_STATIC_INIT(AbstractFlagEncoder_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(AbstractFlagEncoder_$1)

#endif // _AbstractFlagEncoder_H_
