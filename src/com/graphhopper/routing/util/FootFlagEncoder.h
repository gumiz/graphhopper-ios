//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
//

#ifndef _FootFlagEncoder_H_
#define _FootFlagEncoder_H_

@class EncodedValue;
@class IOSClass;
@class JavaUtilHashSet;
@class JavaUtilTreeMap;
@class PMap;
@class ReaderRelation;
@class ReaderWay;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

#include "J2ObjC_header.h"
#include "com/graphhopper/routing/util/AbstractFlagEncoder.h"

#define FootFlagEncoder_FERRY_SPEED 10
#define FootFlagEncoder_MEAN_SPEED 5
#define FootFlagEncoder_SLOW_SPEED 2

/**
 @brief Defines bit layout for pedestrians (speed, access, surface, ...).
 Here we put a penalty on unsafe roads only. If you wish to also prefer routes due to beauty like hiking routes use the HikeFlagEncoder instead. <p>
 @author Peter Karich
 @author Nop
 @author Karl HÃ¼bner
 */
@interface FootFlagEncoder : AbstractFlagEncoder {
 @public
  id<JavaUtilSet> safeHighwayTags_;
  id<JavaUtilSet> allowedHighwayTags_;
  id<JavaUtilSet> avoidHighwayTags_;
  id<JavaUtilMap> hikingNetworkToCode_;
  JavaUtilHashSet *sidewalkValues_;
  JavaUtilHashSet *sidewalksNoValues_;
}

/**
 @brief Should be only instantiated via EncodingManager
 */
- (instancetype)init;

- (instancetype)initWithPMap:(PMap *)properties;

- (instancetype)initWithNSString:(NSString *)propertiesStr;

- (instancetype)initWithInt:(jint)speedBits
                 withDouble:(jdouble)speedFactor;

- (jint)getVersion;

- (jint)defineWayBitsWithInt:(jint)index
                     withInt:(jint)shift;

- (jint)defineRelationBitsWithInt:(jint)index
                          withInt:(jint)shift;

/**
 @brief Foot flag encoder does not provide any turn cost / restrictions
 */
- (jint)defineTurnBitsWithInt:(jint)index
                      withInt:(jint)shift;

/**
 @brief Foot flag encoder does not provide any turn cost / restrictions <p>
 @return <code>false</code>
 */
- (jboolean)isTurnRestrictedWithLong:(jlong)flag;

/**
 @brief Foot flag encoder does not provide any turn cost / restrictions <p>
 @return 0
 */
- (jdouble)getTurnCostWithLong:(jlong)flag;

- (jlong)getTurnFlagsWithBoolean:(jboolean)restricted
                      withDouble:(jdouble)costs;

/**
 @brief Some ways are okay but not separate for pedestrians.
 <p>
 */
- (jlong)acceptWayWithReaderWay:(ReaderWay *)way;

- (jlong)handleRelationTagsWithReaderRelation:(ReaderRelation *)relation
                                     withLong:(jlong)oldRelationFlags;

- (jlong)handleWayTagsWithReaderWay:(ReaderWay *)way
                           withLong:(jlong)allowed
                           withLong:(jlong)relationFlags;

- (jdouble)getDoubleWithLong:(jlong)flags
                     withInt:(jint)key;

- (jint)handlePriorityWithReaderWay:(ReaderWay *)way
                            withInt:(jint)priorityFromRelation;

/**
 @param weightToPrioMap associate a weight with every priority. This sorted map allows subclasses to 'insert' more important priorities as well as overwrite determined priorities.
 */
- (void)collectWithReaderWay:(ReaderWay *)way
         withJavaUtilTreeMap:(JavaUtilTreeMap *)weightToPrioMap;

- (jboolean)supportsWithIOSClass:(IOSClass *)feature;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(FootFlagEncoder)

J2OBJC_FIELD_SETTER(FootFlagEncoder, safeHighwayTags_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(FootFlagEncoder, allowedHighwayTags_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(FootFlagEncoder, avoidHighwayTags_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(FootFlagEncoder, hikingNetworkToCode_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(FootFlagEncoder, sidewalkValues_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(FootFlagEncoder, sidewalksNoValues_, JavaUtilHashSet *)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(FootFlagEncoder, SLOW_SPEED, jint)

J2OBJC_STATIC_FIELD_GETTER(FootFlagEncoder, MEAN_SPEED, jint)

J2OBJC_STATIC_FIELD_GETTER(FootFlagEncoder, FERRY_SPEED, jint)
CF_EXTERN_C_END

typedef FootFlagEncoder ComGraphhopperRoutingUtilFootFlagEncoder;

J2OBJC_TYPE_LITERAL_HEADER(FootFlagEncoder)

#endif // _FootFlagEncoder_H_
