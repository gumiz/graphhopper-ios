//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/TraversalMode.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/TraversalMode.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/GHUtility.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface TraversalModeEnum () {
 @public
  jboolean edgeBased_;
  jint noOfStates_;
  jboolean uTurnSupport_;
}
@end

BOOL TraversalModeEnum_initialized = NO;

TraversalModeEnum *TraversalModeEnum_values_[4];

@implementation TraversalModeEnum

- (instancetype)initWithBoolean:(jboolean)edgeBased
                        withInt:(jint)noOfStates
                    withBoolean:(jboolean)uTurnSupport
                   withNSString:(NSString *)__name
                        withInt:(jint)__ordinal {
  if (self = [super initWithNSString:__name withInt:__ordinal]) {
    self->edgeBased_ = edgeBased;
    self->noOfStates_ = noOfStates;
    self->uTurnSupport_ = uTurnSupport;
    if (noOfStates != 1 && noOfStates != 2) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"Currently only 1 or 2 states allowed"] autorelease];
  }
  return self;
}

+ (TraversalModeEnum *)fromStringWithNSString:(NSString *)name {
  return TraversalModeEnum_fromStringWithNSString_(name);
}

- (jint)createTraversalIdWithEdgeIteratorState:(id<EdgeIteratorState>)iterState
                                   withBoolean:(jboolean)reverse {
  if (edgeBased_) {
    if (noOfStates_ == 1) return [((id<EdgeIteratorState>) nil_chk(iterState)) getEdge];
    return GHUtility_createEdgeKeyWithInt_withInt_withInt_withBoolean_([((id<EdgeIteratorState>) nil_chk(iterState)) getBaseNode], [iterState getAdjNode], [iterState getEdge], reverse);
  }
  return [((id<EdgeIteratorState>) nil_chk(iterState)) getAdjNode];
}

- (jint)createTraversalIdWithInt:(jint)baseNode
                         withInt:(jint)adjNode
                         withInt:(jint)edgeId
                     withBoolean:(jboolean)reverse {
  if (edgeBased_) {
    if (noOfStates_ == 1) return edgeId;
    return GHUtility_createEdgeKeyWithInt_withInt_withInt_withBoolean_(baseNode, adjNode, edgeId, reverse);
  }
  return adjNode;
}

- (jint)reverseEdgeKeyWithInt:(jint)edgeKey {
  if (edgeBased_ && noOfStates_ > 1) return GHUtility_reverseEdgeKeyWithInt_(edgeKey);
  return edgeKey;
}

- (jint)getNoOfStates {
  return noOfStates_;
}

- (jboolean)isEdgeBased {
  return edgeBased_;
}

- (jboolean)hasUTurnSupport {
  return uTurnSupport_;
}

IOSObjectArray *TraversalModeEnum_values() {
  TraversalModeEnum_init();
  return [IOSObjectArray arrayWithObjects:TraversalModeEnum_values_ count:4 type:TraversalModeEnum_class_()];
}
+ (IOSObjectArray *)values {
  return TraversalModeEnum_values();
}

+ (TraversalModeEnum *)valueOfWithNSString:(NSString *)name {
  return TraversalModeEnum_valueOfWithNSString_(name);
}

TraversalModeEnum *TraversalModeEnum_valueOfWithNSString_(NSString *name) {
  TraversalModeEnum_init();
  for (int i = 0; i < 4; i++) {
    TraversalModeEnum *e = TraversalModeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [TraversalModeEnum class]) {
    TraversalModeEnum_NODE_BASED = [[TraversalModeEnum alloc] initWithBoolean:NO withInt:1 withBoolean:NO withNSString:@"NODE_BASED" withInt:0];
    TraversalModeEnum_EDGE_BASED_1DIR = [[TraversalModeEnum alloc] initWithBoolean:YES withInt:1 withBoolean:NO withNSString:@"EDGE_BASED_1DIR" withInt:1];
    TraversalModeEnum_EDGE_BASED_2DIR = [[TraversalModeEnum alloc] initWithBoolean:YES withInt:2 withBoolean:NO withNSString:@"EDGE_BASED_2DIR" withInt:2];
    TraversalModeEnum_EDGE_BASED_2DIR_UTURN = [[TraversalModeEnum alloc] initWithBoolean:YES withInt:2 withBoolean:YES withNSString:@"EDGE_BASED_2DIR_UTURN" withInt:3];
    J2OBJC_SET_INITIALIZED(TraversalModeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:withInt:withBoolean:withNSString:withInt:", "TraversalMode", NULL, 0x2, NULL },
    { "fromStringWithNSString:", "fromString", "Lcom.graphhopper.routing.util.TraversalMode;", 0x9, NULL },
    { "createTraversalIdWithEdgeIteratorState:withBoolean:", "createTraversalId", "I", 0x11, NULL },
    { "createTraversalIdWithInt:withInt:withInt:withBoolean:", "createTraversalId", "I", 0x11, NULL },
    { "reverseEdgeKeyWithInt:", "reverseEdgeKey", "I", 0x1, NULL },
    { "getNoOfStates", NULL, "I", 0x1, NULL },
    { "isEdgeBased", NULL, "Z", 0x1, NULL },
    { "hasUTurnSupport", NULL, "Z", 0x11, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NODE_BASED", "NODE_BASED", 0x4019, "Lcom.graphhopper.routing.util.TraversalMode;", &TraversalModeEnum_NODE_BASED,  },
    { "EDGE_BASED_1DIR", "EDGE_BASED_1DIR", 0x4019, "Lcom.graphhopper.routing.util.TraversalMode;", &TraversalModeEnum_EDGE_BASED_1DIR,  },
    { "EDGE_BASED_2DIR", "EDGE_BASED_2DIR", 0x4019, "Lcom.graphhopper.routing.util.TraversalMode;", &TraversalModeEnum_EDGE_BASED_2DIR,  },
    { "EDGE_BASED_2DIR_UTURN", "EDGE_BASED_2DIR_UTURN", 0x4019, "Lcom.graphhopper.routing.util.TraversalMode;", &TraversalModeEnum_EDGE_BASED_2DIR_UTURN,  },
    { "edgeBased_", NULL, 0x12, "Z", NULL,  },
    { "noOfStates_", NULL, 0x12, "I", NULL,  },
    { "uTurnSupport_", NULL, 0x12, "Z", NULL,  },
  };
  static const char *superclass_type_args[] = {"Lcom.graphhopper.routing.util.TraversalMode;"};
  static const J2ObjcClassInfo _TraversalModeEnum = { 1, "TraversalMode", "com.graphhopper.routing.util", NULL, 0x4011, 8, methods, 7, fields, 1, superclass_type_args};
  return &_TraversalModeEnum;
}

@end

TraversalModeEnum *TraversalModeEnum_fromStringWithNSString_(NSString *name) {
  TraversalModeEnum_init();
  @try {
    return TraversalModeEnum_valueOfWithNSString_([((NSString *) nil_chk(name)) uppercaseString]);
  }
  @catch (JavaLangException *ex) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$$@", @"TraversalMode ", name, @" not supported. Supported are: ", JavaUtilArrays_asListWithNSObjectArray_(TraversalModeEnum_values()))] autorelease];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TraversalModeEnum)
