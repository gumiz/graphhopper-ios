//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
//

#ifndef _MotorcycleFlagEncoder_H_
#define _MotorcycleFlagEncoder_H_

@class EncodedDoubleValue;
@class EncodedValue;
@class IOSClass;
@class JavaUtilHashSet;
@class PMap;
@class ReaderWay;
@protocol EdgeIteratorState;

#include "J2ObjC_header.h"
#include "com/graphhopper/routing/util/CarFlagEncoder.h"

#define MotorcycleFlagEncoder_CURVATURE_KEY 112

/**
 @brief Defines bit layout for motorbikes <p>
 @author Peter Karich
 @author boldtrn
 */
@interface MotorcycleFlagEncoder : CarFlagEncoder {
}

- (instancetype)init;

- (instancetype)initWithPMap:(PMap *)properties;

- (instancetype)initWithNSString:(NSString *)propertiesStr;

- (instancetype)initWithInt:(jint)speedBits
                 withDouble:(jdouble)speedFactor
                    withInt:(jint)maxTurnCosts;

- (jint)getVersion;

/**
 @brief Define the place of the speedBits in the edge flags for car.
 */
- (jint)defineWayBitsWithInt:(jint)index
                     withInt:(jint)shift;

- (jlong)acceptWayWithReaderWay:(ReaderWay *)way;

- (jlong)handleWayTagsWithReaderWay:(ReaderWay *)way
                           withLong:(jlong)allowed
                           withLong:(jlong)priorityFromRelation;

- (jdouble)getReverseSpeedWithLong:(jlong)flags;

- (jlong)setReverseSpeedWithLong:(jlong)flags
                      withDouble:(jdouble)speed;

- (jlong)setLowSpeedWithLong:(jlong)flags
                  withDouble:(jdouble)speed
                 withBoolean:(jboolean)reverse;

- (jlong)flagsDefaultWithBoolean:(jboolean)forward
                     withBoolean:(jboolean)backward;

- (jlong)setPropertiesWithDouble:(jdouble)speed
                     withBoolean:(jboolean)forward
                     withBoolean:(jboolean)backward;

- (jlong)reverseFlagsWithLong:(jlong)flags;

- (jdouble)getDoubleWithLong:(jlong)flags
                     withInt:(jint)key;

- (void)applyWayTagsWithReaderWay:(ReaderWay *)way
            withEdgeIteratorState:(id<EdgeIteratorState>)edge;

/**
 @brief Streets that slow are not fun and probably in a town.
 */
- (jdouble)discriminateSlowStreetsWithDouble:(jdouble)bendiness
                                  withDouble:(jdouble)speed;

/**
 @brief A really small bendiness or a bendiness greater than 1 indicates an error in the calculation.
 Just ignore them. We use bendiness greater 1.2 since the beelineDistance is only approximated, therefore it can happen on straight roads, that the beeline is longer than the road.
 */
- (jdouble)correctErrorsWithDouble:(jdouble)bendiness;

/**
 @brief A good bendiness should become a greater impact.
 A bendiness close to 1 should not be changed.
 */
- (jdouble)increaseBendinessImpactWithDouble:(jdouble)bendiness;

- (jboolean)supportsWithIOSClass:(IOSClass *)feature;

- (jint)convertToIntWithDouble:(jdouble)bendiness;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(MotorcycleFlagEncoder)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(MotorcycleFlagEncoder, CURVATURE_KEY, jint)
CF_EXTERN_C_END

typedef MotorcycleFlagEncoder ComGraphhopperRoutingUtilMotorcycleFlagEncoder;

J2OBJC_TYPE_LITERAL_HEADER(MotorcycleFlagEncoder)

#endif // _MotorcycleFlagEncoder_H_
