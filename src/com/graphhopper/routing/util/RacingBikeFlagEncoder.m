//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/reader/ReaderWay.h"
#include "com/graphhopper/routing/util/AbstractFlagEncoder.h"
#include "com/graphhopper/routing/util/BikeCommonFlagEncoder.h"
#include "com/graphhopper/routing/util/PriorityCode.h"
#include "com/graphhopper/routing/util/RacingBikeFlagEncoder.h"
#include "com/graphhopper/util/PMap.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@implementation RacingBikeFlagEncoder

- (instancetype)init {
  return [self initRacingBikeFlagEncoderWithInt:4 withDouble:2 withInt:0];
}

- (instancetype)initRacingBikeFlagEncoderWithPMap:(PMap *)properties {
  if (self = [self initRacingBikeFlagEncoderWithInt:(jint) [((PMap *) nil_chk(properties)) getLongWithNSString:@"speed_bits" withLong:4] withDouble:[properties getDoubleWithNSString:@"speed_factor" withDouble:2] withInt:[properties getBoolWithNSString:@"turn_costs" withBoolean:NO] ? 1 : 0]) {
    AbstractFlagEncoder_set_properties_(self, properties);
    [self setBlockFordsWithBoolean:[properties getBoolWithNSString:@"block_fords" withBoolean:YES]];
  }
  return self;
}

- (instancetype)initWithPMap:(PMap *)properties {
  return [self initRacingBikeFlagEncoderWithPMap:properties];
}

- (instancetype)initWithNSString:(NSString *)propertiesStr {
  return [self initRacingBikeFlagEncoderWithPMap:[[[PMap alloc] initWithNSString:propertiesStr] autorelease]];
}

- (instancetype)initRacingBikeFlagEncoderWithInt:(jint)speedBits
                                      withDouble:(jdouble)speedFactor
                                         withInt:(jint)maxTurnCosts {
  if (self = [super initWithInt:speedBits withDouble:speedFactor withInt:maxTurnCosts]) {
    [((id<JavaUtilSet>) nil_chk(preferHighwayTags_)) addWithId:@"road"];
    [preferHighwayTags_ addWithId:@"secondary"];
    [preferHighwayTags_ addWithId:@"secondary_link"];
    [preferHighwayTags_ addWithId:@"tertiary"];
    [preferHighwayTags_ addWithId:@"tertiary_link"];
    [preferHighwayTags_ addWithId:@"residential"];
    [self setTrackTypeSpeedWithNSString:@"grade1" withInt:20];
    [self setTrackTypeSpeedWithNSString:@"grade2" withInt:10];
    [self setTrackTypeSpeedWithNSString:@"grade3" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED];
    [self setTrackTypeSpeedWithNSString:@"grade4" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED];
    [self setTrackTypeSpeedWithNSString:@"grade5" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED];
    [self setSurfaceSpeedWithNSString:@"paved" withInt:20];
    [self setSurfaceSpeedWithNSString:@"asphalt" withInt:20];
    [self setSurfaceSpeedWithNSString:@"cobblestone" withInt:10];
    [self setSurfaceSpeedWithNSString:@"cobblestone:flattened" withInt:10];
    [self setSurfaceSpeedWithNSString:@"sett" withInt:10];
    [self setSurfaceSpeedWithNSString:@"concrete" withInt:20];
    [self setSurfaceSpeedWithNSString:@"concrete:lanes" withInt:16];
    [self setSurfaceSpeedWithNSString:@"concrete:plates" withInt:16];
    [self setSurfaceSpeedWithNSString:@"paving_stones" withInt:10];
    [self setSurfaceSpeedWithNSString:@"paving_stones:30" withInt:10];
    [self setSurfaceSpeedWithNSString:@"unpaved" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"compacted" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"dirt" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"earth" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"fine_gravel" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED];
    [self setSurfaceSpeedWithNSString:@"grass" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"grass_paver" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"gravel" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"ground" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"ice" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"metal" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"mud" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"pebblestone" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED];
    [self setSurfaceSpeedWithNSString:@"salt" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"sand" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"wood" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setHighwaySpeedWithNSString:@"cycleway" withInt:18];
    [self setHighwaySpeedWithNSString:@"path" withInt:8];
    [self setHighwaySpeedWithNSString:@"footway" withInt:6];
    [self setHighwaySpeedWithNSString:@"pedestrian" withInt:6];
    [self setHighwaySpeedWithNSString:@"road" withInt:12];
    [self setHighwaySpeedWithNSString:@"track" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setHighwaySpeedWithNSString:@"service" withInt:12];
    [self setHighwaySpeedWithNSString:@"unclassified" withInt:16];
    [self setHighwaySpeedWithNSString:@"residential" withInt:16];
    [self setHighwaySpeedWithNSString:@"trunk" withInt:20];
    [self setHighwaySpeedWithNSString:@"trunk_link" withInt:20];
    [self setHighwaySpeedWithNSString:@"primary" withInt:20];
    [self setHighwaySpeedWithNSString:@"primary_link" withInt:20];
    [self setHighwaySpeedWithNSString:@"secondary" withInt:20];
    [self setHighwaySpeedWithNSString:@"secondary_link" withInt:20];
    [self setHighwaySpeedWithNSString:@"tertiary" withInt:20];
    [self setHighwaySpeedWithNSString:@"tertiary_link" withInt:20];
    [self addPushingSectionWithNSString:@"path"];
    [self addPushingSectionWithNSString:@"footway"];
    [self addPushingSectionWithNSString:@"pedestrian"];
    [self addPushingSectionWithNSString:@"steps"];
    [self setCyclingNetworkPreferenceWithNSString:@"icn" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_BEST())) getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"ncn" withInt:[PriorityCodeEnum_get_BEST() getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"rcn" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_VERY_NICE())) getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"lcn" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_UNCHANGED())) getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"mtb" withInt:[PriorityCodeEnum_get_UNCHANGED() getValue]];
    [((id<JavaUtilSet>) nil_chk(absoluteBarriers_)) addWithId:@"kissing_gate"];
    [self setAvoidSpeedLimitWithInt:81];
    [self setSpecificClassBicycleWithNSString:@"roadcycling"];
    [self init__];
  }
  return self;
}

- (instancetype)initWithInt:(jint)speedBits
                 withDouble:(jdouble)speedFactor
                    withInt:(jint)maxTurnCosts {
  return [self initRacingBikeFlagEncoderWithInt:speedBits withDouble:speedFactor withInt:maxTurnCosts];
}

- (jint)getVersion {
  return 1;
}

- (void)collectWithReaderWay:(ReaderWay *)way
                  withDouble:(jdouble)wayTypeSpeed
         withJavaUtilTreeMap:(JavaUtilTreeMap *)weightToPrioMap {
  [super collectWithReaderWay:way withDouble:wayTypeSpeed withJavaUtilTreeMap:weightToPrioMap];
  NSString *highway = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway"];
  if ([@"service" isEqual:highway]) {
    [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(40.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_UNCHANGED())) getValue])];
  }
  else if ([@"track" isEqual:highway]) {
    NSString *trackType = [way getTagWithNSString:@"tracktype"];
    if ([@"grade1" isEqual:trackType]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(110.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue])];
    else if (trackType == nil || [trackType hasPrefix:@"grade"]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(110.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_AVOID_AT_ALL_COSTS())) getValue])];
  }
}

- (jboolean)isPushingSectionWithReaderWay:(ReaderWay *)way {
  NSString *highway = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway"];
  NSString *trackType = [way getTagWithNSString:@"tracktype"];
  return [way hasTagWithNSString:@"highway" withJavaUtilSet:pushingSectionsHighways_] || [way hasTagWithNSString:@"railway" withId:@"platform"] || [way hasTagWithNSString:@"bicycle" withId:@"dismount"] || ([@"track" isEqual:highway] && trackType != nil && ![@"grade1" isEqual:trackType]);
}

- (jboolean)isSacScaleAllowedWithNSString:(NSString *)sacScale {
  return NO;
}

- (NSString *)description {
  return @"racingbike";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "RacingBikeFlagEncoder", NULL, 0x1, NULL },
    { "initWithPMap:", "RacingBikeFlagEncoder", NULL, 0x1, NULL },
    { "initWithNSString:", "RacingBikeFlagEncoder", NULL, 0x1, NULL },
    { "initWithInt:withDouble:withInt:", "RacingBikeFlagEncoder", NULL, 0x1, NULL },
    { "getVersion", NULL, "I", 0x1, NULL },
    { "collectWithReaderWay:withDouble:withJavaUtilTreeMap:", "collect", "V", 0x0, NULL },
    { "isPushingSectionWithReaderWay:", "isPushingSection", "Z", 0x0, NULL },
    { "isSacScaleAllowedWithNSString:", "isSacScaleAllowed", "Z", 0x0, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcClassInfo _RacingBikeFlagEncoder = { 1, "RacingBikeFlagEncoder", "com.graphhopper.routing.util", NULL, 0x1, 9, methods, 0, NULL, 0, NULL};
  return &_RacingBikeFlagEncoder;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RacingBikeFlagEncoder)
