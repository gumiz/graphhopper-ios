//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/EncodedValue.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/EncodedValue.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"

@interface EncodedValue () {
 @public
  NSString *name_;
  jlong maxValue_;
  jboolean allowZero_;
  jint bits_;
}
@end

J2OBJC_FIELD_SETTER(EncodedValue, name_, NSString *)

@implementation EncodedValue

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)shift
                         withInt:(jint)bits
                      withDouble:(jdouble)factor
                        withLong:(jlong)defaultValue
                         withInt:(jint)maxValue {
  return [self initEncodedValueWithNSString:name withInt:shift withInt:bits withDouble:factor withLong:defaultValue withInt:maxValue withBoolean:YES];
}

- (instancetype)initEncodedValueWithNSString:(NSString *)name
                                     withInt:(jint)shift
                                     withInt:(jint)bits
                                  withDouble:(jdouble)factor
                                    withLong:(jlong)defaultValue
                                     withInt:(jint)maxValue
                                 withBoolean:(jboolean)allowZero {
  if (self = [super init]) {
    EncodedValue_set_name_(self, name);
    self->shift_ = shift;
    self->factor_ = factor;
    self->defaultValue_ = defaultValue;
    self->bits_ = bits;
    jlong tmpMask = (LShift64(1LL, bits)) - 1;
    self->maxValue_ = JavaLangMath_minWithLong_withLong_(maxValue, JavaLangMath_roundWithDouble_(tmpMask * factor));
    if (maxValue > self->maxValue_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$$I$I$", name, @" -> maxValue ", maxValue, @" is too large for ", bits, @" bits")] autorelease];
    mask_ = LShift64(tmpMask, shift);
    self->allowZero_ = allowZero;
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)shift
                         withInt:(jint)bits
                      withDouble:(jdouble)factor
                        withLong:(jlong)defaultValue
                         withInt:(jint)maxValue
                     withBoolean:(jboolean)allowZero {
  return [self initEncodedValueWithNSString:name withInt:shift withInt:bits withDouble:factor withLong:defaultValue withInt:maxValue withBoolean:allowZero];
}

- (void)checkValueWithLong:(jlong)value {
  if (value > maxValue_) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$J$J", name_, @" value too large for encoding: ", value, @", maxValue:", maxValue_)] autorelease];
  if (value < 0) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$$J", @"negative ", name_, @" value not allowed! ", value)] autorelease];
  if (!allowZero_ && value == 0) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$$J", @"zero ", name_, @" value not allowed! ", value)] autorelease];
}

- (jlong)setValueWithLong:(jlong)flags
                 withLong:(jlong)value {
  [self checkValueWithLong:value];
  value /= factor_;
  LShiftAssignLong(&value, shift_);
  flags &= ~mask_;
  return flags | value;
}

- (jlong)getValueWithLong:(jlong)flags {
  flags &= mask_;
  URShiftAssignLong(&flags, shift_);
  return JavaLangMath_roundWithDouble_(flags * factor_);
}

- (jint)getBits {
  return bits_;
}

- (jlong)setDefaultValueWithLong:(jlong)flags {
  return [self setValueWithLong:flags withLong:defaultValue_];
}

- (jlong)getMaxValue {
  return maxValue_;
}

- (jlong)swapWithLong:(jlong)flags
     withEncodedValue:(EncodedValue *)otherEncoder {
  jlong otherValue = [((EncodedValue *) nil_chk(otherEncoder)) getValueWithLong:flags];
  flags = [otherEncoder setValueWithLong:flags withLong:[self getValueWithLong:flags]];
  return [self setValueWithLong:flags withLong:otherValue];
}

- (void)dealloc {
  RELEASE_(name_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(EncodedValue *)other {
  [super copyAllFieldsTo:other];
  other->shift_ = shift_;
  other->mask_ = mask_;
  other->factor_ = factor_;
  other->defaultValue_ = defaultValue_;
  EncodedValue_set_name_(other, name_);
  other->maxValue_ = maxValue_;
  other->allowZero_ = allowZero_;
  other->bits_ = bits_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:withInt:withDouble:withLong:withInt:", "EncodedValue", NULL, 0x1, NULL },
    { "initWithNSString:withInt:withInt:withDouble:withLong:withInt:withBoolean:", "EncodedValue", NULL, 0x1, NULL },
    { "checkValueWithLong:", "checkValue", "V", 0x4, NULL },
    { "setValueWithLong:withLong:", "setValue", "J", 0x1, NULL },
    { "getValueWithLong:", "getValue", "J", 0x1, NULL },
    { "getBits", NULL, "I", 0x1, NULL },
    { "setDefaultValueWithLong:", "setDefaultValue", "J", 0x1, NULL },
    { "getMaxValue", NULL, "J", 0x1, NULL },
    { "swapWithLong:withEncodedValue:", "swap", "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "shift_", NULL, 0x14, "J", NULL,  },
    { "mask_", NULL, 0x14, "J", NULL,  },
    { "factor_", NULL, 0x14, "D", NULL,  },
    { "defaultValue_", NULL, 0x14, "J", NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "maxValue_", NULL, 0x12, "J", NULL,  },
    { "allowZero_", NULL, 0x12, "Z", NULL,  },
    { "bits_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _EncodedValue = { 1, "EncodedValue", "com.graphhopper.routing.util", NULL, 0x1, 9, methods, 8, fields, 0, NULL};
  return &_EncodedValue;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EncodedValue)
