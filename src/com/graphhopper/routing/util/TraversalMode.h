//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/TraversalMode.java
//

#ifndef _TraversalMode_H_
#define _TraversalMode_H_

@protocol EdgeIteratorState;

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

typedef NS_ENUM(NSUInteger, TraversalMode) {
  TraversalMode_NODE_BASED = 0,
  TraversalMode_EDGE_BASED_1DIR = 1,
  TraversalMode_EDGE_BASED_2DIR = 2,
  TraversalMode_EDGE_BASED_2DIR_UTURN = 3,
};

@interface TraversalModeEnum : JavaLangEnum < NSCopying > {
}

- (instancetype)initWithBoolean:(jboolean)edgeBased
                        withInt:(jint)noOfStates
                    withBoolean:(jboolean)uTurnSupport
                   withNSString:(NSString *)__name
                        withInt:(jint)__ordinal;

+ (TraversalModeEnum *)fromStringWithNSString:(NSString *)name;

/**
 @brief Returns the identifier to access the map of the shortest path tree according to the traversal mode.
 E.g. returning the adjacent node id in node-based behavior whilst returning the edge id in edge-based behavior <p>
 @param iterState the current EdgeIteratorState
 @param reverse <code>true</code>, if traversal in backward direction. Will be true only for backward searches in bidirectional algorithms.
 @return the identifier to access the shortest path tree
 */
- (jint)createTraversalIdWithEdgeIteratorState:(id<EdgeIteratorState>)iterState
                                   withBoolean:(jboolean)reverse;

/**
 @brief If you have an EdgeIteratorState the other createTraversalId is preferred!
 */
- (jint)createTraversalIdWithInt:(jint)baseNode
                         withInt:(jint)adjNode
                         withInt:(jint)edgeId
                     withBoolean:(jboolean)reverse;

- (jint)reverseEdgeKeyWithInt:(jint)edgeKey;

- (jint)getNoOfStates;

- (jboolean)isEdgeBased;

- (jboolean)hasUTurnSupport;

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *TraversalModeEnum_values();

+ (TraversalModeEnum *)valueOfWithNSString:(NSString *)name;

FOUNDATION_EXPORT TraversalModeEnum *TraversalModeEnum_valueOfWithNSString_(NSString *name);
- (id)copyWithZone:(NSZone *)zone;

@end

FOUNDATION_EXPORT BOOL TraversalModeEnum_initialized;
J2OBJC_STATIC_INIT(TraversalModeEnum)

FOUNDATION_EXPORT TraversalModeEnum *TraversalModeEnum_fromStringWithNSString_(NSString *name);

FOUNDATION_EXPORT TraversalModeEnum *TraversalModeEnum_values_[];

#define TraversalModeEnum_NODE_BASED TraversalModeEnum_values_[TraversalMode_NODE_BASED]
J2OBJC_ENUM_CONSTANT_GETTER(TraversalModeEnum, NODE_BASED)

#define TraversalModeEnum_EDGE_BASED_1DIR TraversalModeEnum_values_[TraversalMode_EDGE_BASED_1DIR]
J2OBJC_ENUM_CONSTANT_GETTER(TraversalModeEnum, EDGE_BASED_1DIR)

#define TraversalModeEnum_EDGE_BASED_2DIR TraversalModeEnum_values_[TraversalMode_EDGE_BASED_2DIR]
J2OBJC_ENUM_CONSTANT_GETTER(TraversalModeEnum, EDGE_BASED_2DIR)

#define TraversalModeEnum_EDGE_BASED_2DIR_UTURN TraversalModeEnum_values_[TraversalMode_EDGE_BASED_2DIR_UTURN]
J2OBJC_ENUM_CONSTANT_GETTER(TraversalModeEnum, EDGE_BASED_2DIR_UTURN)

typedef TraversalModeEnum ComGraphhopperRoutingUtilTraversalModeEnum;

J2OBJC_TYPE_LITERAL_HEADER(TraversalModeEnum)

#endif // _TraversalMode_H_
