//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
//

#ifndef _FlagEncoder_H_
#define _FlagEncoder_H_

@class IOSClass;
@class InstructionAnnotation;
@protocol Translation;

#include "J2ObjC_header.h"
#include "com/graphhopper/routing/util/TurnCostEncoder.h"

#define FlagEncoder_K_ROUNDABOUT 2

/**
 @brief This class provides methods to define how a value (like speed or direction) converts to a flag (currently an integer value), which is stored in an edge .
 <p>
 @author Peter Karich
 */
@protocol FlagEncoder < TurnCostEncoder, NSObject, JavaObject >
/**
 @return the version of this FlagEncoder to enforce none-compatibility when new attributes are introduced
 */
- (jint)getVersion;

/**
 @return the maximum speed in km/h
 */
- (jdouble)getMaxSpeed;

/**
 @return the speed in km/h for this direction, for backward direction use getReverseSpeed
 */
- (jdouble)getSpeedWithLong:(jlong)flags;

/**
 @brief Sets the speed in km/h.
 <p>
 @return modified setProperties
 */
- (jlong)setSpeedWithLong:(jlong)flags
               withDouble:(jdouble)speed;

/**
 @return the speed of the reverse direction in km/h
 */
- (jdouble)getReverseSpeedWithLong:(jlong)flags;

/**
 @brief Sets the reverse speed in the flags.
 */
- (jlong)setReverseSpeedWithLong:(jlong)flags
                      withDouble:(jdouble)speed;

/**
 @brief Sets the access of the edge.
 <p>
 @return modified flags
 */
- (jlong)setAccessWithLong:(jlong)flags
               withBoolean:(jboolean)forward
               withBoolean:(jboolean)backward;

/**
 @brief Sets speed and access properties.
 <p>
 @return created flags
 */
- (jlong)setPropertiesWithDouble:(jdouble)speed
                     withBoolean:(jboolean)forward
                     withBoolean:(jboolean)backward;

/**
 @brief Reports whether the edge is available in forward direction for a certain vehicle
 */
- (jboolean)isForwardWithLong:(jlong)flags;

/**
 @brief Reports whether the edge is available in backward direction for a certain vehicle
 */
- (jboolean)isBackwardWithLong:(jlong)flags;

/**
 @brief Returns arbitrary boolean value identified by the specified key.
 */
- (jboolean)isBoolWithLong:(jlong)flags
                   withInt:(jint)key;

- (jlong)setBoolWithLong:(jlong)flags
                 withInt:(jint)key
             withBoolean:(jboolean)value;

/**
 @brief Returns arbitrary long value identified by the specified key.
 E.g. can be used to return the way or surface type of an edge
 */
- (jlong)getLongWithLong:(jlong)flags
                 withInt:(jint)key;

- (jlong)setLongWithLong:(jlong)flags
                 withInt:(jint)key
                withLong:(jlong)value;

/**
 @brief Returns arbitrary double value identified by the specified key.
 E.g. can be used to return the maximum width or height allowed for an edge.
 */
- (jdouble)getDoubleWithLong:(jlong)flags
                     withInt:(jint)key;

- (jlong)setDoubleWithLong:(jlong)flags
                   withInt:(jint)key
                withDouble:(jdouble)value;

/**
 @brief Returns true if the feature class is supported like TurnWeighting or PriorityWeighting.
 */
- (jboolean)supportsWithIOSClass:(IOSClass *)feature;

/**
 @return additional cost or warning information for an instruction like ferry or road charges.
 */
- (InstructionAnnotation *)getAnnotationWithLong:(jlong)flags
                                 withTranslation:(id<Translation>)tr;

/**
 @return true if already registered in an EncodingManager
 */
- (jboolean)isRegistered;

@end

J2OBJC_EMPTY_STATIC_INIT(FlagEncoder)

J2OBJC_STATIC_FIELD_GETTER(FlagEncoder, K_ROUNDABOUT, jint)

#define ComGraphhopperRoutingUtilFlagEncoder FlagEncoder

J2OBJC_TYPE_LITERAL_HEADER(FlagEncoder)

#endif // _FlagEncoder_H_
