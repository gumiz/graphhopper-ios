//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/ConditionalTagInspector.h"
#include "com/graphhopper/reader/ReaderWay.h"
#include "com/graphhopper/routing/util/AbstractFlagEncoder.h"
#include "com/graphhopper/routing/util/CarFlagEncoder.h"
#include "com/graphhopper/routing/util/EncodedDoubleValue.h"
#include "com/graphhopper/routing/util/EncodedValue.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/MotorcycleFlagEncoder.h"
#include "com/graphhopper/routing/util/PriorityCode.h"
#include "com/graphhopper/routing/weighting/CurvatureWeighting.h"
#include "com/graphhopper/routing/weighting/PriorityWeighting.h"
#include "com/graphhopper/util/BitUtil.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/PMap.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

__attribute__((unused)) static jint MotorcycleFlagEncoder_handlePriorityWithReaderWay_withLong_(MotorcycleFlagEncoder *self, ReaderWay *way, jlong relationFlags);
__attribute__((unused)) static jdouble MotorcycleFlagEncoder_getBeelineDistanceWithReaderWay_(MotorcycleFlagEncoder *self, ReaderWay *way);

@interface MotorcycleFlagEncoder () {
 @public
  JavaUtilHashSet *avoidSet_;
  JavaUtilHashSet *preferSet_;
  EncodedDoubleValue *reverseSpeedEncoder_;
  EncodedValue *priorityWayEncoder_;
  EncodedValue *curvatureEncoder_;
}

- (jint)handlePriorityWithReaderWay:(ReaderWay *)way
                           withLong:(jlong)relationFlags;

- (jdouble)getBeelineDistanceWithReaderWay:(ReaderWay *)way;
@end

J2OBJC_FIELD_SETTER(MotorcycleFlagEncoder, avoidSet_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(MotorcycleFlagEncoder, preferSet_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(MotorcycleFlagEncoder, reverseSpeedEncoder_, EncodedDoubleValue *)
J2OBJC_FIELD_SETTER(MotorcycleFlagEncoder, priorityWayEncoder_, EncodedValue *)
J2OBJC_FIELD_SETTER(MotorcycleFlagEncoder, curvatureEncoder_, EncodedValue *)

@implementation MotorcycleFlagEncoder

- (instancetype)init {
  return [self initMotorcycleFlagEncoderWithInt:5 withDouble:5 withInt:0];
}

- (instancetype)initMotorcycleFlagEncoderWithPMap:(PMap *)properties {
  if (self = [self initMotorcycleFlagEncoderWithInt:(jint) [((PMap *) nil_chk(properties)) getLongWithNSString:@"speed_bits" withLong:5] withDouble:[properties getDoubleWithNSString:@"speed_factor" withDouble:5] withInt:[properties getBoolWithNSString:@"turn_costs" withBoolean:NO] ? 1 : 0]) {
    AbstractFlagEncoder_set_properties_(self, properties);
    [self setBlockFordsWithBoolean:[properties getBoolWithNSString:@"block_fords" withBoolean:YES]];
  }
  return self;
}

- (instancetype)initWithPMap:(PMap *)properties {
  return [self initMotorcycleFlagEncoderWithPMap:properties];
}

- (instancetype)initWithNSString:(NSString *)propertiesStr {
  return [self initMotorcycleFlagEncoderWithPMap:[[[PMap alloc] initWithNSString:propertiesStr] autorelease]];
}

- (instancetype)initMotorcycleFlagEncoderWithInt:(jint)speedBits
                                      withDouble:(jdouble)speedFactor
                                         withInt:(jint)maxTurnCosts {
  if (self = [super initWithInt:speedBits withDouble:speedFactor withInt:maxTurnCosts]) {
    MotorcycleFlagEncoder_setAndConsume_avoidSet_(self, [[JavaUtilHashSet alloc] init]);
    MotorcycleFlagEncoder_setAndConsume_preferSet_(self, [[JavaUtilHashSet alloc] init]);
    [((id<JavaUtilList>) nil_chk(restrictions_)) removeWithId:@"motorcar"];
    [restrictions_ addWithId:@"motorcycle"];
    [((id<JavaUtilSet>) nil_chk(absoluteBarriers_)) removeWithId:@"bus_trap"];
    [absoluteBarriers_ removeWithId:@"sump_buster"];
    [((id<JavaUtilMap>) nil_chk(trackTypeSpeedMap_)) clear];
    [((id<JavaUtilMap>) nil_chk(defaultSpeedMap_)) clear];
    [trackTypeSpeedMap_ putWithId:@"grade1" withId:JavaLangInteger_valueOfWithInt_(20)];
    [trackTypeSpeedMap_ putWithId:@"grade2" withId:JavaLangInteger_valueOfWithInt_(15)];
    [trackTypeSpeedMap_ putWithId:@"grade3" withId:JavaLangInteger_valueOfWithInt_(10)];
    [trackTypeSpeedMap_ putWithId:@"grade4" withId:JavaLangInteger_valueOfWithInt_(5)];
    [trackTypeSpeedMap_ putWithId:@"grade5" withId:JavaLangInteger_valueOfWithInt_(5)];
    [avoidSet_ addWithId:@"motorway"];
    [avoidSet_ addWithId:@"trunk"];
    [avoidSet_ addWithId:@"motorroad"];
    [avoidSet_ addWithId:@"residential"];
    [preferSet_ addWithId:@"primary"];
    [preferSet_ addWithId:@"secondary"];
    [preferSet_ addWithId:@"tertiary"];
    maxPossibleSpeed_ = 120;
    [defaultSpeedMap_ putWithId:@"motorway" withId:JavaLangInteger_valueOfWithInt_(100)];
    [defaultSpeedMap_ putWithId:@"motorway_link" withId:JavaLangInteger_valueOfWithInt_(70)];
    [defaultSpeedMap_ putWithId:@"motorroad" withId:JavaLangInteger_valueOfWithInt_(90)];
    [defaultSpeedMap_ putWithId:@"trunk" withId:JavaLangInteger_valueOfWithInt_(80)];
    [defaultSpeedMap_ putWithId:@"trunk_link" withId:JavaLangInteger_valueOfWithInt_(75)];
    [defaultSpeedMap_ putWithId:@"primary" withId:JavaLangInteger_valueOfWithInt_(65)];
    [defaultSpeedMap_ putWithId:@"primary_link" withId:JavaLangInteger_valueOfWithInt_(60)];
    [defaultSpeedMap_ putWithId:@"secondary" withId:JavaLangInteger_valueOfWithInt_(60)];
    [defaultSpeedMap_ putWithId:@"secondary_link" withId:JavaLangInteger_valueOfWithInt_(50)];
    [defaultSpeedMap_ putWithId:@"tertiary" withId:JavaLangInteger_valueOfWithInt_(50)];
    [defaultSpeedMap_ putWithId:@"tertiary_link" withId:JavaLangInteger_valueOfWithInt_(40)];
    [defaultSpeedMap_ putWithId:@"unclassified" withId:JavaLangInteger_valueOfWithInt_(30)];
    [defaultSpeedMap_ putWithId:@"residential" withId:JavaLangInteger_valueOfWithInt_(30)];
    [defaultSpeedMap_ putWithId:@"living_street" withId:JavaLangInteger_valueOfWithInt_(5)];
    [defaultSpeedMap_ putWithId:@"service" withId:JavaLangInteger_valueOfWithInt_(20)];
    [defaultSpeedMap_ putWithId:@"road" withId:JavaLangInteger_valueOfWithInt_(20)];
    [defaultSpeedMap_ putWithId:@"track" withId:JavaLangInteger_valueOfWithInt_(15)];
    [self init__];
  }
  return self;
}

- (instancetype)initWithInt:(jint)speedBits
                 withDouble:(jdouble)speedFactor
                    withInt:(jint)maxTurnCosts {
  return [self initMotorcycleFlagEncoderWithInt:speedBits withDouble:speedFactor withInt:maxTurnCosts];
}

- (jint)getVersion {
  return 1;
}

- (jint)defineWayBitsWithInt:(jint)index
                     withInt:(jint)shift {
  shift = [super defineWayBitsWithInt:index withInt:shift];
  MotorcycleFlagEncoder_setAndConsume_reverseSpeedEncoder_(self, [[EncodedDoubleValue alloc] initWithNSString:@"Reverse Speed" withInt:shift withInt:speedBits_ withDouble:speedFactor_ withLong:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(defaultSpeedMap_)) getWithId:@"secondary"])) intValue] withInt:maxPossibleSpeed_]);
  shift += [reverseSpeedEncoder_ getBits];
  MotorcycleFlagEncoder_setAndConsume_priorityWayEncoder_(self, [[EncodedValue alloc] initWithNSString:@"PreferWay" withInt:shift withInt:3 withDouble:1 withLong:3 withInt:7]);
  shift += [priorityWayEncoder_ getBits];
  MotorcycleFlagEncoder_setAndConsume_curvatureEncoder_(self, [[EncodedValue alloc] initWithNSString:@"Curvature" withInt:shift withInt:4 withDouble:1 withLong:10 withInt:10]);
  shift += [curvatureEncoder_ getBits];
  return shift;
}

- (jlong)acceptWayWithReaderWay:(ReaderWay *)way {
  NSString *highwayValue = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway"];
  if (highwayValue == nil) {
    if ([way hasTagWithNSString:@"route" withJavaUtilSet:ferries_]) {
      NSString *motorcycleTag = [way getTagWithNSString:@"motorcycle"];
      if (motorcycleTag == nil) motorcycleTag = [way getTagWithNSString:@"motor_vehicle"];
      if ((motorcycleTag == nil && ![way hasTagWithNSString:@"foot" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]] && ![way hasTagWithNSString:@"bicycle" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]]) || [@"yes" isEqual:motorcycleTag]) return acceptBit_ | ferryBit_;
    }
    return 0;
  }
  if ([@"track" isEqual:highwayValue]) {
    NSString *tt = [way getTagWithNSString:@"tracktype"];
    if (tt != nil && ![tt isEqual:@"grade1"]) return 0;
  }
  if (![((id<JavaUtilMap>) nil_chk(defaultSpeedMap_)) containsKeyWithId:highwayValue]) return 0;
  if ([way hasTagWithNSString:@"impassable" withId:@"yes"] || [way hasTagWithNSString:@"status" withId:@"impassable"]) return 0;
  NSString *firstValue = [way getFirstPriorityTagWithJavaUtilList:restrictions_];
  if (![((NSString *) nil_chk(firstValue)) isEmpty]) {
    if ([((id<JavaUtilSet>) nil_chk(restrictedValues_)) containsWithId:firstValue] && ![((id<ConditionalTagInspector>) nil_chk([self getConditionalTagInspector])) isRestrictedWayConditionallyPermittedWithReaderWay:way]) return 0;
    if ([((id<JavaUtilSet>) nil_chk(intendedValues_)) containsWithId:firstValue]) return acceptBit_;
  }
  if ([self isBlockFords] && ([@"ford" isEqual:highwayValue] || [way hasTagWithNSString:@"ford" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]])) return 0;
  if ([((id<ConditionalTagInspector>) nil_chk([self getConditionalTagInspector])) isPermittedWayConditionallyRestrictedWithReaderWay:way]) return 0;
  else return acceptBit_;
}

- (jlong)handleWayTagsWithReaderWay:(ReaderWay *)way
                           withLong:(jlong)allowed
                           withLong:(jlong)priorityFromRelation {
  if (![self isAcceptWithLong:allowed]) return 0;
  jlong flags = 0;
  if (![self isFerryWithLong:allowed]) {
    jdouble speed = [self getSpeedWithReaderWay:way];
    speed = [self applyMaxSpeedWithReaderWay:way withDouble:speed];
    jdouble maxMCSpeed = [self parseSpeedWithNSString:[((ReaderWay *) nil_chk(way)) getTagWithNSString:@"maxspeed:motorcycle"]];
    if (maxMCSpeed > 0 && maxMCSpeed < speed) speed = maxMCSpeed * 0.9;
    if (speed > 30 && [way hasTagWithNSString:@"surface" withJavaUtilSet:badSurfaceSpeedMap_]) speed = 30;
    jboolean isRoundabout = [way hasTagWithNSString:@"junction" withId:@"roundabout"];
    if (isRoundabout) flags = [self setBoolWithLong:0 withInt:FlagEncoder_K_ROUNDABOUT withBoolean:YES];
    if ([way hasTagWithNSString:@"oneway" withJavaUtilSet:oneways_] || isRoundabout) {
      if ([way hasTagWithNSString:@"oneway" withId:@"-1"]) {
        flags = [self setReverseSpeedWithLong:flags withDouble:speed];
        flags |= backwardBit_;
      }
      else {
        flags = [self setSpeedWithLong:flags withDouble:speed];
        flags |= forwardBit_;
      }
    }
    else {
      flags = [self setSpeedWithLong:flags withDouble:speed];
      flags = [self setReverseSpeedWithLong:flags withDouble:speed];
      flags |= directionBitMask_;
    }
  }
  else {
    jdouble ferrySpeed = [self getFerrySpeedWithReaderWay:way withDouble:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(defaultSpeedMap_)) getWithId:@"living_street"])) intValue] withDouble:[((JavaLangInteger *) nil_chk([defaultSpeedMap_ getWithId:@"service"])) intValue] withDouble:[((JavaLangInteger *) nil_chk([defaultSpeedMap_ getWithId:@"residential"])) intValue]];
    flags = [self setSpeedWithLong:flags withDouble:ferrySpeed];
    flags = [self setReverseSpeedWithLong:flags withDouble:ferrySpeed];
    flags |= directionBitMask_;
  }
  flags = [((EncodedValue *) nil_chk(priorityWayEncoder_)) setValueWithLong:flags withLong:MotorcycleFlagEncoder_handlePriorityWithReaderWay_withLong_(self, way, priorityFromRelation)];
  flags = [((EncodedValue *) nil_chk(curvatureEncoder_)) setValueWithLong:flags withLong:10];
  return flags;
}

- (jdouble)getReverseSpeedWithLong:(jlong)flags {
  return [((EncodedDoubleValue *) nil_chk(reverseSpeedEncoder_)) getDoubleValueWithLong:flags];
}

- (jlong)setReverseSpeedWithLong:(jlong)flags
                      withDouble:(jdouble)speed {
  if (speed < 0) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$D$$", @"Speed cannot be negative: ", speed, @", flags:", [((BitUtil *) nil_chk(BitUtil_get_LITTLE_())) toBitStringWithLong:flags])] autorelease];
  if (speed < ((EncodedDoubleValue *) nil_chk(speedEncoder_))->factor_ / 2) return [self setLowSpeedWithLong:flags withDouble:speed withBoolean:YES];
  if (speed > [self getMaxSpeed]) speed = [self getMaxSpeed];
  return [((EncodedDoubleValue *) nil_chk(reverseSpeedEncoder_)) setDoubleValueWithLong:flags withDouble:speed];
}

- (jlong)setLowSpeedWithLong:(jlong)flags
                  withDouble:(jdouble)speed
                 withBoolean:(jboolean)reverse {
  if (reverse) return [self setBoolWithLong:[((EncodedDoubleValue *) nil_chk(reverseSpeedEncoder_)) setDoubleValueWithLong:flags withDouble:0] withInt:AbstractFlagEncoder_K_BACKWARD withBoolean:NO];
  return [self setBoolWithLong:[((EncodedDoubleValue *) nil_chk(speedEncoder_)) setDoubleValueWithLong:flags withDouble:0] withInt:AbstractFlagEncoder_K_FORWARD withBoolean:NO];
}

- (jlong)flagsDefaultWithBoolean:(jboolean)forward
                     withBoolean:(jboolean)backward {
  jlong flags = [super flagsDefaultWithBoolean:forward withBoolean:backward];
  if (backward) return [((EncodedDoubleValue *) nil_chk(reverseSpeedEncoder_)) setDefaultValueWithLong:flags];
  return flags;
}

- (jlong)setPropertiesWithDouble:(jdouble)speed
                     withBoolean:(jboolean)forward
                     withBoolean:(jboolean)backward {
  jlong flags = [super setPropertiesWithDouble:speed withBoolean:forward withBoolean:backward];
  if (backward) return [self setReverseSpeedWithLong:flags withDouble:speed];
  return flags;
}

- (jlong)reverseFlagsWithLong:(jlong)flags {
  flags = [super reverseFlagsWithLong:flags];
  jdouble otherValue = [((EncodedDoubleValue *) nil_chk(reverseSpeedEncoder_)) getDoubleValueWithLong:flags];
  flags = [self setReverseSpeedWithLong:flags withDouble:[((EncodedDoubleValue *) nil_chk(speedEncoder_)) getDoubleValueWithLong:flags]];
  return [self setSpeedWithLong:flags withDouble:otherValue];
}

- (jdouble)getDoubleWithLong:(jlong)flags
                     withInt:(jint)key {
  switch (key) {
    case ComGraphhopperRoutingWeightingPriorityWeighting_KEY:
    return (jdouble) [((EncodedValue *) nil_chk(priorityWayEncoder_)) getValueWithLong:flags] / [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_BEST())) getValue];
    case MotorcycleFlagEncoder_CURVATURE_KEY:
    return (jdouble) [((EncodedValue *) nil_chk(curvatureEncoder_)) getValueWithLong:flags] / 10;
    default:
    return [super getDoubleWithLong:flags withInt:key];
  }
}

- (jint)handlePriorityWithReaderWay:(ReaderWay *)way
                           withLong:(jlong)relationFlags {
  return MotorcycleFlagEncoder_handlePriorityWithReaderWay_withLong_(self, way, relationFlags);
}

- (void)applyWayTagsWithReaderWay:(ReaderWay *)way
            withEdgeIteratorState:(id<EdgeIteratorState>)edge {
  jdouble speed = [self getSpeedWithLong:[((id<EdgeIteratorState>) nil_chk(edge)) getFlags]];
  jdouble roadDistance = [edge getDistance];
  jdouble beelineDistance = MotorcycleFlagEncoder_getBeelineDistanceWithReaderWay_(self, way);
  jdouble bendiness = beelineDistance / roadDistance;
  bendiness = [self discriminateSlowStreetsWithDouble:bendiness withDouble:speed];
  bendiness = [self increaseBendinessImpactWithDouble:bendiness];
  bendiness = [self correctErrorsWithDouble:bendiness];
  [edge setFlagsWithLong:[((EncodedValue *) nil_chk(self->curvatureEncoder_)) setValueWithLong:[edge getFlags] withLong:[self convertToIntWithDouble:bendiness]]];
}

- (jdouble)getBeelineDistanceWithReaderWay:(ReaderWay *)way {
  return MotorcycleFlagEncoder_getBeelineDistanceWithReaderWay_(self, way);
}

- (jdouble)discriminateSlowStreetsWithDouble:(jdouble)bendiness
                                  withDouble:(jdouble)speed {
  if (speed < 51) {
    return 1;
  }
  return bendiness;
}

- (jdouble)correctErrorsWithDouble:(jdouble)bendiness {
  if (bendiness < 0.01 || bendiness > 1) {
    return 1;
  }
  return bendiness;
}

- (jdouble)increaseBendinessImpactWithDouble:(jdouble)bendiness {
  return (JavaLangMath_powWithDouble_withDouble_(bendiness, 2));
}

- (jboolean)supportsWithIOSClass:(IOSClass *)feature {
  if ([super supportsWithIOSClass:feature]) return YES;
  if ([ComGraphhopperRoutingWeightingCurvatureWeighting_class_() isAssignableFrom:feature]) {
    return YES;
  }
  return [ComGraphhopperRoutingWeightingPriorityWeighting_class_() isAssignableFrom:feature];
}

- (jint)convertToIntWithDouble:(jdouble)bendiness {
  bendiness = bendiness * 10;
  return J2ObjCFpToInt(bendiness);
}

- (NSString *)description {
  return @"motorcycle";
}

- (void)dealloc {
  RELEASE_(avoidSet_);
  RELEASE_(preferSet_);
  RELEASE_(reverseSpeedEncoder_);
  RELEASE_(priorityWayEncoder_);
  RELEASE_(curvatureEncoder_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(MotorcycleFlagEncoder *)other {
  [super copyAllFieldsTo:other];
  MotorcycleFlagEncoder_set_avoidSet_(other, avoidSet_);
  MotorcycleFlagEncoder_set_preferSet_(other, preferSet_);
  MotorcycleFlagEncoder_set_reverseSpeedEncoder_(other, reverseSpeedEncoder_);
  MotorcycleFlagEncoder_set_priorityWayEncoder_(other, priorityWayEncoder_);
  MotorcycleFlagEncoder_set_curvatureEncoder_(other, curvatureEncoder_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MotorcycleFlagEncoder", NULL, 0x1, NULL },
    { "initWithPMap:", "MotorcycleFlagEncoder", NULL, 0x1, NULL },
    { "initWithNSString:", "MotorcycleFlagEncoder", NULL, 0x1, NULL },
    { "initWithInt:withDouble:withInt:", "MotorcycleFlagEncoder", NULL, 0x1, NULL },
    { "getVersion", NULL, "I", 0x1, NULL },
    { "defineWayBitsWithInt:withInt:", "defineWayBits", "I", 0x1, NULL },
    { "acceptWayWithReaderWay:", "acceptWay", "J", 0x1, NULL },
    { "handleWayTagsWithReaderWay:withLong:withLong:", "handleWayTags", "J", 0x1, NULL },
    { "getReverseSpeedWithLong:", "getReverseSpeed", "D", 0x1, NULL },
    { "setReverseSpeedWithLong:withDouble:", "setReverseSpeed", "J", 0x1, NULL },
    { "setLowSpeedWithLong:withDouble:withBoolean:", "setLowSpeed", "J", 0x4, NULL },
    { "flagsDefaultWithBoolean:withBoolean:", "flagsDefault", "J", 0x1, NULL },
    { "setPropertiesWithDouble:withBoolean:withBoolean:", "setProperties", "J", 0x1, NULL },
    { "reverseFlagsWithLong:", "reverseFlags", "J", 0x1, NULL },
    { "getDoubleWithLong:withInt:", "getDouble", "D", 0x1, NULL },
    { "handlePriorityWithReaderWay:withLong:", "handlePriority", "I", 0x2, NULL },
    { "applyWayTagsWithReaderWay:withEdgeIteratorState:", "applyWayTags", "V", 0x1, NULL },
    { "getBeelineDistanceWithReaderWay:", "getBeelineDistance", "D", 0x2, NULL },
    { "discriminateSlowStreetsWithDouble:withDouble:", "discriminateSlowStreets", "D", 0x4, NULL },
    { "correctErrorsWithDouble:", "correctErrors", "D", 0x4, NULL },
    { "increaseBendinessImpactWithDouble:", "increaseBendinessImpact", "D", 0x4, NULL },
    { "supportsWithIOSClass:", "supports", "Z", 0x1, NULL },
    { "convertToIntWithDouble:", "convertToInt", "I", 0x4, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CURVATURE_KEY_", NULL, 0x19, "I", NULL, .constantValue.asInt = MotorcycleFlagEncoder_CURVATURE_KEY },
    { "avoidSet_", NULL, 0x12, "Ljava.util.HashSet;", NULL,  },
    { "preferSet_", NULL, 0x12, "Ljava.util.HashSet;", NULL,  },
    { "reverseSpeedEncoder_", NULL, 0x2, "Lcom.graphhopper.routing.util.EncodedDoubleValue;", NULL,  },
    { "priorityWayEncoder_", NULL, 0x2, "Lcom.graphhopper.routing.util.EncodedValue;", NULL,  },
    { "curvatureEncoder_", NULL, 0x2, "Lcom.graphhopper.routing.util.EncodedValue;", NULL,  },
  };
  static const J2ObjcClassInfo _MotorcycleFlagEncoder = { 1, "MotorcycleFlagEncoder", "com.graphhopper.routing.util", NULL, 0x1, 24, methods, 6, fields, 0, NULL};
  return &_MotorcycleFlagEncoder;
}

@end

jint MotorcycleFlagEncoder_handlePriorityWithReaderWay_withLong_(MotorcycleFlagEncoder *self, ReaderWay *way, jlong relationFlags) {
  NSString *highway = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway" withId:@""];
  if ([((JavaUtilHashSet *) nil_chk(self->avoidSet_)) containsWithId:highway]) {
    return [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_WORST())) getValue];
  }
  else if ([((JavaUtilHashSet *) nil_chk(self->preferSet_)) containsWithId:highway]) {
    return [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_BEST())) getValue];
  }
  return [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_UNCHANGED())) getValue];
}

jdouble MotorcycleFlagEncoder_getBeelineDistanceWithReaderWay_(MotorcycleFlagEncoder *self, ReaderWay *way) {
  return [((JavaLangDouble *) nil_chk([((ReaderWay *) nil_chk(way)) getTagWithNSString:@"estimated_distance" withId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_POSITIVE_INFINITY)])) doubleValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MotorcycleFlagEncoder)
