//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/DefaultFlagEncoderFactory.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/Bike2WeightFlagEncoder.h"
#include "com/graphhopper/routing/util/BikeFlagEncoder.h"
#include "com/graphhopper/routing/util/Car4WDFlagEncoder.h"
#include "com/graphhopper/routing/util/CarFlagEncoder.h"
#include "com/graphhopper/routing/util/DataFlagEncoder.h"
#include "com/graphhopper/routing/util/DefaultFlagEncoderFactory.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/FlagEncoderFactory.h"
#include "com/graphhopper/routing/util/FootFlagEncoder.h"
#include "com/graphhopper/routing/util/HikeFlagEncoder.h"
#include "com/graphhopper/routing/util/MotorcycleFlagEncoder.h"
#include "com/graphhopper/routing/util/MountainBikeFlagEncoder.h"
#include "com/graphhopper/routing/util/RacingBikeFlagEncoder.h"
#include "com/graphhopper/util/PMap.h"
#include "java/lang/IllegalArgumentException.h"

@implementation DefaultFlagEncoderFactory

- (id<FlagEncoder>)createFlagEncoderWithNSString:(NSString *)name
                                        withPMap:(PMap *)configuration {
  if ([((NSString *) nil_chk(name)) isEqual:FlagEncoderFactory_get_GENERIC_()]) return [[[DataFlagEncoder alloc] init] autorelease];
  else if ([name isEqual:FlagEncoderFactory_get_CAR_()]) return [[[CarFlagEncoder alloc] initWithPMap:configuration] autorelease];
  else if ([name isEqual:FlagEncoderFactory_get_CAR4WD_()]) return [[[Car4WDFlagEncoder alloc] initWithPMap:configuration] autorelease];
  if ([name isEqual:FlagEncoderFactory_get_BIKE_()]) return [[[BikeFlagEncoder alloc] initWithPMap:configuration] autorelease];
  if ([name isEqual:FlagEncoderFactory_get_BIKE2_()]) return [[[Bike2WeightFlagEncoder alloc] initWithPMap:configuration] autorelease];
  if ([name isEqual:FlagEncoderFactory_get_RACINGBIKE_()]) return [[[RacingBikeFlagEncoder alloc] initWithPMap:configuration] autorelease];
  if ([name isEqual:FlagEncoderFactory_get_MOUNTAINBIKE_()]) return [[[MountainBikeFlagEncoder alloc] initWithPMap:configuration] autorelease];
  if ([name isEqual:FlagEncoderFactory_get_FOOT_()]) return [[[FootFlagEncoder alloc] initWithPMap:configuration] autorelease];
  if ([name isEqual:FlagEncoderFactory_get_HIKE_()]) return [[[HikeFlagEncoder alloc] initWithPMap:configuration] autorelease];
  if ([name isEqual:FlagEncoderFactory_get_MOTORCYCLE_()]) return [[[MotorcycleFlagEncoder alloc] initWithPMap:configuration] autorelease];
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$$", @"entry in encoder list not supported ", name)] autorelease];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createFlagEncoderWithNSString:withPMap:", "createFlagEncoder", "Lcom.graphhopper.routing.util.FlagEncoder;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _DefaultFlagEncoderFactory = { 1, "DefaultFlagEncoderFactory", "com.graphhopper.routing.util", NULL, 0x1, 2, methods, 0, NULL, 0, NULL};
  return &_DefaultFlagEncoderFactory;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(DefaultFlagEncoderFactory)
