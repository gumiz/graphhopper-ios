//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/ConditionalTagInspector.h"
#include "com/graphhopper/reader/ReaderRelation.h"
#include "com/graphhopper/reader/ReaderWay.h"
#include "com/graphhopper/routing/util/AbstractFlagEncoder.h"
#include "com/graphhopper/routing/util/BikeCommonFlagEncoder.h"
#include "com/graphhopper/routing/util/EncodedDoubleValue.h"
#include "com/graphhopper/routing/util/EncodedValue.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/PriorityCode.h"
#include "com/graphhopper/routing/weighting/PriorityWeighting.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/InstructionAnnotation.h"
#include "com/graphhopper/util/Translation.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

__attribute__((unused)) static PriorityCodeEnum *BikeCommonFlagEncoder_convertClassValueToPriorityWithNSString_(BikeCommonFlagEncoder *self, NSString *tagvalue);

@interface BikeCommonFlagEncoder () {
 @public
  id<JavaUtilMap> trackTypeSpeeds_;
  id<JavaUtilMap> surfaceSpeeds_;
  id<JavaUtilSet> roadValues_;
  id<JavaUtilMap> highwaySpeeds_;
  id<JavaUtilMap> bikeNetworkToCode_;
  jlong unpavedBit_;
  EncodedValue *wayTypeEncoder_;
  jint avoidSpeedLimit_;
  NSString *classBicycleKey_;
}

- (PriorityCodeEnum *)convertClassValueToPriorityWithNSString:(NSString *)tagvalue;
@end

J2OBJC_FIELD_SETTER(BikeCommonFlagEncoder, trackTypeSpeeds_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(BikeCommonFlagEncoder, surfaceSpeeds_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(BikeCommonFlagEncoder, roadValues_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(BikeCommonFlagEncoder, highwaySpeeds_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(BikeCommonFlagEncoder, bikeNetworkToCode_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(BikeCommonFlagEncoder, wayTypeEncoder_, EncodedValue *)
J2OBJC_FIELD_SETTER(BikeCommonFlagEncoder, classBicycleKey_, NSString *)

@interface BikeCommonFlagEncoder_WayTypeEnum () {
 @public
  jint value_;
}
- (instancetype)initWithInt:(jint)value
               withNSString:(NSString *)__name
                    withInt:(jint)__ordinal;
@end

@implementation BikeCommonFlagEncoder

- (instancetype)initWithInt:(jint)speedBits
                 withDouble:(jdouble)speedFactor
                    withInt:(jint)maxTurnCosts {
  if (self = [super initWithInt:speedBits withDouble:speedFactor withInt:maxTurnCosts]) {
    BikeCommonFlagEncoder_setAndConsume_pushingSectionsHighways_(self, [[JavaUtilHashSet alloc] init]);
    BikeCommonFlagEncoder_setAndConsume_oppositeLanes_(self, [[JavaUtilHashSet alloc] init]);
    BikeCommonFlagEncoder_setAndConsume_preferHighwayTags_(self, [[JavaUtilHashSet alloc] init]);
    BikeCommonFlagEncoder_setAndConsume_avoidHighwayTags_(self, [[JavaUtilHashSet alloc] init]);
    BikeCommonFlagEncoder_setAndConsume_unpavedSurfaceTags_(self, [[JavaUtilHashSet alloc] init]);
    BikeCommonFlagEncoder_setAndConsume_trackTypeSpeeds_(self, [[JavaUtilHashMap alloc] init]);
    BikeCommonFlagEncoder_setAndConsume_surfaceSpeeds_(self, [[JavaUtilHashMap alloc] init]);
    BikeCommonFlagEncoder_setAndConsume_roadValues_(self, [[JavaUtilHashSet alloc] init]);
    BikeCommonFlagEncoder_setAndConsume_highwaySpeeds_(self, [[JavaUtilHashMap alloc] init]);
    BikeCommonFlagEncoder_setAndConsume_bikeNetworkToCode_(self, [[JavaUtilHashMap alloc] init]);
    unpavedBit_ = 0;
    [((id<JavaUtilList>) nil_chk(restrictions_)) addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ @"bicycle", @"vehicle", @"access" } count:3 type:NSString_class_()])];
    [((id<JavaUtilSet>) nil_chk(restrictedValues_)) addWithId:@"private"];
    [restrictedValues_ addWithId:@"no"];
    [restrictedValues_ addWithId:@"restricted"];
    [restrictedValues_ addWithId:@"military"];
    [restrictedValues_ addWithId:@"emergency"];
    [((id<JavaUtilSet>) nil_chk(intendedValues_)) addWithId:@"yes"];
    [intendedValues_ addWithId:@"designated"];
    [intendedValues_ addWithId:@"official"];
    [intendedValues_ addWithId:@"permissive"];
    [oppositeLanes_ addWithId:@"opposite"];
    [oppositeLanes_ addWithId:@"opposite_lane"];
    [oppositeLanes_ addWithId:@"opposite_track"];
    [self setBlockByDefaultWithBoolean:NO];
    [((id<JavaUtilSet>) nil_chk(potentialBarriers_)) addWithId:@"gate"];
    [potentialBarriers_ addWithId:@"swing_gate"];
    [((id<JavaUtilSet>) nil_chk(absoluteBarriers_)) addWithId:@"stile"];
    [absoluteBarriers_ addWithId:@"turnstile"];
    [unpavedSurfaceTags_ addWithId:@"unpaved"];
    [unpavedSurfaceTags_ addWithId:@"gravel"];
    [unpavedSurfaceTags_ addWithId:@"ground"];
    [unpavedSurfaceTags_ addWithId:@"dirt"];
    [unpavedSurfaceTags_ addWithId:@"grass"];
    [unpavedSurfaceTags_ addWithId:@"compacted"];
    [unpavedSurfaceTags_ addWithId:@"earth"];
    [unpavedSurfaceTags_ addWithId:@"fine_gravel"];
    [unpavedSurfaceTags_ addWithId:@"grass_paver"];
    [unpavedSurfaceTags_ addWithId:@"ice"];
    [unpavedSurfaceTags_ addWithId:@"mud"];
    [unpavedSurfaceTags_ addWithId:@"salt"];
    [unpavedSurfaceTags_ addWithId:@"sand"];
    [unpavedSurfaceTags_ addWithId:@"wood"];
    [roadValues_ addWithId:@"living_street"];
    [roadValues_ addWithId:@"road"];
    [roadValues_ addWithId:@"service"];
    [roadValues_ addWithId:@"unclassified"];
    [roadValues_ addWithId:@"residential"];
    [roadValues_ addWithId:@"trunk"];
    [roadValues_ addWithId:@"trunk_link"];
    [roadValues_ addWithId:@"primary"];
    [roadValues_ addWithId:@"primary_link"];
    [roadValues_ addWithId:@"secondary"];
    [roadValues_ addWithId:@"secondary_link"];
    [roadValues_ addWithId:@"tertiary"];
    [roadValues_ addWithId:@"tertiary_link"];
    maxPossibleSpeed_ = 30;
    [self setTrackTypeSpeedWithNSString:@"grade1" withInt:18];
    [self setTrackTypeSpeedWithNSString:@"grade2" withInt:12];
    [self setTrackTypeSpeedWithNSString:@"grade3" withInt:8];
    [self setTrackTypeSpeedWithNSString:@"grade4" withInt:6];
    [self setTrackTypeSpeedWithNSString:@"grade5" withInt:4];
    [self setSurfaceSpeedWithNSString:@"paved" withInt:18];
    [self setSurfaceSpeedWithNSString:@"asphalt" withInt:18];
    [self setSurfaceSpeedWithNSString:@"cobblestone" withInt:8];
    [self setSurfaceSpeedWithNSString:@"cobblestone:flattened" withInt:10];
    [self setSurfaceSpeedWithNSString:@"sett" withInt:10];
    [self setSurfaceSpeedWithNSString:@"concrete" withInt:18];
    [self setSurfaceSpeedWithNSString:@"concrete:lanes" withInt:16];
    [self setSurfaceSpeedWithNSString:@"concrete:plates" withInt:16];
    [self setSurfaceSpeedWithNSString:@"paving_stones" withInt:12];
    [self setSurfaceSpeedWithNSString:@"paving_stones:30" withInt:12];
    [self setSurfaceSpeedWithNSString:@"unpaved" withInt:14];
    [self setSurfaceSpeedWithNSString:@"compacted" withInt:16];
    [self setSurfaceSpeedWithNSString:@"dirt" withInt:10];
    [self setSurfaceSpeedWithNSString:@"earth" withInt:12];
    [self setSurfaceSpeedWithNSString:@"fine_gravel" withInt:18];
    [self setSurfaceSpeedWithNSString:@"grass" withInt:8];
    [self setSurfaceSpeedWithNSString:@"grass_paver" withInt:8];
    [self setSurfaceSpeedWithNSString:@"gravel" withInt:12];
    [self setSurfaceSpeedWithNSString:@"ground" withInt:12];
    [self setSurfaceSpeedWithNSString:@"ice" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"metal" withInt:10];
    [self setSurfaceSpeedWithNSString:@"mud" withInt:10];
    [self setSurfaceSpeedWithNSString:@"pebblestone" withInt:16];
    [self setSurfaceSpeedWithNSString:@"salt" withInt:6];
    [self setSurfaceSpeedWithNSString:@"sand" withInt:6];
    [self setSurfaceSpeedWithNSString:@"wood" withInt:6];
    [self setHighwaySpeedWithNSString:@"living_street" withInt:6];
    [self setHighwaySpeedWithNSString:@"steps" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    jint CYCLEWAY_SPEED = 18;
    [self setHighwaySpeedWithNSString:@"cycleway" withInt:CYCLEWAY_SPEED];
    [self setHighwaySpeedWithNSString:@"path" withInt:10];
    [self setHighwaySpeedWithNSString:@"footway" withInt:6];
    [self setHighwaySpeedWithNSString:@"pedestrian" withInt:6];
    [self setHighwaySpeedWithNSString:@"track" withInt:12];
    [self setHighwaySpeedWithNSString:@"service" withInt:14];
    [self setHighwaySpeedWithNSString:@"residential" withInt:18];
    [self setHighwaySpeedWithNSString:@"unclassified" withInt:16];
    [self setHighwaySpeedWithNSString:@"road" withInt:12];
    [self setHighwaySpeedWithNSString:@"trunk" withInt:18];
    [self setHighwaySpeedWithNSString:@"trunk_link" withInt:18];
    [self setHighwaySpeedWithNSString:@"primary" withInt:18];
    [self setHighwaySpeedWithNSString:@"primary_link" withInt:18];
    [self setHighwaySpeedWithNSString:@"secondary" withInt:18];
    [self setHighwaySpeedWithNSString:@"secondary_link" withInt:18];
    [self setHighwaySpeedWithNSString:@"tertiary" withInt:18];
    [self setHighwaySpeedWithNSString:@"tertiary_link" withInt:18];
    [self setHighwaySpeedWithNSString:@"motorway" withInt:18];
    [self setHighwaySpeedWithNSString:@"motorway_link" withInt:18];
    [avoidHighwayTags_ addWithId:@"motorway"];
    [avoidHighwayTags_ addWithId:@"motorway_link"];
    [self setCyclingNetworkPreferenceWithNSString:@"icn" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_BEST())) getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"ncn" withInt:[PriorityCodeEnum_get_BEST() getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"rcn" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_VERY_NICE())) getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"lcn" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"mtb" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_UNCHANGED())) getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"deprecated" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_AVOID_AT_ALL_COSTS())) getValue]];
    [self setAvoidSpeedLimitWithInt:71];
  }
  return self;
}

- (jint)getVersion {
  return 1;
}

- (jint)defineWayBitsWithInt:(jint)index
                     withInt:(jint)shift {
  shift = [super defineWayBitsWithInt:index withInt:shift];
  AbstractFlagEncoder_setAndConsume_speedEncoder_(self, [[EncodedDoubleValue alloc] initWithNSString:@"Speed" withInt:shift withInt:speedBits_ withDouble:speedFactor_ withLong:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(highwaySpeeds_)) getWithId:@"cycleway"])) intValue] withInt:maxPossibleSpeed_]);
  shift += [speedEncoder_ getBits];
  unpavedBit_ = LShift64(1LL, shift++);
  BikeCommonFlagEncoder_setAndConsume_wayTypeEncoder_(self, [[EncodedValue alloc] initWithNSString:@"WayType" withInt:shift withInt:2 withDouble:1 withLong:0 withInt:3 withBoolean:YES]);
  shift += [wayTypeEncoder_ getBits];
  BikeCommonFlagEncoder_setAndConsume_priorityWayEncoder_(self, [[EncodedValue alloc] initWithNSString:@"PreferWay" withInt:shift withInt:3 withDouble:1 withLong:0 withInt:7]);
  shift += [priorityWayEncoder_ getBits];
  return shift;
}

- (jint)defineRelationBitsWithInt:(jint)index
                          withInt:(jint)shift {
  BikeCommonFlagEncoder_setAndConsume_relationCodeEncoder_(self, [[EncodedValue alloc] initWithNSString:@"RelationCode" withInt:shift withInt:3 withDouble:1 withLong:0 withInt:7]);
  return shift + [relationCodeEncoder_ getBits];
}

- (jlong)acceptWayWithReaderWay:(ReaderWay *)way {
  NSString *highwayValue = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway"];
  if (highwayValue == nil) {
    if ([way hasTagWithNSString:@"route" withJavaUtilSet:ferries_]) {
      NSString *bikeTag = [way getTagWithNSString:@"bicycle"];
      if ((bikeTag == nil && ![way hasTagWithNSString:@"foot" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]]) || [@"yes" isEqual:bikeTag]) return acceptBit_ | ferryBit_;
    }
    if ([way hasTagWithNSString:@"railway" withId:@"platform"]) return acceptBit_;
    return 0;
  }
  if (![((id<JavaUtilMap>) nil_chk(highwaySpeeds_)) containsKeyWithId:highwayValue]) return 0;
  if ([way hasTagWithNSString:@"bicycle" withJavaUtilSet:intendedValues_] || [way hasTagWithNSString:@"bicycle" withId:@"dismount"]) return acceptBit_;
  if ([@"motorway" isEqual:highwayValue] || [@"motorway_link" isEqual:highwayValue]) return 0;
  if ([way hasTagWithNSString:@"motorroad" withId:@"yes"]) return 0;
  if ([self isBlockFords] && ([way hasTagWithNSString:@"highway" withId:@"ford"] || [way hasTagWithNSString:@"ford" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]])) return 0;
  if ([way hasTagWithJavaUtilList:restrictions_ withJavaUtilSet:restrictedValues_] && ![((id<ConditionalTagInspector>) nil_chk([self getConditionalTagInspector])) isRestrictedWayConditionallyPermittedWithReaderWay:way]) return 0;
  NSString *sacScale = [way getTagWithNSString:@"sac_scale"];
  if (sacScale != nil) {
    if (([way hasTagWithNSString:@"highway" withId:@"cycleway"]) && ([way hasTagWithNSString:@"sac_scale" withId:@"hiking"])) return acceptBit_;
    if (![self isSacScaleAllowedWithNSString:sacScale]) return 0;
  }
  if ([((id<ConditionalTagInspector>) nil_chk([self getConditionalTagInspector])) isPermittedWayConditionallyRestrictedWithReaderWay:way]) return 0;
  else return acceptBit_;
}

- (jboolean)isSacScaleAllowedWithNSString:(NSString *)sacScale {
  return [@"hiking" isEqual:sacScale];
}

- (jlong)handleRelationTagsWithReaderRelation:(ReaderRelation *)relation
                                     withLong:(jlong)oldRelationFlags {
  jint code = 0;
  if ([((ReaderRelation *) nil_chk(relation)) hasTagWithNSString:@"route" withId:@"bicycle"]) {
    JavaLangInteger *val = [((id<JavaUtilMap>) nil_chk(bikeNetworkToCode_)) getWithId:[relation getTagWithNSString:@"network"]];
    if (val != nil) code = [val intValue];
    else code = [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue];
  }
  else if ([relation hasTagWithNSString:@"route" withId:@"ferry"]) {
    code = [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_AVOID_IF_POSSIBLE())) getValue];
  }
  jint oldCode = (jint) [((EncodedValue *) nil_chk(relationCodeEncoder_)) getValueWithLong:oldRelationFlags];
  if (oldCode < code) return [relationCodeEncoder_ setValueWithLong:0 withLong:code];
  return oldRelationFlags;
}

- (jdouble)applyMaxSpeedWithReaderWay:(ReaderWay *)way
                           withDouble:(jdouble)speed {
  jdouble maxSpeed = [self getMaxSpeedWithReaderWay:way];
  if (maxSpeed >= 0) {
    if (maxSpeed < speed) {
      return maxSpeed;
    }
  }
  return speed;
}

- (jlong)handleWayTagsWithReaderWay:(ReaderWay *)way
                           withLong:(jlong)allowed
                           withLong:(jlong)relationFlags {
  if (![self isAcceptWithLong:allowed]) return 0;
  jlong flags = 0;
  jdouble wayTypeSpeed = [self getSpeedWithReaderWay:way];
  if (![self isFerryWithLong:allowed]) {
    wayTypeSpeed = [self applyMaxSpeedWithReaderWay:way withDouble:wayTypeSpeed];
    flags = [self handleSpeedWithReaderWay:way withDouble:wayTypeSpeed withLong:flags];
    flags = [self handleBikeRelatedWithReaderWay:way withLong:flags withBoolean:relationFlags > [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_UNCHANGED())) getValue]];
    jboolean isRoundabout = [((ReaderWay *) nil_chk(way)) hasTagWithNSString:@"junction" withId:@"roundabout"];
    if (isRoundabout) {
      flags = [self setBoolWithLong:flags withInt:FlagEncoder_K_ROUNDABOUT withBoolean:YES];
    }
  }
  else {
    jdouble ferrySpeed = [self getFerrySpeedWithReaderWay:way withDouble:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(highwaySpeeds_)) getWithId:@"living_street"])) intValue] withDouble:[((JavaLangInteger *) nil_chk([highwaySpeeds_ getWithId:@"track"])) intValue] withDouble:[((JavaLangInteger *) nil_chk([highwaySpeeds_ getWithId:@"primary"])) intValue]];
    flags = [self handleSpeedWithReaderWay:way withDouble:ferrySpeed withLong:flags];
    flags |= directionBitMask_;
  }
  jint priorityFromRelation = 0;
  if (relationFlags != 0) priorityFromRelation = (jint) [((EncodedValue *) nil_chk(relationCodeEncoder_)) getValueWithLong:relationFlags];
  flags = [((EncodedValue *) nil_chk(priorityWayEncoder_)) setValueWithLong:flags withLong:[self handlePriorityWithReaderWay:way withDouble:wayTypeSpeed withInt:priorityFromRelation]];
  return flags;
}

- (jint)getSpeedWithReaderWay:(ReaderWay *)way {
  jint speed = BikeCommonFlagEncoder_PUSHING_SECTION_SPEED;
  NSString *highwayTag = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway"];
  JavaLangInteger *highwaySpeed = [((id<JavaUtilMap>) nil_chk(highwaySpeeds_)) getWithId:highwayTag];
  if ([way hasTagWithNSString:@"highway" withJavaUtilSet:pushingSectionsHighways_] && (([way hasTagWithNSString:@"foot" withId:@"yes"] && [way hasTagWithNSString:@"segregated" withId:@"yes"]) || [way hasTagWithNSString:@"bicycle" withId:@"designated"] || [way hasTagWithNSString:@"bicycle" withId:@"official"])) highwaySpeed = JavaLangInteger_valueOfWithInt_([self getHighwaySpeedWithNSString:@"cycleway"]);
  NSString *s = [way getTagWithNSString:@"surface"];
  if (!Helper_isEmptyWithNSString_(s)) {
    JavaLangInteger *surfaceSpeed = [((id<JavaUtilMap>) nil_chk(surfaceSpeeds_)) getWithId:s];
    if (surfaceSpeed != nil) {
      speed = [surfaceSpeed intValue];
      if (highwaySpeed != nil && [surfaceSpeed intValue] > [highwaySpeed intValue]) {
        if ([((JavaUtilHashSet *) nil_chk(pushingSectionsHighways_)) containsWithId:highwayTag]) speed = [highwaySpeed intValue];
        else speed = [surfaceSpeed intValue];
      }
    }
  }
  else {
    NSString *tt = [way getTagWithNSString:@"tracktype"];
    if (!Helper_isEmptyWithNSString_(tt)) {
      JavaLangInteger *tInt = [((id<JavaUtilMap>) nil_chk(trackTypeSpeeds_)) getWithId:tt];
      if (tInt != nil) speed = [tInt intValue];
    }
    else if (highwaySpeed != nil) {
      if (![way hasTagWithNSString:@"service" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]]) speed = [highwaySpeed intValue];
      else speed = [((JavaLangInteger *) nil_chk([highwaySpeeds_ getWithId:@"living_street"])) intValue];
    }
  }
  if (speed > BikeCommonFlagEncoder_PUSHING_SECTION_SPEED && ([way hasTagWithNSString:@"highway" withJavaUtilSet:pushingSectionsHighways_] || [way hasTagWithNSString:@"bicycle" withId:@"dismount"])) {
    if (![way hasTagWithNSString:@"bicycle" withJavaUtilSet:intendedValues_]) {
      if ([way hasTagWithNSString:@"highway" withId:@"steps"]) speed = BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2;
      else speed = BikeCommonFlagEncoder_PUSHING_SECTION_SPEED;
    }
    else if ([way hasTagWithNSString:@"bicycle" withId:@"designated"] || [way hasTagWithNSString:@"bicycle" withId:@"official"]) {
      speed = [((JavaLangInteger *) nil_chk([highwaySpeeds_ getWithId:@"cycleway"])) intValue];
    }
    else {
      speed = BikeCommonFlagEncoder_PUSHING_SECTION_SPEED;
    }
    if (speed <= BikeCommonFlagEncoder_PUSHING_SECTION_SPEED && [way hasTagWithNSString:@"segregated" withId:@"yes"]) speed = BikeCommonFlagEncoder_PUSHING_SECTION_SPEED * 2;
  }
  return speed;
}

- (InstructionAnnotation *)getAnnotationWithLong:(jlong)flags
                                 withTranslation:(id<Translation>)tr {
  jint paveType = 0;
  if ([self isBoolWithLong:flags withInt:BikeCommonFlagEncoder_K_UNPAVED]) paveType = 1;
  jint wayType = (jint) [((EncodedValue *) nil_chk(wayTypeEncoder_)) getValueWithLong:flags];
  NSString *wayName = [self getWayNameWithInt:paveType withInt:wayType withTranslation:tr];
  return [[[InstructionAnnotation alloc] initWithInt:0 withNSString:wayName] autorelease];
}

- (NSString *)getWayNameWithInt:(jint)pavementType
                        withInt:(jint)wayType
                withTranslation:(id<Translation>)tr {
  NSString *pavementName = @"";
  if (pavementType == 1) pavementName = [((id<Translation>) nil_chk(tr)) trWithNSString:@"unpaved" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
  NSString *wayTypeName = @"";
  switch (wayType) {
    case 0:
    wayTypeName = @"";
    break;
    case 1:
    wayTypeName = [((id<Translation>) nil_chk(tr)) trWithNSString:@"off_bike" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
    break;
    case 2:
    wayTypeName = [((id<Translation>) nil_chk(tr)) trWithNSString:@"cycleway" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
    break;
    case 3:
    wayTypeName = [((id<Translation>) nil_chk(tr)) trWithNSString:@"small_way" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
    break;
  }
  if ([((NSString *) nil_chk(pavementName)) isEmpty]) {
    if (wayType == 0 || wayType == 3) return @"";
    return wayTypeName;
  }
  else if ([((NSString *) nil_chk(wayTypeName)) isEmpty]) return pavementName;
  else return JreStrcat("$$$", wayTypeName, @", ", pavementName);
}

- (jint)handlePriorityWithReaderWay:(ReaderWay *)way
                         withDouble:(jdouble)wayTypeSpeed
                            withInt:(jint)priorityFromRelation {
  JavaUtilTreeMap *weightToPrioMap = [[[JavaUtilTreeMap alloc] init] autorelease];
  if (priorityFromRelation == 0) [weightToPrioMap putWithId:JavaLangDouble_valueOfWithDouble_(0.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_UNCHANGED())) getValue])];
  else [weightToPrioMap putWithId:JavaLangDouble_valueOfWithDouble_(110.0) withId:JavaLangInteger_valueOfWithInt_(priorityFromRelation)];
  [self collectWithReaderWay:way withDouble:wayTypeSpeed withJavaUtilTreeMap:weightToPrioMap];
  return [((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([weightToPrioMap lastEntry])) getValue])) intValue];
}

- (PriorityCodeEnum *)convertClassValueToPriorityWithNSString:(NSString *)tagvalue {
  return BikeCommonFlagEncoder_convertClassValueToPriorityWithNSString_(self, tagvalue);
}

- (void)collectWithReaderWay:(ReaderWay *)way
                  withDouble:(jdouble)wayTypeSpeed
         withJavaUtilTreeMap:(JavaUtilTreeMap *)weightToPrioMap {
  NSString *service = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"service"];
  NSString *highway = [way getTagWithNSString:@"highway"];
  if ([way hasTagWithNSString:@"bicycle" withId:@"designated"] || [way hasTagWithNSString:@"bicycle" withId:@"official"]) {
    if ([@"path" isEqual:highway]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(100.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_VERY_NICE())) getValue])];
    else [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(100.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue])];
  }
  if ([@"cycleway" isEqual:highway]) {
    if ([way hasTagWithNSString:@"foot" withJavaUtilSet:intendedValues_] && ![way hasTagWithNSString:@"segregated" withId:@"yes"]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(100.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue])];
    else [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(100.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_VERY_NICE())) getValue])];
  }
  jdouble maxSpeed = [self getMaxSpeedWithReaderWay:way];
  if ([((id<JavaUtilSet>) nil_chk(preferHighwayTags_)) containsWithId:highway] || (maxSpeed > 0 && maxSpeed <= 30)) {
    if (maxSpeed < avoidSpeedLimit_) {
      [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(40.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue])];
      if ([way hasTagWithNSString:@"tunnel" withJavaUtilSet:intendedValues_]) [weightToPrioMap putWithId:JavaLangDouble_valueOfWithDouble_(40.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_UNCHANGED())) getValue])];
    }
  }
  else if ([((id<JavaUtilSet>) nil_chk(avoidHighwayTags_)) containsWithId:highway] || (maxSpeed >= avoidSpeedLimit_ && ![@"track" isEqual:highway])) {
    [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(50.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_REACH_DEST())) getValue])];
    if ([way hasTagWithNSString:@"tunnel" withJavaUtilSet:intendedValues_]) [weightToPrioMap putWithId:JavaLangDouble_valueOfWithDouble_(50.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_AVOID_AT_ALL_COSTS())) getValue])];
  }
  if ([((JavaUtilHashSet *) nil_chk(pushingSectionsHighways_)) containsWithId:highway] || [way hasTagWithNSString:@"bicycle" withId:@"use_sidepath"] || [@"parking_aisle" isEqual:service]) {
    jint pushingSectionPrio = [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_AVOID_IF_POSSIBLE())) getValue];
    if ([way hasTagWithNSString:@"bicycle" withId:@"yes"] || [way hasTagWithNSString:@"bicycle" withId:@"permissive"]) pushingSectionPrio = [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue];
    if ([way hasTagWithNSString:@"bicycle" withId:@"designated"] || [way hasTagWithNSString:@"bicycle" withId:@"official"]) pushingSectionPrio = [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_VERY_NICE())) getValue];
    if ([way hasTagWithNSString:@"foot" withId:@"yes"]) {
      pushingSectionPrio = JavaLangMath_maxWithInt_withInt_(pushingSectionPrio - 1, [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_WORST())) getValue]);
      if ([way hasTagWithNSString:@"segregated" withId:@"yes"]) pushingSectionPrio = JavaLangMath_minWithInt_withInt_(pushingSectionPrio + 1, [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_BEST())) getValue]);
    }
    [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(100.0) withId:JavaLangInteger_valueOfWithInt_(pushingSectionPrio)];
  }
  if ([way hasTagWithNSString:@"railway" withId:@"tram"]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(50.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_AVOID_AT_ALL_COSTS())) getValue])];
  NSString *classBicycleValue = [way getTagWithNSString:classBicycleKey_];
  if (classBicycleValue != nil) {
    [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(100.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(BikeCommonFlagEncoder_convertClassValueToPriorityWithNSString_(self, classBicycleValue))) getValue])];
  }
  else {
    NSString *classBicycle = [way getTagWithNSString:@"class:bicycle"];
    if (classBicycle != nil) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(100.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(BikeCommonFlagEncoder_convertClassValueToPriorityWithNSString_(self, classBicycle))) getValue])];
  }
  if ([way hasTagWithNSString:@"scenic" withId:@"yes"] || (maxSpeed > 0 && maxSpeed < wayTypeSpeed)) {
    if ([((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) lastEntry])) getValue])) intValue] < [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_BEST())) getValue]) [weightToPrioMap putWithId:JavaLangDouble_valueOfWithDouble_(110.0) withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk([weightToPrioMap lastEntry])) getValue])) intValue] + 1)];
  }
}

- (jlong)handleBikeRelatedWithReaderWay:(ReaderWay *)way
                               withLong:(jlong)encoded
                            withBoolean:(jboolean)partOfCycleRelation {
  NSString *surfaceTag = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"surface"];
  NSString *highway = [way getTagWithNSString:@"highway"];
  NSString *trackType = [way getTagWithNSString:@"tracktype"];
  if (([@"track" isEqual:highway] && (trackType == nil || ![@"grade1" isEqual:trackType])) || ([@"path" isEqual:highway] && surfaceTag == nil) || [((id<JavaUtilSet>) nil_chk(unpavedSurfaceTags_)) containsWithId:surfaceTag]) {
    encoded = [self setBoolWithLong:encoded withInt:BikeCommonFlagEncoder_K_UNPAVED withBoolean:YES];
  }
  BikeCommonFlagEncoder_WayTypeEnum *wayType;
  if ([((id<JavaUtilSet>) nil_chk(roadValues_)) containsWithId:highway]) wayType = BikeCommonFlagEncoder_WayTypeEnum_get_ROAD();
  else wayType = BikeCommonFlagEncoder_WayTypeEnum_get_OTHER_SMALL_WAY();
  jboolean isPushingSection = [self isPushingSectionWithReaderWay:way];
  if ((isPushingSection && !partOfCycleRelation) || [@"steps" isEqual:highway]) wayType = BikeCommonFlagEncoder_WayTypeEnum_get_PUSHING_SECTION();
  if ([way hasTagWithNSString:@"bicycle" withJavaUtilSet:intendedValues_]) {
    if (isPushingSection && ![way hasTagWithNSString:@"bicycle" withId:@"designated"]) wayType = BikeCommonFlagEncoder_WayTypeEnum_get_OTHER_SMALL_WAY();
    else if (wayType == BikeCommonFlagEncoder_WayTypeEnum_get_OTHER_SMALL_WAY() || wayType == BikeCommonFlagEncoder_WayTypeEnum_get_PUSHING_SECTION()) wayType = BikeCommonFlagEncoder_WayTypeEnum_get_CYCLEWAY();
  }
  else if ([@"cycleway" isEqual:highway]) wayType = BikeCommonFlagEncoder_WayTypeEnum_get_CYCLEWAY();
  return [((EncodedValue *) nil_chk(wayTypeEncoder_)) setValueWithLong:encoded withLong:[((BikeCommonFlagEncoder_WayTypeEnum *) nil_chk(wayType)) getValue]];
}

- (jlong)setBoolWithLong:(jlong)flags
                 withInt:(jint)key
             withBoolean:(jboolean)value {
  switch (key) {
    case BikeCommonFlagEncoder_K_UNPAVED:
    return value ? flags | unpavedBit_ : flags & ~unpavedBit_;
    default:
    return [super setBoolWithLong:flags withInt:key withBoolean:value];
  }
}

- (jboolean)isBoolWithLong:(jlong)flags
                   withInt:(jint)key {
  switch (key) {
    case BikeCommonFlagEncoder_K_UNPAVED:
    return (flags & unpavedBit_) != 0;
    default:
    return [super isBoolWithLong:flags withInt:key];
  }
}

- (jdouble)getDoubleWithLong:(jlong)flags
                     withInt:(jint)key {
  switch (key) {
    case ComGraphhopperRoutingWeightingPriorityWeighting_KEY:
    return (jdouble) [((EncodedValue *) nil_chk(priorityWayEncoder_)) getValueWithLong:flags] / [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_BEST())) getValue];
    default:
    return [super getDoubleWithLong:flags withInt:key];
  }
}

- (jboolean)isPushingSectionWithReaderWay:(ReaderWay *)way {
  return [((ReaderWay *) nil_chk(way)) hasTagWithNSString:@"highway" withJavaUtilSet:pushingSectionsHighways_] || [way hasTagWithNSString:@"railway" withId:@"platform"] || [way hasTagWithNSString:@"bicycle" withId:@"dismount"];
}

- (jlong)handleSpeedWithReaderWay:(ReaderWay *)way
                       withDouble:(jdouble)speed
                         withLong:(jlong)encoded {
  encoded = [self setSpeedWithLong:encoded withDouble:speed];
  jboolean isOneway = [((ReaderWay *) nil_chk(way)) hasTagWithNSString:@"oneway" withJavaUtilSet:oneways_] || [way hasTagWithNSString:@"oneway:bicycle" withJavaUtilSet:oneways_] || [way hasTagWithNSString:@"vehicle:backward" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]] || [way hasTagWithNSString:@"vehicle:forward" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]] || [way hasTagWithNSString:@"bicycle:forward" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]];
  if ((isOneway || [way hasTagWithNSString:@"junction" withId:@"roundabout"]) && ![way hasTagWithNSString:@"oneway:bicycle" withId:@"no"] && ![way hasTagWithNSString:@"bicycle:backward" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]] && ![way hasTagWithNSString:@"cycleway" withJavaUtilSet:oppositeLanes_]) {
    jboolean isBackward = [way hasTagWithNSString:@"oneway" withId:@"-1"] || [way hasTagWithNSString:@"oneway:bicycle" withId:@"-1"] || [way hasTagWithNSString:@"vehicle:forward" withId:@"no"] || [way hasTagWithNSString:@"bicycle:forward" withId:@"no"];
    if (isBackward) encoded |= backwardBit_;
    else encoded |= forwardBit_;
  }
  else {
    encoded |= directionBitMask_;
  }
  return encoded;
}

- (void)setHighwaySpeedWithNSString:(NSString *)highway
                            withInt:(jint)speed {
  [((id<JavaUtilMap>) nil_chk(highwaySpeeds_)) putWithId:highway withId:JavaLangInteger_valueOfWithInt_(speed)];
}

- (jint)getHighwaySpeedWithNSString:(NSString *)key {
  return [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(highwaySpeeds_)) getWithId:key])) intValue];
}

- (void)setTrackTypeSpeedWithNSString:(NSString *)tracktype
                              withInt:(jint)speed {
  [((id<JavaUtilMap>) nil_chk(trackTypeSpeeds_)) putWithId:tracktype withId:JavaLangInteger_valueOfWithInt_(speed)];
}

- (void)setSurfaceSpeedWithNSString:(NSString *)surface
                            withInt:(jint)speed {
  [((id<JavaUtilMap>) nil_chk(surfaceSpeeds_)) putWithId:surface withId:JavaLangInteger_valueOfWithInt_(speed)];
}

- (void)setCyclingNetworkPreferenceWithNSString:(NSString *)network
                                        withInt:(jint)code {
  [((id<JavaUtilMap>) nil_chk(bikeNetworkToCode_)) putWithId:network withId:JavaLangInteger_valueOfWithInt_(code)];
}

- (void)addPushingSectionWithNSString:(NSString *)highway {
  [((JavaUtilHashSet *) nil_chk(pushingSectionsHighways_)) addWithId:highway];
}

- (jboolean)supportsWithIOSClass:(IOSClass *)feature {
  if ([super supportsWithIOSClass:feature]) return YES;
  return [ComGraphhopperRoutingWeightingPriorityWeighting_class_() isAssignableFrom:feature];
}

- (void)setAvoidSpeedLimitWithInt:(jint)limit {
  avoidSpeedLimit_ = limit;
}

- (void)setSpecificClassBicycleWithNSString:(NSString *)subkey {
  BikeCommonFlagEncoder_set_classBicycleKey_(self, JreStrcat("$$", @"class:bicycle:", subkey));
}

- (void)dealloc {
  RELEASE_(pushingSectionsHighways_);
  RELEASE_(oppositeLanes_);
  RELEASE_(preferHighwayTags_);
  RELEASE_(avoidHighwayTags_);
  RELEASE_(unpavedSurfaceTags_);
  RELEASE_(trackTypeSpeeds_);
  RELEASE_(surfaceSpeeds_);
  RELEASE_(roadValues_);
  RELEASE_(highwaySpeeds_);
  RELEASE_(bikeNetworkToCode_);
  RELEASE_(relationCodeEncoder_);
  RELEASE_(priorityWayEncoder_);
  RELEASE_(wayTypeEncoder_);
  RELEASE_(classBicycleKey_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(BikeCommonFlagEncoder *)other {
  [super copyAllFieldsTo:other];
  BikeCommonFlagEncoder_set_pushingSectionsHighways_(other, pushingSectionsHighways_);
  BikeCommonFlagEncoder_set_oppositeLanes_(other, oppositeLanes_);
  BikeCommonFlagEncoder_set_preferHighwayTags_(other, preferHighwayTags_);
  BikeCommonFlagEncoder_set_avoidHighwayTags_(other, avoidHighwayTags_);
  BikeCommonFlagEncoder_set_unpavedSurfaceTags_(other, unpavedSurfaceTags_);
  BikeCommonFlagEncoder_set_trackTypeSpeeds_(other, trackTypeSpeeds_);
  BikeCommonFlagEncoder_set_surfaceSpeeds_(other, surfaceSpeeds_);
  BikeCommonFlagEncoder_set_roadValues_(other, roadValues_);
  BikeCommonFlagEncoder_set_highwaySpeeds_(other, highwaySpeeds_);
  BikeCommonFlagEncoder_set_bikeNetworkToCode_(other, bikeNetworkToCode_);
  BikeCommonFlagEncoder_set_relationCodeEncoder_(other, relationCodeEncoder_);
  BikeCommonFlagEncoder_set_priorityWayEncoder_(other, priorityWayEncoder_);
  other->unpavedBit_ = unpavedBit_;
  BikeCommonFlagEncoder_set_wayTypeEncoder_(other, wayTypeEncoder_);
  other->avoidSpeedLimit_ = avoidSpeedLimit_;
  BikeCommonFlagEncoder_set_classBicycleKey_(other, classBicycleKey_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withDouble:withInt:", "BikeCommonFlagEncoder", NULL, 0x4, NULL },
    { "getVersion", NULL, "I", 0x1, NULL },
    { "defineWayBitsWithInt:withInt:", "defineWayBits", "I", 0x1, NULL },
    { "defineRelationBitsWithInt:withInt:", "defineRelationBits", "I", 0x1, NULL },
    { "acceptWayWithReaderWay:", "acceptWay", "J", 0x1, NULL },
    { "isSacScaleAllowedWithNSString:", "isSacScaleAllowed", "Z", 0x0, NULL },
    { "handleRelationTagsWithReaderRelation:withLong:", "handleRelationTags", "J", 0x1, NULL },
    { "applyMaxSpeedWithReaderWay:withDouble:", "applyMaxSpeed", "D", 0x4, NULL },
    { "handleWayTagsWithReaderWay:withLong:withLong:", "handleWayTags", "J", 0x1, NULL },
    { "getSpeedWithReaderWay:", "getSpeed", "I", 0x0, NULL },
    { "getAnnotationWithLong:withTranslation:", "getAnnotation", "Lcom.graphhopper.util.InstructionAnnotation;", 0x1, NULL },
    { "getWayNameWithInt:withInt:withTranslation:", "getWayName", "Ljava.lang.String;", 0x0, NULL },
    { "handlePriorityWithReaderWay:withDouble:withInt:", "handlePriority", "I", 0x4, NULL },
    { "convertClassValueToPriorityWithNSString:", "convertClassValueToPriority", "Lcom.graphhopper.routing.util.PriorityCode;", 0x2, NULL },
    { "collectWithReaderWay:withDouble:withJavaUtilTreeMap:", "collect", "V", 0x0, NULL },
    { "handleBikeRelatedWithReaderWay:withLong:withBoolean:", "handleBikeRelated", "J", 0x0, NULL },
    { "setBoolWithLong:withInt:withBoolean:", "setBool", "J", 0x1, NULL },
    { "isBoolWithLong:withInt:", "isBool", "Z", 0x1, NULL },
    { "getDoubleWithLong:withInt:", "getDouble", "D", 0x1, NULL },
    { "isPushingSectionWithReaderWay:", "isPushingSection", "Z", 0x0, NULL },
    { "handleSpeedWithReaderWay:withDouble:withLong:", "handleSpeed", "J", 0x4, NULL },
    { "setHighwaySpeedWithNSString:withInt:", "setHighwaySpeed", "V", 0x4, NULL },
    { "getHighwaySpeedWithNSString:", "getHighwaySpeed", "I", 0x4, NULL },
    { "setTrackTypeSpeedWithNSString:withInt:", "setTrackTypeSpeed", "V", 0x0, NULL },
    { "setSurfaceSpeedWithNSString:withInt:", "setSurfaceSpeed", "V", 0x0, NULL },
    { "setCyclingNetworkPreferenceWithNSString:withInt:", "setCyclingNetworkPreference", "V", 0x0, NULL },
    { "addPushingSectionWithNSString:", "addPushingSection", "V", 0x0, NULL },
    { "supportsWithIOSClass:", "supports", "Z", 0x1, NULL },
    { "setAvoidSpeedLimitWithInt:", "setAvoidSpeedLimit", "V", 0x1, NULL },
    { "setSpecificClassBicycleWithNSString:", "setSpecificClassBicycle", "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "K_UNPAVED_", NULL, 0x19, "I", NULL, .constantValue.asInt = BikeCommonFlagEncoder_K_UNPAVED },
    { "PUSHING_SECTION_SPEED_", NULL, 0x1c, "I", NULL, .constantValue.asInt = BikeCommonFlagEncoder_PUSHING_SECTION_SPEED },
    { "pushingSectionsHighways_", NULL, 0x14, "Ljava.util.HashSet;", NULL,  },
    { "oppositeLanes_", NULL, 0x14, "Ljava.util.HashSet;", NULL,  },
    { "preferHighwayTags_", NULL, 0x14, "Ljava.util.Set;", NULL,  },
    { "avoidHighwayTags_", NULL, 0x14, "Ljava.util.Set;", NULL,  },
    { "unpavedSurfaceTags_", NULL, 0x14, "Ljava.util.Set;", NULL,  },
    { "trackTypeSpeeds_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "surfaceSpeeds_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "roadValues_", NULL, 0x12, "Ljava.util.Set;", NULL,  },
    { "highwaySpeeds_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "bikeNetworkToCode_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "relationCodeEncoder_", NULL, 0x4, "Lcom.graphhopper.routing.util.EncodedValue;", NULL,  },
    { "priorityWayEncoder_", NULL, 0x0, "Lcom.graphhopper.routing.util.EncodedValue;", NULL,  },
    { "unpavedBit_", NULL, 0x2, "J", NULL,  },
    { "wayTypeEncoder_", NULL, 0x2, "Lcom.graphhopper.routing.util.EncodedValue;", NULL,  },
    { "avoidSpeedLimit_", NULL, 0x2, "I", NULL,  },
    { "classBicycleKey_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _BikeCommonFlagEncoder = { 1, "BikeCommonFlagEncoder", "com.graphhopper.routing.util", NULL, 0x1, 30, methods, 18, fields, 0, NULL};
  return &_BikeCommonFlagEncoder;
}

@end

PriorityCodeEnum *BikeCommonFlagEncoder_convertClassValueToPriorityWithNSString_(BikeCommonFlagEncoder *self, NSString *tagvalue) {
  jint classvalue;
  @try {
    classvalue = JavaLangInteger_parseIntWithNSString_(tagvalue);
  }
  @catch (JavaLangNumberFormatException *e) {
    return PriorityCodeEnum_get_UNCHANGED();
  }
  switch (classvalue) {
    case 3:
    return PriorityCodeEnum_get_BEST();
    case 2:
    return PriorityCodeEnum_get_VERY_NICE();
    case 1:
    return PriorityCodeEnum_get_PREFER();
    case 0:
    return PriorityCodeEnum_get_UNCHANGED();
    case -1:
    return PriorityCodeEnum_get_AVOID_IF_POSSIBLE();
    case -2:
    return PriorityCodeEnum_get_REACH_DEST();
    case -3:
    return PriorityCodeEnum_get_AVOID_AT_ALL_COSTS();
    default:
    return PriorityCodeEnum_get_UNCHANGED();
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BikeCommonFlagEncoder)

BOOL BikeCommonFlagEncoder_WayTypeEnum_initialized = NO;

BikeCommonFlagEncoder_WayTypeEnum *BikeCommonFlagEncoder_WayTypeEnum_values_[4];

@implementation BikeCommonFlagEncoder_WayTypeEnum

- (instancetype)initWithInt:(jint)value
               withNSString:(NSString *)__name
                    withInt:(jint)__ordinal {
  if (self = [super initWithNSString:__name withInt:__ordinal]) {
    self->value_ = value;
  }
  return self;
}

- (jint)getValue {
  return value_;
}

IOSObjectArray *BikeCommonFlagEncoder_WayTypeEnum_values() {
  BikeCommonFlagEncoder_WayTypeEnum_init();
  return [IOSObjectArray arrayWithObjects:BikeCommonFlagEncoder_WayTypeEnum_values_ count:4 type:BikeCommonFlagEncoder_WayTypeEnum_class_()];
}
+ (IOSObjectArray *)values {
  return BikeCommonFlagEncoder_WayTypeEnum_values();
}

+ (BikeCommonFlagEncoder_WayTypeEnum *)valueOfWithNSString:(NSString *)name {
  return BikeCommonFlagEncoder_WayTypeEnum_valueOfWithNSString_(name);
}

BikeCommonFlagEncoder_WayTypeEnum *BikeCommonFlagEncoder_WayTypeEnum_valueOfWithNSString_(NSString *name) {
  BikeCommonFlagEncoder_WayTypeEnum_init();
  for (int i = 0; i < 4; i++) {
    BikeCommonFlagEncoder_WayTypeEnum *e = BikeCommonFlagEncoder_WayTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [BikeCommonFlagEncoder_WayTypeEnum class]) {
    BikeCommonFlagEncoder_WayTypeEnum_ROAD = [[BikeCommonFlagEncoder_WayTypeEnum alloc] initWithInt:0 withNSString:@"ROAD" withInt:0];
    BikeCommonFlagEncoder_WayTypeEnum_PUSHING_SECTION = [[BikeCommonFlagEncoder_WayTypeEnum alloc] initWithInt:1 withNSString:@"PUSHING_SECTION" withInt:1];
    BikeCommonFlagEncoder_WayTypeEnum_CYCLEWAY = [[BikeCommonFlagEncoder_WayTypeEnum alloc] initWithInt:2 withNSString:@"CYCLEWAY" withInt:2];
    BikeCommonFlagEncoder_WayTypeEnum_OTHER_SMALL_WAY = [[BikeCommonFlagEncoder_WayTypeEnum alloc] initWithInt:3 withNSString:@"OTHER_SMALL_WAY" withInt:3];
    J2OBJC_SET_INITIALIZED(BikeCommonFlagEncoder_WayTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withNSString:withInt:", "WayType", NULL, 0x2, NULL },
    { "getValue", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ROAD", "ROAD", 0x4019, "Lcom.graphhopper.routing.util.BikeCommonFlagEncoder$WayType;", &BikeCommonFlagEncoder_WayTypeEnum_ROAD,  },
    { "PUSHING_SECTION", "PUSHING_SECTION", 0x4019, "Lcom.graphhopper.routing.util.BikeCommonFlagEncoder$WayType;", &BikeCommonFlagEncoder_WayTypeEnum_PUSHING_SECTION,  },
    { "CYCLEWAY", "CYCLEWAY", 0x4019, "Lcom.graphhopper.routing.util.BikeCommonFlagEncoder$WayType;", &BikeCommonFlagEncoder_WayTypeEnum_CYCLEWAY,  },
    { "OTHER_SMALL_WAY", "OTHER_SMALL_WAY", 0x4019, "Lcom.graphhopper.routing.util.BikeCommonFlagEncoder$WayType;", &BikeCommonFlagEncoder_WayTypeEnum_OTHER_SMALL_WAY,  },
    { "value_", NULL, 0x12, "I", NULL,  },
  };
  static const char *superclass_type_args[] = {"Lcom.graphhopper.routing.util.BikeCommonFlagEncoder$WayType;"};
  static const J2ObjcClassInfo _BikeCommonFlagEncoder_WayTypeEnum = { 1, "WayType", "com.graphhopper.routing.util", "BikeCommonFlagEncoder", 0x401a, 2, methods, 5, fields, 1, superclass_type_args};
  return &_BikeCommonFlagEncoder_WayTypeEnum;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(BikeCommonFlagEncoder_WayTypeEnum)
