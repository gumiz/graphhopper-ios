//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/EncodedDoubleValue.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/EncodedDoubleValue.h"
#include "com/graphhopper/routing/util/EncodedValue.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"

@implementation EncodedDoubleValue

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)shift
                         withInt:(jint)bits
                      withDouble:(jdouble)factor
                        withLong:(jlong)defaultValue
                         withInt:(jint)maxValue {
  return [self initEncodedDoubleValueWithNSString:name withInt:shift withInt:bits withDouble:factor withLong:defaultValue withInt:maxValue withBoolean:YES];
}

- (instancetype)initEncodedDoubleValueWithNSString:(NSString *)name
                                           withInt:(jint)shift
                                           withInt:(jint)bits
                                        withDouble:(jdouble)factor
                                          withLong:(jlong)defaultValue
                                           withInt:(jint)maxValue
                                       withBoolean:(jboolean)allowZero {
  return [super initWithNSString:name withInt:shift withInt:bits withDouble:factor withLong:defaultValue withInt:maxValue withBoolean:allowZero];
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)shift
                         withInt:(jint)bits
                      withDouble:(jdouble)factor
                        withLong:(jlong)defaultValue
                         withInt:(jint)maxValue
                     withBoolean:(jboolean)allowZero {
  return [self initEncodedDoubleValueWithNSString:name withInt:shift withInt:bits withDouble:factor withLong:defaultValue withInt:maxValue withBoolean:allowZero];
}

- (jlong)setValueWithLong:(jlong)flags
                 withLong:(jlong)value {
  @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Use setDoubleValue instead"] autorelease];
}

- (jlong)getValueWithLong:(jlong)flags {
  @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Use setDoubleValue instead"] autorelease];
}

- (jlong)setDefaultValueWithLong:(jlong)flags {
  return [self setDoubleValueWithLong:flags withDouble:defaultValue_];
}

- (jlong)setDoubleValueWithLong:(jlong)flags
                     withDouble:(jdouble)value {
  if (JavaLangDouble_isNaNWithDouble_(value)) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Value cannot be NaN"] autorelease];
  jlong tmpValue = JavaLangMath_roundWithDouble_(value / factor_);
  [self checkValueWithLong:JavaLangMath_roundWithDouble_(tmpValue * factor_)];
  LShiftAssignLong(&tmpValue, shift_);
  flags &= ~mask_;
  return flags | tmpValue;
}

- (jdouble)getDoubleValueWithLong:(jlong)flags {
  flags &= mask_;
  URShiftAssignLong(&flags, shift_);
  return flags * factor_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:withInt:withDouble:withLong:withInt:", "EncodedDoubleValue", NULL, 0x1, NULL },
    { "initWithNSString:withInt:withInt:withDouble:withLong:withInt:withBoolean:", "EncodedDoubleValue", NULL, 0x1, NULL },
    { "setValueWithLong:withLong:", "setValue", "J", 0x1, NULL },
    { "getValueWithLong:", "getValue", "J", 0x1, NULL },
    { "setDefaultValueWithLong:", "setDefaultValue", "J", 0x1, NULL },
    { "setDoubleValueWithLong:withDouble:", "setDoubleValue", "J", 0x1, NULL },
    { "getDoubleValueWithLong:", "getDoubleValue", "D", 0x1, NULL },
  };
  static const J2ObjcClassInfo _EncodedDoubleValue = { 1, "EncodedDoubleValue", "com.graphhopper.routing.util", NULL, 0x1, 7, methods, 0, NULL, 0, NULL};
  return &_EncodedDoubleValue;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EncodedDoubleValue)
