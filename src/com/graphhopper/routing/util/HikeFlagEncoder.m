//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/reader/ConditionalTagInspector.h"
#include "com/graphhopper/reader/ReaderWay.h"
#include "com/graphhopper/routing/util/AbstractFlagEncoder.h"
#include "com/graphhopper/routing/util/HikeFlagEncoder.h"
#include "com/graphhopper/routing/util/PriorityCode.h"
#include "com/graphhopper/routing/weighting/PriorityWeighting.h"
#include "com/graphhopper/util/PMap.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@implementation HikeFlagEncoder

- (instancetype)init {
  return [self initHikeFlagEncoderWithInt:4 withDouble:1];
}

- (instancetype)initHikeFlagEncoderWithPMap:(PMap *)properties {
  if (self = [self initHikeFlagEncoderWithInt:(jint) [((PMap *) nil_chk(properties)) getLongWithNSString:@"speedBits" withLong:4] withDouble:[properties getDoubleWithNSString:@"speedFactor" withDouble:1]]) {
    AbstractFlagEncoder_set_properties_(self, properties);
    [self setBlockFordsWithBoolean:[properties getBoolWithNSString:@"block_fords" withBoolean:YES]];
  }
  return self;
}

- (instancetype)initWithPMap:(PMap *)properties {
  return [self initHikeFlagEncoderWithPMap:properties];
}

- (instancetype)initWithNSString:(NSString *)propertiesStr {
  return [self initHikeFlagEncoderWithPMap:[[[PMap alloc] initWithNSString:propertiesStr] autorelease]];
}

- (instancetype)initHikeFlagEncoderWithInt:(jint)speedBits
                                withDouble:(jdouble)speedFactor {
  if (self = [super initWithInt:speedBits withDouble:speedFactor]) {
    [((id<JavaUtilMap>) nil_chk(hikingNetworkToCode_)) putWithId:@"iwn" withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_BEST())) getValue])];
    [hikingNetworkToCode_ putWithId:@"nwn" withId:JavaLangInteger_valueOfWithInt_([PriorityCodeEnum_get_BEST() getValue])];
    [hikingNetworkToCode_ putWithId:@"rwn" withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_VERY_NICE())) getValue])];
    [hikingNetworkToCode_ putWithId:@"lwn" withId:JavaLangInteger_valueOfWithInt_([PriorityCodeEnum_get_VERY_NICE() getValue])];
    [self init__];
  }
  return self;
}

- (instancetype)initWithInt:(jint)speedBits
                 withDouble:(jdouble)speedFactor {
  return [self initHikeFlagEncoderWithInt:speedBits withDouble:speedFactor];
}

- (jint)getVersion {
  return 1;
}

- (jlong)acceptWayWithReaderWay:(ReaderWay *)way {
  NSString *highwayValue = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway"];
  if (highwayValue == nil) {
    if ([way hasTagWithNSString:@"route" withJavaUtilSet:ferries_]) {
      NSString *footTag = [way getTagWithNSString:@"foot"];
      if (footTag == nil || [@"yes" isEqual:footTag]) return acceptBit_ | ferryBit_;
    }
    if ([way hasTagWithNSString:@"railway" withId:@"platform"]) return acceptBit_;
    return 0;
  }
  if ([way hasTagWithNSString:@"sidewalk" withJavaUtilSet:sidewalkValues_]) return acceptBit_;
  if ([way hasTagWithNSString:@"foot" withJavaUtilSet:intendedValues_]) return acceptBit_;
  if (![((id<JavaUtilSet>) nil_chk(allowedHighwayTags_)) containsWithId:highwayValue]) return 0;
  if ([way hasTagWithNSString:@"motorroad" withId:@"yes"]) return 0;
  if ([self isBlockFords] && ([way hasTagWithNSString:@"highway" withId:@"ford"] || [way hasTagWithNSString:@"ford" withNSStringArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]])) return 0;
  if ([way hasTagWithJavaUtilList:restrictions_ withJavaUtilSet:restrictedValues_] && ![((id<ConditionalTagInspector>) nil_chk([self getConditionalTagInspector])) isRestrictedWayConditionallyPermittedWithReaderWay:way]) return 0;
  if ([((id<ConditionalTagInspector>) nil_chk([self getConditionalTagInspector])) isPermittedWayConditionallyRestrictedWithReaderWay:way]) return 0;
  else return acceptBit_;
}

- (void)collectWithReaderWay:(ReaderWay *)way
         withJavaUtilTreeMap:(JavaUtilTreeMap *)weightToPrioMap {
  NSString *highway = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway"];
  if ([way hasTagWithNSString:@"foot" withId:@"designated"]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(100.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue])];
  jdouble maxSpeed = [self getMaxSpeedWithReaderWay:way];
  if ([((id<JavaUtilSet>) nil_chk(safeHighwayTags_)) containsWithId:highway] || (maxSpeed > 0 && maxSpeed <= 20)) {
    [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(40.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue])];
    if ([way hasTagWithNSString:@"tunnel" withJavaUtilSet:intendedValues_]) {
      if ([way hasTagWithNSString:@"sidewalk" withJavaUtilSet:sidewalksNoValues_]) [weightToPrioMap putWithId:JavaLangDouble_valueOfWithDouble_(40.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_REACH_DEST())) getValue])];
      else [weightToPrioMap putWithId:JavaLangDouble_valueOfWithDouble_(40.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_UNCHANGED())) getValue])];
    }
  }
  else if (maxSpeed > 50 || [((id<JavaUtilSet>) nil_chk(avoidHighwayTags_)) containsWithId:highway]) {
    if ([way hasTagWithNSString:@"sidewalk" withJavaUtilSet:sidewalksNoValues_]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(45.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_WORST())) getValue])];
    else [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(45.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_REACH_DEST())) getValue])];
  }
  if ([way hasTagWithNSString:@"bicycle" withId:@"official"] || [way hasTagWithNSString:@"bicycle" withId:@"designated"]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(44.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_AVOID_IF_POSSIBLE())) getValue])];
}

- (jboolean)supportsWithIOSClass:(IOSClass *)feature {
  if ([super supportsWithIOSClass:feature]) return YES;
  return [ComGraphhopperRoutingWeightingPriorityWeighting_class_() isAssignableFrom:feature];
}

- (NSString *)description {
  return @"hike";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "HikeFlagEncoder", NULL, 0x1, NULL },
    { "initWithPMap:", "HikeFlagEncoder", NULL, 0x1, NULL },
    { "initWithNSString:", "HikeFlagEncoder", NULL, 0x1, NULL },
    { "initWithInt:withDouble:", "HikeFlagEncoder", NULL, 0x1, NULL },
    { "getVersion", NULL, "I", 0x1, NULL },
    { "acceptWayWithReaderWay:", "acceptWay", "J", 0x1, NULL },
    { "collectWithReaderWay:withJavaUtilTreeMap:", "collect", "V", 0x0, NULL },
    { "supportsWithIOSClass:", "supports", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcClassInfo _HikeFlagEncoder = { 1, "HikeFlagEncoder", "com.graphhopper.routing.util", NULL, 0x1, 9, methods, 0, NULL, 0, NULL};
  return &_HikeFlagEncoder;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HikeFlagEncoder)
