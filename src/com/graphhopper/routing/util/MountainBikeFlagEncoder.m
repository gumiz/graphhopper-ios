//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/reader/ReaderRelation.h"
#include "com/graphhopper/reader/ReaderWay.h"
#include "com/graphhopper/routing/util/AbstractFlagEncoder.h"
#include "com/graphhopper/routing/util/BikeCommonFlagEncoder.h"
#include "com/graphhopper/routing/util/EncodedValue.h"
#include "com/graphhopper/routing/util/MountainBikeFlagEncoder.h"
#include "com/graphhopper/routing/util/PriorityCode.h"
#include "com/graphhopper/util/PMap.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@implementation MountainBikeFlagEncoder

- (instancetype)init {
  return [self initMountainBikeFlagEncoderWithInt:4 withDouble:2 withInt:0];
}

- (instancetype)initMountainBikeFlagEncoderWithPMap:(PMap *)properties {
  if (self = [self initMountainBikeFlagEncoderWithInt:(jint) [((PMap *) nil_chk(properties)) getLongWithNSString:@"speed_bits" withLong:4] withDouble:[properties getDoubleWithNSString:@"speed_factor" withDouble:2] withInt:[properties getBoolWithNSString:@"turn_costs" withBoolean:NO] ? 1 : 0]) {
    AbstractFlagEncoder_set_properties_(self, properties);
    [self setBlockFordsWithBoolean:[properties getBoolWithNSString:@"block_fords" withBoolean:YES]];
  }
  return self;
}

- (instancetype)initWithPMap:(PMap *)properties {
  return [self initMountainBikeFlagEncoderWithPMap:properties];
}

- (instancetype)initWithNSString:(NSString *)propertiesStr {
  return [self initMountainBikeFlagEncoderWithPMap:[[[PMap alloc] initWithNSString:propertiesStr] autorelease]];
}

- (instancetype)initMountainBikeFlagEncoderWithInt:(jint)speedBits
                                        withDouble:(jdouble)speedFactor
                                           withInt:(jint)maxTurnCosts {
  if (self = [super initWithInt:speedBits withDouble:speedFactor withInt:maxTurnCosts]) {
    [self setTrackTypeSpeedWithNSString:@"grade1" withInt:18];
    [self setTrackTypeSpeedWithNSString:@"grade2" withInt:16];
    [self setTrackTypeSpeedWithNSString:@"grade3" withInt:12];
    [self setTrackTypeSpeedWithNSString:@"grade4" withInt:8];
    [self setTrackTypeSpeedWithNSString:@"grade5" withInt:6];
    [self setSurfaceSpeedWithNSString:@"paved" withInt:18];
    [self setSurfaceSpeedWithNSString:@"asphalt" withInt:18];
    [self setSurfaceSpeedWithNSString:@"cobblestone" withInt:10];
    [self setSurfaceSpeedWithNSString:@"cobblestone:flattened" withInt:10];
    [self setSurfaceSpeedWithNSString:@"sett" withInt:10];
    [self setSurfaceSpeedWithNSString:@"concrete" withInt:14];
    [self setSurfaceSpeedWithNSString:@"concrete:lanes" withInt:16];
    [self setSurfaceSpeedWithNSString:@"concrete:plates" withInt:16];
    [self setSurfaceSpeedWithNSString:@"paving_stones" withInt:16];
    [self setSurfaceSpeedWithNSString:@"paving_stones:30" withInt:16];
    [self setSurfaceSpeedWithNSString:@"unpaved" withInt:14];
    [self setSurfaceSpeedWithNSString:@"compacted" withInt:14];
    [self setSurfaceSpeedWithNSString:@"dirt" withInt:14];
    [self setSurfaceSpeedWithNSString:@"earth" withInt:14];
    [self setSurfaceSpeedWithNSString:@"fine_gravel" withInt:18];
    [self setSurfaceSpeedWithNSString:@"grass" withInt:14];
    [self setSurfaceSpeedWithNSString:@"grass_paver" withInt:14];
    [self setSurfaceSpeedWithNSString:@"gravel" withInt:16];
    [self setSurfaceSpeedWithNSString:@"ground" withInt:16];
    [self setSurfaceSpeedWithNSString:@"ice" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED / 2];
    [self setSurfaceSpeedWithNSString:@"metal" withInt:10];
    [self setSurfaceSpeedWithNSString:@"mud" withInt:12];
    [self setSurfaceSpeedWithNSString:@"pebblestone" withInt:12];
    [self setSurfaceSpeedWithNSString:@"salt" withInt:12];
    [self setSurfaceSpeedWithNSString:@"sand" withInt:10];
    [self setSurfaceSpeedWithNSString:@"wood" withInt:10];
    [self setHighwaySpeedWithNSString:@"living_street" withInt:6];
    [self setHighwaySpeedWithNSString:@"steps" withInt:BikeCommonFlagEncoder_PUSHING_SECTION_SPEED];
    [self setHighwaySpeedWithNSString:@"cycleway" withInt:18];
    [self setHighwaySpeedWithNSString:@"path" withInt:18];
    [self setHighwaySpeedWithNSString:@"footway" withInt:6];
    [self setHighwaySpeedWithNSString:@"pedestrian" withInt:6];
    [self setHighwaySpeedWithNSString:@"road" withInt:12];
    [self setHighwaySpeedWithNSString:@"track" withInt:18];
    [self setHighwaySpeedWithNSString:@"service" withInt:14];
    [self setHighwaySpeedWithNSString:@"unclassified" withInt:16];
    [self setHighwaySpeedWithNSString:@"residential" withInt:16];
    [self setHighwaySpeedWithNSString:@"trunk" withInt:18];
    [self setHighwaySpeedWithNSString:@"trunk_link" withInt:18];
    [self setHighwaySpeedWithNSString:@"primary" withInt:18];
    [self setHighwaySpeedWithNSString:@"primary_link" withInt:18];
    [self setHighwaySpeedWithNSString:@"secondary" withInt:18];
    [self setHighwaySpeedWithNSString:@"secondary_link" withInt:18];
    [self setHighwaySpeedWithNSString:@"tertiary" withInt:18];
    [self setHighwaySpeedWithNSString:@"tertiary_link" withInt:18];
    [self addPushingSectionWithNSString:@"footway"];
    [self addPushingSectionWithNSString:@"pedestrian"];
    [self addPushingSectionWithNSString:@"steps"];
    [self setCyclingNetworkPreferenceWithNSString:@"icn" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"ncn" withInt:[PriorityCodeEnum_get_PREFER() getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"rcn" withInt:[PriorityCodeEnum_get_PREFER() getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"lcn" withInt:[PriorityCodeEnum_get_PREFER() getValue]];
    [self setCyclingNetworkPreferenceWithNSString:@"mtb" withInt:[((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_BEST())) getValue]];
    [((id<JavaUtilSet>) nil_chk(avoidHighwayTags_)) addWithId:@"primary"];
    [avoidHighwayTags_ addWithId:@"primary_link"];
    [avoidHighwayTags_ addWithId:@"secondary"];
    [avoidHighwayTags_ addWithId:@"secondary_link"];
    [((id<JavaUtilSet>) nil_chk(preferHighwayTags_)) addWithId:@"road"];
    [preferHighwayTags_ addWithId:@"track"];
    [preferHighwayTags_ addWithId:@"path"];
    [preferHighwayTags_ addWithId:@"service"];
    [preferHighwayTags_ addWithId:@"tertiary"];
    [preferHighwayTags_ addWithId:@"tertiary_link"];
    [preferHighwayTags_ addWithId:@"residential"];
    [preferHighwayTags_ addWithId:@"unclassified"];
    [((id<JavaUtilSet>) nil_chk(potentialBarriers_)) addWithId:@"kissing_gate"];
    [self setSpecificClassBicycleWithNSString:@"mtb"];
    [self init__];
  }
  return self;
}

- (instancetype)initWithInt:(jint)speedBits
                 withDouble:(jdouble)speedFactor
                    withInt:(jint)maxTurnCosts {
  return [self initMountainBikeFlagEncoderWithInt:speedBits withDouble:speedFactor withInt:maxTurnCosts];
}

- (jint)getVersion {
  return 1;
}

- (void)collectWithReaderWay:(ReaderWay *)way
                  withDouble:(jdouble)wayTypeSpeed
         withJavaUtilTreeMap:(JavaUtilTreeMap *)weightToPrioMap {
  [super collectWithReaderWay:way withDouble:wayTypeSpeed withJavaUtilTreeMap:weightToPrioMap];
  NSString *highway = [((ReaderWay *) nil_chk(way)) getTagWithNSString:@"highway"];
  if ([@"track" isEqual:highway]) {
    NSString *trackType = [way getTagWithNSString:@"tracktype"];
    if ([@"grade1" isEqual:trackType]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(50.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_UNCHANGED())) getValue])];
    else if (trackType == nil) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(90.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue])];
    else if ([trackType hasPrefix:@"grade"]) [((JavaUtilTreeMap *) nil_chk(weightToPrioMap)) putWithId:JavaLangDouble_valueOfWithDouble_(100.0) withId:JavaLangInteger_valueOfWithInt_([((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_VERY_NICE())) getValue])];
  }
}

- (jlong)handleRelationTagsWithReaderRelation:(ReaderRelation *)relation
                                     withLong:(jlong)oldRelationFlags {
  oldRelationFlags = [super handleRelationTagsWithReaderRelation:relation withLong:oldRelationFlags];
  jint code = 0;
  if ([((ReaderRelation *) nil_chk(relation)) hasTagWithNSString:@"route" withId:@"mtb"]) code = [((PriorityCodeEnum *) nil_chk(PriorityCodeEnum_get_PREFER())) getValue];
  jint oldCode = (jint) [((EncodedValue *) nil_chk(relationCodeEncoder_)) getValueWithLong:oldRelationFlags];
  if (oldCode < code) return [relationCodeEncoder_ setValueWithLong:0 withLong:code];
  return oldRelationFlags;
}

- (jboolean)isSacScaleAllowedWithNSString:(NSString *)sacScale {
  return [@"hiking" isEqual:sacScale] || [@"mountain_hiking" isEqual:sacScale] || [@"demanding_mountain_hiking" isEqual:sacScale] || [@"alpine_hiking" isEqual:sacScale];
}

- (NSString *)description {
  return @"mtb";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MountainBikeFlagEncoder", NULL, 0x1, NULL },
    { "initWithPMap:", "MountainBikeFlagEncoder", NULL, 0x1, NULL },
    { "initWithNSString:", "MountainBikeFlagEncoder", NULL, 0x1, NULL },
    { "initWithInt:withDouble:withInt:", "MountainBikeFlagEncoder", NULL, 0x1, NULL },
    { "getVersion", NULL, "I", 0x1, NULL },
    { "collectWithReaderWay:withDouble:withJavaUtilTreeMap:", "collect", "V", 0x0, NULL },
    { "handleRelationTagsWithReaderRelation:withLong:", "handleRelationTags", "J", 0x1, NULL },
    { "isSacScaleAllowedWithNSString:", "isSacScaleAllowed", "Z", 0x0, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcClassInfo _MountainBikeFlagEncoder = { 1, "MountainBikeFlagEncoder", "com.graphhopper.routing.util", NULL, 0x1, 9, methods, 0, NULL, 0, NULL};
  return &_MountainBikeFlagEncoder;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MountainBikeFlagEncoder)
