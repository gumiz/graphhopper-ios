//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/AbstractAlgoPreparation.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/AbstractAlgoPreparation.h"
#include "java/lang/IllegalStateException.h"

@interface AbstractAlgoPreparation () {
 @public
  jboolean prepared_;
}
@end

@implementation AbstractAlgoPreparation

- (void)doWork {
  if (prepared_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Call doWork only once!"] autorelease];
  prepared_ = YES;
}

- (jboolean)isPrepared {
  return prepared_;
}

- (instancetype)init {
  if (self = [super init]) {
    prepared_ = NO;
  }
  return self;
}

- (void)copyAllFieldsTo:(AbstractAlgoPreparation *)other {
  [super copyAllFieldsTo:other];
  other->prepared_ = prepared_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "doWork", NULL, "V", 0x1, NULL },
    { "isPrepared", NULL, "Z", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "prepared_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _AbstractAlgoPreparation = { 1, "AbstractAlgoPreparation", "com.graphhopper.routing.util", NULL, 0x401, 3, methods, 1, fields, 0, NULL};
  return &_AbstractAlgoPreparation;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AbstractAlgoPreparation)
