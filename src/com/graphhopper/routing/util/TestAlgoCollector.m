//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/PathWrapper.h"
#include "com/graphhopper/routing/AlgorithmOptions.h"
#include "com/graphhopper/routing/Path.h"
#include "com/graphhopper/routing/QueryGraph.h"
#include "com/graphhopper/routing/RoutingAlgorithm.h"
#include "com/graphhopper/routing/RoutingAlgorithmFactorySimple.h"
#include "com/graphhopper/routing/util/EdgeFilter.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/TestAlgoCollector.h"
#include "com/graphhopper/routing/weighting/TurnWeighting.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/CHGraph.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/storage/GraphExtension.h"
#include "com/graphhopper/storage/TurnCostExtension.h"
#include "com/graphhopper/storage/index/LocationIndex.h"
#include "com/graphhopper/storage/index/QueryResult.h"
#include "com/graphhopper/util/DistanceCalc.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/PathMerger.h"
#include "com/graphhopper/util/PointList.h"
#include "com/graphhopper/util/Translation.h"
#include "com/graphhopper/util/TranslationMap.h"
#include "com/graphhopper/util/shapes/GHPoint.h"
#include "com/graphhopper/util/shapes/GHPoint3D.h"
#include "java/io/PrintStream.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface TestAlgoCollector () {
 @public
  NSString *name_;
  id<DistanceCalc> distCalc_;
  TranslationMap *trMap_;
}
@end

J2OBJC_FIELD_SETTER(TestAlgoCollector, name_, NSString *)
J2OBJC_FIELD_SETTER(TestAlgoCollector, distCalc_, id<DistanceCalc>)
J2OBJC_FIELD_SETTER(TestAlgoCollector, trMap_, TranslationMap *)

@interface TestAlgoCollector_AlgoHelperEntry () {
 @public
  id<Graph> baseGraph_;
  id<LocationIndex> idx_;
  id<Graph> queryGraph_;
  AlgorithmOptions *opts_;
}
@end

J2OBJC_FIELD_SETTER(TestAlgoCollector_AlgoHelperEntry, baseGraph_, id<Graph>)
J2OBJC_FIELD_SETTER(TestAlgoCollector_AlgoHelperEntry, idx_, id<LocationIndex>)
J2OBJC_FIELD_SETTER(TestAlgoCollector_AlgoHelperEntry, queryGraph_, id<Graph>)
J2OBJC_FIELD_SETTER(TestAlgoCollector_AlgoHelperEntry, opts_, AlgorithmOptions *)

@interface TestAlgoCollector_OneRun () {
 @public
  id<JavaUtilList> assumptions_;
}
@end

J2OBJC_FIELD_SETTER(TestAlgoCollector_OneRun, assumptions_, id<JavaUtilList>)

@implementation TestAlgoCollector

- (instancetype)initWithNSString:(NSString *)name {
  if (self = [super init]) {
    TestAlgoCollector_setAndConsume_errors_(self, [[JavaUtilArrayList alloc] init]);
    TestAlgoCollector_set_distCalc_(self, Helper_get_DIST_EARTH_());
    TestAlgoCollector_set_trMap_(self, [((TranslationMap *) [[[TranslationMap alloc] init] autorelease]) doImport]);
    TestAlgoCollector_set_name_(self, name);
  }
  return self;
}

- (TestAlgoCollector *)assertDistanceWithTestAlgoCollector_AlgoHelperEntry:(TestAlgoCollector_AlgoHelperEntry *)algoEntry
                                                          withJavaUtilList:(id<JavaUtilList>)queryList
                                              withTestAlgoCollector_OneRun:(TestAlgoCollector_OneRun *)oneRun {
  id<JavaUtilList> altPaths = [[[JavaUtilArrayList alloc] init] autorelease];
  QueryGraph *queryGraph = [[[QueryGraph alloc] initWithGraph:[((TestAlgoCollector_AlgoHelperEntry *) nil_chk(algoEntry)) getQueryGraph]] autorelease];
  [queryGraph lookupWithJavaUtilList:queryList];
  AlgorithmOptions *opts = algoEntry->opts_;
  id<FlagEncoder> encoder = [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk([((AlgorithmOptions *) nil_chk(opts)) getWeighting])) getFlagEncoder];
  if ([((id<FlagEncoder>) nil_chk(encoder)) supportsWithIOSClass:ComGraphhopperRoutingWeightingTurnWeighting_class_()]) [algoEntry setAlgorithmOptionsWithAlgorithmOptions:[((AlgorithmOptions_Builder *) nil_chk([((AlgorithmOptions_Builder *) nil_chk(AlgorithmOptions_startWithAlgorithmOptions_(opts))) weightingWithComGraphhopperRoutingWeightingWeighting:[[[ComGraphhopperRoutingWeightingTurnWeighting alloc] initWithComGraphhopperRoutingWeightingWeighting:[opts getWeighting] withTurnCostExtension:(TurnCostExtension *) check_class_cast([queryGraph getExtension], [TurnCostExtension class])] autorelease]])) build]];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(queryList)) size] - 1; i++) {
    id<RoutingAlgorithm> algo = [algoEntry createAlgoWithGraph:queryGraph];
    Path *path = [((id<RoutingAlgorithm>) nil_chk(algo)) calcPathWithInt:[((QueryResult *) nil_chk([queryList getWithInt:i])) getClosestNode] withInt:[((QueryResult *) nil_chk([queryList getWithInt:i + 1])) getClosestNode]];
    [altPaths addWithId:path];
  }
  PathMerger *pathMerger = [((PathMerger *) nil_chk([((PathMerger *) nil_chk([((PathMerger *) [[[PathMerger alloc] init] autorelease]) setCalcPointsWithBoolean:YES])) setSimplifyResponseWithBoolean:NO])) setEnableInstructionsWithBoolean:YES];
  PathWrapper *rsp = [[[PathWrapper alloc] init] autorelease];
  [((PathMerger *) nil_chk(pathMerger)) doWorkWithPathWrapper:rsp withJavaUtilList:altPaths withTranslation:[((TranslationMap *) nil_chk(trMap_)) getWithFallBackWithJavaUtilLocale:JavaUtilLocale_get_US_()]];
  if ([rsp hasErrors]) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:JreStrcat("@$D$@$@$@", algoEntry, @" response contains errors. Expected distance: ", [rsp getDistance], @", expected points: ", oneRun, @". ", queryList, @", errors:", [rsp getErrors])];
    return self;
  }
  PointList *pointList = [rsp getPoints];
  jdouble tmpDist = [((PointList *) nil_chk(pointList)) calcDistanceWithDistanceCalc:distCalc_];
  if (JavaLangMath_absWithDouble_([rsp getDistance] - tmpDist) > 2) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:JreStrcat("@$D$D$I$D$@", algoEntry, @" path.getDistance was  ", [rsp getDistance], @"\t pointList.calcDistance was ", tmpDist, @"\t (expected points ", [((TestAlgoCollector_OneRun *) nil_chk(oneRun)) getLocs], @", expected distance ", [oneRun getDistance], @") ", queryList)];
  }
  if (JavaLangMath_absWithDouble_([rsp getDistance] - [((TestAlgoCollector_OneRun *) nil_chk(oneRun)) getDistance]) > 2) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:JreStrcat("@$D$D$I$I$@", algoEntry, @" returns path not matching the expected distance of ", [oneRun getDistance], @"\t Returned was ", [rsp getDistance], @"\t (expected points ", [oneRun getLocs], @", was ", [pointList getSize], @") ", queryList)];
  }
  if (JavaLangMath_absWithInt_([pointList getSize] - [oneRun getLocs]) > 1) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:JreStrcat("@$I$I$D$D$@", algoEntry, @" returns path not matching the expected points of ", [oneRun getLocs], @"\t Returned was ", [pointList getSize], @"\t (expected distance ", [oneRun getDistance], @", was ", [rsp getDistance], @") ", queryList)];
  }
  return self;
}

- (void)queryIndexWithGraph:(id<Graph>)g
          withLocationIndex:(id<LocationIndex>)idx
                 withDouble:(jdouble)lat
                 withDouble:(jdouble)lon
                 withDouble:(jdouble)expectedDist {
  QueryResult *res = [((id<LocationIndex>) nil_chk(idx)) findClosestWithDouble:lat withDouble:lon withEdgeFilter:EdgeFilter_get_ALL_EDGES_()];
  if (![((QueryResult *) nil_chk(res)) isValid]) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:JreStrcat("$DCD", @"node not found for ", lat, ',', lon)];
    return;
  }
  GHPoint *found = [res getSnappedPoint];
  jdouble dist = [((id<DistanceCalc>) nil_chk(distCalc_)) calcDistWithDouble:lat withDouble:lon withDouble:((GHPoint *) nil_chk(found))->lat_ withDouble:found->lon_];
  if (JavaLangMath_absWithDouble_(dist - expectedDist) > .1) {
    [((id<JavaUtilList>) nil_chk(errors_)) addWithId:JreStrcat("$FCF$FCF$D$D", @"queried lat,lon=", (jfloat) lat, ',', (jfloat) lon, @" (found: ", (jfloat) found->lat_, ',', (jfloat) found->lon_, @")\n   expected distance:", expectedDist, @", but was:", dist)];
  }
}

- (NSString *)description {
  NSString *str = @"";
  str = JreStrcat("$$", str, JreStrcat("$I$", @"FOUND ", [((id<JavaUtilList>) nil_chk(errors_)) size], @" ERRORS.\n"));
  for (NSString * __strong s in errors_) {
    str = JreStrcat("$$", str, JreStrcat("$$", s, @".\n"));
  }
  return str;
}

- (void)printSummary {
  if ([((id<JavaUtilList>) nil_chk(errors_)) size] > 0) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"\n-------------------------------\n"];
    [JavaLangSystem_get_out_() printlnWithNSString:[self description]];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$C", @"SUCCESS for ", name_, '!')];
  }
}

- (void)dealloc {
  RELEASE_(errors_);
  RELEASE_(name_);
  RELEASE_(distCalc_);
  RELEASE_(trMap_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(TestAlgoCollector *)other {
  [super copyAllFieldsTo:other];
  TestAlgoCollector_set_errors_(other, errors_);
  TestAlgoCollector_set_name_(other, name_);
  TestAlgoCollector_set_distCalc_(other, distCalc_);
  TestAlgoCollector_set_trMap_(other, trMap_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "TestAlgoCollector", NULL, 0x1, NULL },
    { "assertDistanceWithTestAlgoCollector_AlgoHelperEntry:withJavaUtilList:withTestAlgoCollector_OneRun:", "assertDistance", "Lcom.graphhopper.routing.util.TestAlgoCollector;", 0x1, NULL },
    { "queryIndexWithGraph:withLocationIndex:withDouble:withDouble:withDouble:", "queryIndex", "V", 0x0, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "printSummary", NULL, "V", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "errors_", NULL, 0x11, "Ljava.util.List;", NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "distCalc_", NULL, 0x12, "Lcom.graphhopper.util.DistanceCalc;", NULL,  },
    { "trMap_", NULL, 0x12, "Lcom.graphhopper.util.TranslationMap;", NULL,  },
  };
  static const J2ObjcClassInfo _TestAlgoCollector = { 1, "TestAlgoCollector", "com.graphhopper.routing.util", NULL, 0x1, 5, methods, 4, fields, 0, NULL};
  return &_TestAlgoCollector;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TestAlgoCollector)

@implementation TestAlgoCollector_AlgoHelperEntry

- (instancetype)initWithGraph:(id<Graph>)g
                    withGraph:(id<Graph>)baseGraph
         withAlgorithmOptions:(AlgorithmOptions *)opts
            withLocationIndex:(id<LocationIndex>)idx {
  if (self = [super init]) {
    TestAlgoCollector_AlgoHelperEntry_set_queryGraph_(self, g);
    TestAlgoCollector_AlgoHelperEntry_set_baseGraph_(self, baseGraph);
    TestAlgoCollector_AlgoHelperEntry_set_opts_(self, opts);
    TestAlgoCollector_AlgoHelperEntry_set_idx_(self, idx);
  }
  return self;
}

- (id<Graph>)getQueryGraph {
  return queryGraph_;
}

- (void)setQueryGraphWithGraph:(id<Graph>)queryGraph {
  TestAlgoCollector_AlgoHelperEntry_set_queryGraph_(self, queryGraph);
}

- (id<Graph>)getBaseGraph {
  return baseGraph_;
}

- (void)setAlgorithmOptionsWithAlgorithmOptions:(AlgorithmOptions *)opts {
  TestAlgoCollector_AlgoHelperEntry_set_opts_(self, opts);
}

- (id<LocationIndex>)getIdx {
  return idx_;
}

- (id<RoutingAlgorithm>)createAlgoWithGraph:(id<Graph>)qGraph {
  return [((RoutingAlgorithmFactorySimple *) [[[RoutingAlgorithmFactorySimple alloc] init] autorelease]) createAlgoWithGraph:qGraph withAlgorithmOptions:opts_];
}

- (NSString *)description {
  return JreStrcat("$$", [((AlgorithmOptions *) nil_chk(opts_)) getAlgorithm], ([CHGraph_class_() isInstance:queryGraph_] ? @"CH" : @""));
}

- (void)dealloc {
  RELEASE_(baseGraph_);
  RELEASE_(idx_);
  RELEASE_(queryGraph_);
  RELEASE_(opts_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(TestAlgoCollector_AlgoHelperEntry *)other {
  [super copyAllFieldsTo:other];
  TestAlgoCollector_AlgoHelperEntry_set_baseGraph_(other, baseGraph_);
  TestAlgoCollector_AlgoHelperEntry_set_idx_(other, idx_);
  TestAlgoCollector_AlgoHelperEntry_set_queryGraph_(other, queryGraph_);
  TestAlgoCollector_AlgoHelperEntry_set_opts_(other, opts_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraph:withGraph:withAlgorithmOptions:withLocationIndex:", "AlgoHelperEntry", NULL, 0x1, NULL },
    { "getQueryGraph", NULL, "Lcom.graphhopper.storage.Graph;", 0x1, NULL },
    { "setQueryGraphWithGraph:", "setQueryGraph", "V", 0x1, NULL },
    { "getBaseGraph", NULL, "Lcom.graphhopper.storage.Graph;", 0x1, NULL },
    { "setAlgorithmOptionsWithAlgorithmOptions:", "setAlgorithmOptions", "V", 0x1, NULL },
    { "getIdx", NULL, "Lcom.graphhopper.storage.index.LocationIndex;", 0x1, NULL },
    { "createAlgoWithGraph:", "createAlgo", "Lcom.graphhopper.routing.RoutingAlgorithm;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "baseGraph_", NULL, 0x12, "Lcom.graphhopper.storage.Graph;", NULL,  },
    { "idx_", NULL, 0x12, "Lcom.graphhopper.storage.index.LocationIndex;", NULL,  },
    { "queryGraph_", NULL, 0x2, "Lcom.graphhopper.storage.Graph;", NULL,  },
    { "opts_", NULL, 0x2, "Lcom.graphhopper.routing.AlgorithmOptions;", NULL,  },
  };
  static const J2ObjcClassInfo _TestAlgoCollector_AlgoHelperEntry = { 1, "AlgoHelperEntry", "com.graphhopper.routing.util", "TestAlgoCollector", 0x9, 8, methods, 4, fields, 0, NULL};
  return &_TestAlgoCollector_AlgoHelperEntry;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TestAlgoCollector_AlgoHelperEntry)

@implementation TestAlgoCollector_OneRun

- (instancetype)init {
  if (self = [super init]) {
    TestAlgoCollector_OneRun_setAndConsume_assumptions_(self, [[JavaUtilArrayList alloc] init]);
  }
  return self;
}

- (instancetype)initWithDouble:(jdouble)fromLat
                    withDouble:(jdouble)fromLon
                    withDouble:(jdouble)toLat
                    withDouble:(jdouble)toLon
                    withDouble:(jdouble)dist
                       withInt:(jint)locs {
  if (self = [super init]) {
    TestAlgoCollector_OneRun_setAndConsume_assumptions_(self, [[JavaUtilArrayList alloc] init]);
    [self addWithDouble:fromLat withDouble:fromLon withDouble:0 withInt:0];
    [self addWithDouble:toLat withDouble:toLon withDouble:dist withInt:locs];
  }
  return self;
}

- (TestAlgoCollector_OneRun *)addWithDouble:(jdouble)lat
                                 withDouble:(jdouble)lon
                                 withDouble:(jdouble)dist
                                    withInt:(jint)locs {
  [((id<JavaUtilList>) nil_chk(assumptions_)) addWithId:[[[TestAlgoCollector_AssumptionPerPath alloc] initWithDouble:lat withDouble:lon withDouble:dist withInt:locs] autorelease]];
  return self;
}

- (jint)getLocs {
  jint sum = 0;
  for (TestAlgoCollector_AssumptionPerPath * __strong as in nil_chk(assumptions_)) {
    sum += ((TestAlgoCollector_AssumptionPerPath *) nil_chk(as))->locs_;
  }
  return sum;
}

- (void)setLocsWithInt:(jint)index
               withInt:(jint)locs {
  ((TestAlgoCollector_AssumptionPerPath *) nil_chk([((id<JavaUtilList>) nil_chk(assumptions_)) getWithInt:index]))->locs_ = locs;
}

- (jdouble)getDistance {
  jdouble sum = 0;
  for (TestAlgoCollector_AssumptionPerPath * __strong as in nil_chk(assumptions_)) {
    sum += ((TestAlgoCollector_AssumptionPerPath *) nil_chk(as))->distance_;
  }
  return sum;
}

- (void)setDistanceWithInt:(jint)index
                withDouble:(jdouble)dist {
  ((TestAlgoCollector_AssumptionPerPath *) nil_chk([((id<JavaUtilList>) nil_chk(assumptions_)) getWithInt:index]))->distance_ = dist;
}

- (id<JavaUtilList>)getListWithLocationIndex:(id<LocationIndex>)idx
                              withEdgeFilter:(id<EdgeFilter>)edgeFilter {
  id<JavaUtilList> qr = [[[JavaUtilArrayList alloc] init] autorelease];
  for (TestAlgoCollector_AssumptionPerPath * __strong p in nil_chk(assumptions_)) {
    [qr addWithId:[((id<LocationIndex>) nil_chk(idx)) findClosestWithDouble:((TestAlgoCollector_AssumptionPerPath *) nil_chk(p))->lat_ withDouble:p->lon_ withEdgeFilter:edgeFilter]];
  }
  return qr;
}

- (NSString *)description {
  return [((id<JavaUtilList>) nil_chk(assumptions_)) description];
}

- (void)dealloc {
  RELEASE_(assumptions_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(TestAlgoCollector_OneRun *)other {
  [super copyAllFieldsTo:other];
  TestAlgoCollector_OneRun_set_assumptions_(other, assumptions_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "OneRun", NULL, 0x1, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withInt:", "OneRun", NULL, 0x1, NULL },
    { "addWithDouble:withDouble:withDouble:withInt:", "add", "Lcom.graphhopper.routing.util.TestAlgoCollector$OneRun;", 0x1, NULL },
    { "getLocs", NULL, "I", 0x1, NULL },
    { "setLocsWithInt:withInt:", "setLocs", "V", 0x1, NULL },
    { "getDistance", NULL, "D", 0x1, NULL },
    { "setDistanceWithInt:withDouble:", "setDistance", "V", 0x1, NULL },
    { "getListWithLocationIndex:withEdgeFilter:", "getList", "Ljava.util.List;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "assumptions_", NULL, 0x12, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _TestAlgoCollector_OneRun = { 1, "OneRun", "com.graphhopper.routing.util", "TestAlgoCollector", 0x9, 9, methods, 1, fields, 0, NULL};
  return &_TestAlgoCollector_OneRun;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TestAlgoCollector_OneRun)

@implementation TestAlgoCollector_AssumptionPerPath

- (instancetype)initWithDouble:(jdouble)lat
                    withDouble:(jdouble)lon
                    withDouble:(jdouble)distance
                       withInt:(jint)locs {
  if (self = [super init]) {
    self->lat_ = lat;
    self->lon_ = lon;
    self->locs_ = locs;
    self->distance_ = distance;
  }
  return self;
}

- (NSString *)description {
  return JreStrcat("D$D$I$D", lat_, @", ", lon_, @", locs:", locs_, @", dist:", distance_);
}

- (void)copyAllFieldsTo:(TestAlgoCollector_AssumptionPerPath *)other {
  [super copyAllFieldsTo:other];
  other->lat_ = lat_;
  other->lon_ = lon_;
  other->locs_ = locs_;
  other->distance_ = distance_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withInt:", "AssumptionPerPath", NULL, 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lat_", NULL, 0x0, "D", NULL,  },
    { "lon_", NULL, 0x0, "D", NULL,  },
    { "locs_", NULL, 0x0, "I", NULL,  },
    { "distance_", NULL, 0x0, "D", NULL,  },
  };
  static const J2ObjcClassInfo _TestAlgoCollector_AssumptionPerPath = { 1, "AssumptionPerPath", "com.graphhopper.routing.util", "TestAlgoCollector", 0x8, 2, methods, 4, fields, 0, NULL};
  return &_TestAlgoCollector_AssumptionPerPath;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TestAlgoCollector_AssumptionPerPath)
