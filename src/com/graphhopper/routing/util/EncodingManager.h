//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
//

#ifndef _EncodingManager_H_
#define _EncodingManager_H_

@class AbstractFlagEncoder;
@class IOSObjectArray;
@class ReaderNode;
@class ReaderRelation;
@class ReaderWay;
@protocol EdgeIteratorState;
@protocol FlagEncoder;
@protocol FlagEncoderFactory;
@protocol JavaUtilList;

#include "J2ObjC_header.h"

/**
 @brief Manager class to register encoder, assign their flag values and check objects with all encoders during parsing.
 <p>
 @author Peter Karich
 @author Nop
 */
@interface EncodingManager : NSObject {
}

/**
 @brief Instantiate manager with the given list of encoders.
 The manager knows several default encoders ignoring case. <p>
 @param flagEncodersStr comma delimited list of encoders. The order does not matter.
 */
- (instancetype)initWithNSString:(NSString *)flagEncodersStr;

- (instancetype)initWithNSString:(NSString *)flagEncodersStr
                         withInt:(jint)bytesForEdgeFlags;

- (instancetype)initWithFlagEncoderFactory:(id<FlagEncoderFactory>)factory
                              withNSString:(NSString *)flagEncodersStr
                                   withInt:(jint)bytesForEdgeFlags;

/**
 @brief Instantiate manager with the given list of encoders.
 <p>
 @param flagEncoders comma delimited list of encoders. The order does not matter.
 */
- (instancetype)initWithFlagEncoderArray:(IOSObjectArray *)flagEncoders;

/**
 @brief Instantiate manager with the given list of encoders.
 <p>
 @param flagEncoders comma delimited list of encoders. The order does not matter.
 */
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)flagEncoders;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)flagEncoders
                             withInt:(jint)bytesForEdgeFlags;

+ (id<JavaUtilList>)parseEncoderStringWithFlagEncoderFactory:(id<FlagEncoderFactory>)factory
                                                withNSString:(NSString *)encoderList;

+ (NSString *)fixWayNameWithNSString:(NSString *)str;

/**
 @brief Create the EncodingManager from the provided GraphHopper location.
 Throws an IllegalStateException if it fails. Used if no EncodingManager specified on load.
 */
+ (EncodingManager *)createWithFlagEncoderFactory:(id<FlagEncoderFactory>)factory
                                     withNSString:(NSString *)ghLoc;

- (jint)getBytesForFlags;

/**
 @return true if the specified encoder is found
 */
- (jboolean)supportsWithNSString:(NSString *)encoder;

- (id<FlagEncoder>)getEncoderWithNSString:(NSString *)name;

/**
 @brief Determine whether a way is routable for one of the added encoders.
 */
- (jlong)acceptWayWithReaderWay:(ReaderWay *)way;

- (jlong)handleRelationTagsWithReaderRelation:(ReaderRelation *)relation
                                     withLong:(jlong)oldRelationFlags;

/**
 @brief Processes way properties of different kind to determine speed and direction.
 Properties are directly encoded in 8 bytes. <p>
 @param relationFlags The preprocessed relation flags is used to influence the way properties.
 @return the encoded flags
 */
- (jlong)handleWayTagsWithReaderWay:(ReaderWay *)way
                           withLong:(jlong)includeWay
                           withLong:(jlong)relationFlags;

- (NSString *)description;

- (NSString *)toDetailsString;

- (jlong)flagsDefaultWithBoolean:(jboolean)forward
                     withBoolean:(jboolean)backward;

/**
 @brief Reverse flags, to do so all encoders are called.
 */
- (jlong)reverseFlagsWithLong:(jlong)flags;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

/**
 @brief Analyze tags on osm node.
 Store node tags (barriers etc) for later usage while parsing way.
 */
- (jlong)handleNodeTagsWithReaderNode:(ReaderNode *)node;

- (EncodingManager *)setEnableInstructionsWithBoolean:(jboolean)enableInstructions;

- (EncodingManager *)setPreferredLanguageWithNSString:(NSString *)preferredLanguage;

- (void)applyWayTagsWithReaderWay:(ReaderWay *)way
            withEdgeIteratorState:(id<EdgeIteratorState>)edge;

/**
 @brief The returned list is never empty.
 */
- (id<JavaUtilList>)fetchEdgeEncoders;

- (jboolean)needsTurnCostsSupport;

@end

J2OBJC_EMPTY_STATIC_INIT(EncodingManager)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT id<JavaUtilList> EncodingManager_parseEncoderStringWithFlagEncoderFactory_withNSString_(id<FlagEncoderFactory> factory, NSString *encoderList);

FOUNDATION_EXPORT NSString *EncodingManager_fixWayNameWithNSString_(NSString *str);

FOUNDATION_EXPORT EncodingManager *EncodingManager_createWithFlagEncoderFactory_withNSString_(id<FlagEncoderFactory> factory, NSString *ghLoc);

FOUNDATION_EXPORT NSString *EncodingManager_ERR_;
J2OBJC_STATIC_FIELD_GETTER(EncodingManager, ERR_, NSString *)

FOUNDATION_EXPORT NSString *EncodingManager_WAY_ERR_;
J2OBJC_STATIC_FIELD_GETTER(EncodingManager, WAY_ERR_, NSString *)
CF_EXTERN_C_END

typedef EncodingManager ComGraphhopperRoutingUtilEncodingManager;

J2OBJC_TYPE_LITERAL_HEADER(EncodingManager)

#endif // _EncodingManager_H_
