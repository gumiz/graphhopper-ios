//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/util/TurnCostEncoder.java
//

#ifndef _TurnCostEncoder_H_
#define _TurnCostEncoder_H_

#include "J2ObjC_header.h"

/**
 @brief Encodes and decodes a turn restriction and turn costs within a integer flag <p>
 @author Karl HÃ¼bner
 */
@protocol TurnCostEncoder < NSObject, JavaObject >

/**
 @return true, if the turn restriction is encoded in the specified flags
 */
- (jboolean)isTurnRestrictedWithLong:(jlong)flags;

/**
 @return the costs encoded in the specified flag, if restricted it will be Double.POSITIVE_INFINITY
 */
- (jdouble)getTurnCostWithLong:(jlong)flags;

/**
 @param restricted true if restricted turn, equivalent to specifying of costs Double.POSITIVE_INFINITY
 @param costs the turn costs, specify 0 or Double.POSITIVE_INFINITY if restricted == true. Only used if restricted == false.
 @return the encoded flags
 */
- (jlong)getTurnFlagsWithBoolean:(jboolean)restricted
                      withDouble:(jdouble)costs;

@end

J2OBJC_EMPTY_STATIC_INIT(TurnCostEncoder)

#define ComGraphhopperRoutingUtilTurnCostEncoder TurnCostEncoder

J2OBJC_TYPE_LITERAL_HEADER(TurnCostEncoder)

/**
 @brief No turn costs will be enabled by this encoder, should be used for pedestrians
 */
@interface TurnCostEncoder_NoTurnCostsEncoder : NSObject < TurnCostEncoder > {
}

- (jboolean)isTurnRestrictedWithLong:(jlong)flags;

- (jdouble)getTurnCostWithLong:(jlong)flags;

- (jlong)getTurnFlagsWithBoolean:(jboolean)restriction
                      withDouble:(jdouble)costs;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(TurnCostEncoder_NoTurnCostsEncoder)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(TurnCostEncoder_NoTurnCostsEncoder)

#endif // _TurnCostEncoder_H_
