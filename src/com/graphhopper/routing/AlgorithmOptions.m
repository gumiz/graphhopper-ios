//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/AlgorithmOptions.h"
#include "com/graphhopper/routing/util/TraversalMode.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/util/PMap.h"
#include "com/graphhopper/util/Parameters.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"

__attribute__((unused)) static void AlgorithmOptions_assertNotNullWithId_withNSString_(AlgorithmOptions *self, id optionValue, NSString *optionName);

@interface AlgorithmOptions () {
 @public
  PMap *hints_;
  NSString *algorithm_;
  id<ComGraphhopperRoutingWeightingWeighting> weighting_;
  TraversalModeEnum *traversalMode_;
  jint maxVisitedNodes_;
}
- (instancetype)init;

- (void)assertNotNullWithId:(id)optionValue
               withNSString:(NSString *)optionName;
@end

J2OBJC_FIELD_SETTER(AlgorithmOptions, hints_, PMap *)
J2OBJC_FIELD_SETTER(AlgorithmOptions, algorithm_, NSString *)
J2OBJC_FIELD_SETTER(AlgorithmOptions, weighting_, id<ComGraphhopperRoutingWeightingWeighting>)
J2OBJC_FIELD_SETTER(AlgorithmOptions, traversalMode_, TraversalModeEnum *)

@interface AlgorithmOptions_Builder () {
 @public
  AlgorithmOptions *opts_;
}
@end

J2OBJC_FIELD_SETTER(AlgorithmOptions_Builder, opts_, AlgorithmOptions *)

@implementation AlgorithmOptions

- (instancetype)init {
  if (self = [super init]) {
    AlgorithmOptions_setAndConsume_hints_(self, [[PMap alloc] initWithInt:5]);
    AlgorithmOptions_set_algorithm_(self, Parameters_Algorithms_get_DIJKSTRA_BI_());
    AlgorithmOptions_set_traversalMode_(self, TraversalModeEnum_get_NODE_BASED());
    maxVisitedNodes_ = JavaLangInteger_MAX_VALUE;
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting {
  if (self = [super init]) {
    AlgorithmOptions_setAndConsume_hints_(self, [[PMap alloc] initWithInt:5]);
    AlgorithmOptions_set_algorithm_(self, Parameters_Algorithms_get_DIJKSTRA_BI_());
    AlgorithmOptions_set_traversalMode_(self, TraversalModeEnum_get_NODE_BASED());
    maxVisitedNodes_ = JavaLangInteger_MAX_VALUE;
    AlgorithmOptions_set_algorithm_(self, algorithm);
    AlgorithmOptions_set_weighting_(self, weighting);
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
           withTraversalModeEnum:(TraversalModeEnum *)tMode {
  if (self = [super init]) {
    AlgorithmOptions_setAndConsume_hints_(self, [[PMap alloc] initWithInt:5]);
    AlgorithmOptions_set_algorithm_(self, Parameters_Algorithms_get_DIJKSTRA_BI_());
    AlgorithmOptions_set_traversalMode_(self, TraversalModeEnum_get_NODE_BASED());
    maxVisitedNodes_ = JavaLangInteger_MAX_VALUE;
    AlgorithmOptions_set_algorithm_(self, algorithm);
    AlgorithmOptions_set_weighting_(self, weighting);
    AlgorithmOptions_set_traversalMode_(self, tMode);
  }
  return self;
}

+ (AlgorithmOptions_Builder *)start {
  return AlgorithmOptions_start();
}

+ (AlgorithmOptions_Builder *)startWithAlgorithmOptions:(AlgorithmOptions *)opts {
  return AlgorithmOptions_startWithAlgorithmOptions_(opts);
}

- (TraversalModeEnum *)getTraversalMode {
  return traversalMode_;
}

- (jboolean)hasWeighting {
  return weighting_ != nil;
}

- (id<ComGraphhopperRoutingWeightingWeighting>)getWeighting {
  AlgorithmOptions_assertNotNullWithId_withNSString_(self, weighting_, @"weighting");
  return weighting_;
}

- (NSString *)getAlgorithm {
  AlgorithmOptions_assertNotNullWithId_withNSString_(self, algorithm_, @"algorithm");
  return algorithm_;
}

- (jint)getMaxVisitedNodes {
  return maxVisitedNodes_;
}

- (PMap *)getHints {
  return hints_;
}

- (void)assertNotNullWithId:(id)optionValue
               withNSString:(NSString *)optionName {
  AlgorithmOptions_assertNotNullWithId_withNSString_(self, optionValue, optionName);
}

- (NSString *)description {
  return JreStrcat("$$@$@", algorithm_, @", ", weighting_, @", ", traversalMode_);
}

- (void)dealloc {
  RELEASE_(hints_);
  RELEASE_(algorithm_);
  RELEASE_(weighting_);
  RELEASE_(traversalMode_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(AlgorithmOptions *)other {
  [super copyAllFieldsTo:other];
  AlgorithmOptions_set_hints_(other, hints_);
  AlgorithmOptions_set_algorithm_(other, algorithm_);
  AlgorithmOptions_set_weighting_(other, weighting_);
  AlgorithmOptions_set_traversalMode_(other, traversalMode_);
  other->maxVisitedNodes_ = maxVisitedNodes_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AlgorithmOptions", NULL, 0x2, NULL },
    { "initWithNSString:withComGraphhopperRoutingWeightingWeighting:", "AlgorithmOptions", NULL, 0x1, NULL },
    { "initWithNSString:withComGraphhopperRoutingWeightingWeighting:withTraversalModeEnum:", "AlgorithmOptions", NULL, 0x1, NULL },
    { "start", NULL, "Lcom.graphhopper.routing.AlgorithmOptions$Builder;", 0x9, NULL },
    { "startWithAlgorithmOptions:", "start", "Lcom.graphhopper.routing.AlgorithmOptions$Builder;", 0x9, NULL },
    { "getTraversalMode", NULL, "Lcom.graphhopper.routing.util.TraversalMode;", 0x1, NULL },
    { "hasWeighting", NULL, "Z", 0x1, NULL },
    { "getWeighting", NULL, "Lcom.graphhopper.routing.weighting.Weighting;", 0x1, NULL },
    { "getAlgorithm", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getMaxVisitedNodes", NULL, "I", 0x1, NULL },
    { "getHints", NULL, "Lcom.graphhopper.util.PMap;", 0x1, NULL },
    { "assertNotNullWithId:withNSString:", "assertNotNull", "V", 0x2, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hints_", NULL, 0x12, "Lcom.graphhopper.util.PMap;", NULL,  },
    { "algorithm_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "weighting_", NULL, 0x2, "Lcom.graphhopper.routing.weighting.Weighting;", NULL,  },
    { "traversalMode_", NULL, 0x2, "Lcom.graphhopper.routing.util.TraversalMode;", NULL,  },
    { "maxVisitedNodes_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _AlgorithmOptions = { 1, "AlgorithmOptions", "com.graphhopper.routing", NULL, 0x1, 13, methods, 5, fields, 0, NULL};
  return &_AlgorithmOptions;
}

@end

AlgorithmOptions_Builder *AlgorithmOptions_start() {
  AlgorithmOptions_init();
  return [[[AlgorithmOptions_Builder alloc] init] autorelease];
}

AlgorithmOptions_Builder *AlgorithmOptions_startWithAlgorithmOptions_(AlgorithmOptions *opts) {
  AlgorithmOptions_init();
  AlgorithmOptions_Builder *b = [[[AlgorithmOptions_Builder alloc] init] autorelease];
  if (((AlgorithmOptions *) nil_chk(opts))->algorithm_ != nil) [b algorithmWithNSString:[opts getAlgorithm]];
  if (opts->traversalMode_ != nil) [b traversalModeWithTraversalModeEnum:[opts getTraversalMode]];
  if (opts->weighting_ != nil) [b weightingWithComGraphhopperRoutingWeightingWeighting:[opts getWeighting]];
  if (opts->maxVisitedNodes_ >= 0) [b maxVisitedNodesWithInt:opts->maxVisitedNodes_];
  if (![((PMap *) nil_chk(opts->hints_)) isEmpty]) [b hintsWithPMap:opts->hints_];
  return b;
}

void AlgorithmOptions_assertNotNullWithId_withNSString_(AlgorithmOptions *self, id optionValue, NSString *optionName) {
  if (optionValue == nil) @throw [[[JavaLangNullPointerException alloc] initWithNSString:JreStrcat("$$$", @"Option '", optionName, @"' must NOT be null")] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AlgorithmOptions)

@implementation AlgorithmOptions_Builder

- (AlgorithmOptions_Builder *)traversalModeWithTraversalModeEnum:(TraversalModeEnum *)traversalMode {
  if (traversalMode == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"null as traversal mode is not allowed"] autorelease];
  AlgorithmOptions_set_traversalMode_(nil_chk(self->opts_), traversalMode);
  return self;
}

- (AlgorithmOptions_Builder *)weightingWithComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting {
  AlgorithmOptions_set_weighting_(nil_chk(self->opts_), weighting);
  return self;
}

- (AlgorithmOptions_Builder *)algorithmWithNSString:(NSString *)algorithm {
  AlgorithmOptions_set_algorithm_(nil_chk(self->opts_), algorithm);
  return self;
}

- (AlgorithmOptions_Builder *)maxVisitedNodesWithInt:(jint)maxVisitedNodes {
  ((AlgorithmOptions *) nil_chk(self->opts_))->maxVisitedNodes_ = maxVisitedNodes;
  return self;
}

- (AlgorithmOptions_Builder *)hintsWithPMap:(PMap *)hints {
  [((PMap *) nil_chk(((AlgorithmOptions *) nil_chk(self->opts_))->hints_)) putWithPMap:hints];
  return self;
}

- (AlgorithmOptions *)build {
  return opts_;
}

- (instancetype)init {
  if (self = [super init]) {
    AlgorithmOptions_Builder_setAndConsume_opts_(self, [[AlgorithmOptions alloc] init]);
  }
  return self;
}

- (void)dealloc {
  RELEASE_(opts_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(AlgorithmOptions_Builder *)other {
  [super copyAllFieldsTo:other];
  AlgorithmOptions_Builder_set_opts_(other, opts_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "traversalModeWithTraversalModeEnum:", "traversalMode", "Lcom.graphhopper.routing.AlgorithmOptions$Builder;", 0x1, NULL },
    { "weightingWithComGraphhopperRoutingWeightingWeighting:", "weighting", "Lcom.graphhopper.routing.AlgorithmOptions$Builder;", 0x1, NULL },
    { "algorithmWithNSString:", "algorithm", "Lcom.graphhopper.routing.AlgorithmOptions$Builder;", 0x1, NULL },
    { "maxVisitedNodesWithInt:", "maxVisitedNodes", "Lcom.graphhopper.routing.AlgorithmOptions$Builder;", 0x1, NULL },
    { "hintsWithPMap:", "hints", "Lcom.graphhopper.routing.AlgorithmOptions$Builder;", 0x1, NULL },
    { "build", NULL, "Lcom.graphhopper.routing.AlgorithmOptions;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "opts_", NULL, 0x12, "Lcom.graphhopper.routing.AlgorithmOptions;", NULL,  },
  };
  static const J2ObjcClassInfo _AlgorithmOptions_Builder = { 1, "Builder", "com.graphhopper.routing", "AlgorithmOptions", 0x9, 7, methods, 1, fields, 0, NULL};
  return &_AlgorithmOptions_Builder;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AlgorithmOptions_Builder)
