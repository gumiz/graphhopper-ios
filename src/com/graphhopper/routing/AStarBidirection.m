//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/AStar.h"
#include "com/graphhopper/routing/AStarBidirection.h"
#include "com/graphhopper/routing/AbstractRoutingAlgorithm.h"
#include "com/graphhopper/routing/Path.h"
#include "com/graphhopper/routing/PathBidirRef.h"
#include "com/graphhopper/routing/util/TraversalMode.h"
#include "com/graphhopper/routing/weighting/BeelineWeightApproximator.h"
#include "com/graphhopper/routing/weighting/ConsistentWeightApproximator.h"
#include "com/graphhopper/routing/weighting/WeightApproximator.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/storage/NodeAccess.h"
#include "com/graphhopper/storage/SPTEntry.h"
#include "com/graphhopper/util/DistancePlaneProjection.h"
#include "com/graphhopper/util/EdgeExplorer.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/GHUtility.h"
#include "com/graphhopper/util/Parameters.h"
#include "gnu/trove/map/TIntObjectMap.h"
#include "gnu/trove/map/hash/TIntObjectHashMap.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/util/PriorityQueue.h"

__attribute__((unused)) static void AStarBidirection_fillEdgesWithAStar_AStarEntry_withJavaUtilPriorityQueue_withGnuTroveMapTIntObjectMap_withEdgeExplorer_withBoolean_(AStarBidirection *self, AStar_AStarEntry *currEdge, JavaUtilPriorityQueue *prioQueueOpenSet, id<GnuTroveMapTIntObjectMap> bestWeightMap, id<EdgeExplorer> explorer, jboolean reverse);

@interface AStarBidirection () {
 @public
  ComGraphhopperRoutingWeightingConsistentWeightApproximator *weightApprox_;
  JavaUtilPriorityQueue *prioQueueOpenSetFrom_;
  JavaUtilPriorityQueue *prioQueueOpenSetTo_;
  id<GnuTroveMapTIntObjectMap> bestWeightMapOther_;
}

- (void)fillEdgesWithAStar_AStarEntry:(AStar_AStarEntry *)currEdge
            withJavaUtilPriorityQueue:(JavaUtilPriorityQueue *)prioQueueOpenSet
         withGnuTroveMapTIntObjectMap:(id<GnuTroveMapTIntObjectMap>)bestWeightMap
                     withEdgeExplorer:(id<EdgeExplorer>)explorer
                          withBoolean:(jboolean)reverse;
@end

J2OBJC_FIELD_SETTER(AStarBidirection, weightApprox_, ComGraphhopperRoutingWeightingConsistentWeightApproximator *)
J2OBJC_FIELD_SETTER(AStarBidirection, prioQueueOpenSetFrom_, JavaUtilPriorityQueue *)
J2OBJC_FIELD_SETTER(AStarBidirection, prioQueueOpenSetTo_, JavaUtilPriorityQueue *)
J2OBJC_FIELD_SETTER(AStarBidirection, bestWeightMapOther_, id<GnuTroveMapTIntObjectMap>)

@implementation AStarBidirection

- (instancetype)initWithGraph:(id<Graph>)graph
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
        withTraversalModeEnum:(TraversalModeEnum *)tMode {
  if (self = [super initWithGraph:graph withComGraphhopperRoutingWeightingWeighting:weighting withTraversalModeEnum:tMode]) {
    jint size = JavaLangMath_minWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(200, [((id<Graph>) nil_chk(graph)) getNodes] / 10), 2000);
    [self initCollectionsWithInt:size];
    ComGraphhopperRoutingWeightingBeelineWeightApproximator *defaultApprox = [[[ComGraphhopperRoutingWeightingBeelineWeightApproximator alloc] initWithNodeAccess:nodeAccess_ withComGraphhopperRoutingWeightingWeighting:weighting] autorelease];
    [defaultApprox setDistanceCalcWithDistanceCalc:[[[DistancePlaneProjection alloc] init] autorelease]];
    [self setApproximationWithComGraphhopperRoutingWeightingWeightApproximator:defaultApprox];
  }
  return self;
}

- (void)initCollectionsWithInt:(jint)size {
  AStarBidirection_setAndConsume_prioQueueOpenSetFrom_(self, [[JavaUtilPriorityQueue alloc] initWithInt:size]);
  AStarBidirection_setAndConsume_bestWeightMapFrom_(self, [[GnuTroveMapHashTIntObjectHashMap alloc] initWithInt:size]);
  AStarBidirection_setAndConsume_prioQueueOpenSetTo_(self, [[JavaUtilPriorityQueue alloc] initWithInt:size]);
  AStarBidirection_setAndConsume_bestWeightMapTo_(self, [[GnuTroveMapHashTIntObjectHashMap alloc] initWithInt:size]);
}

- (AStarBidirection *)setApproximationWithComGraphhopperRoutingWeightingWeightApproximator:(id<ComGraphhopperRoutingWeightingWeightApproximator>)approx {
  AStarBidirection_setAndConsume_weightApprox_(self, [[ComGraphhopperRoutingWeightingConsistentWeightApproximator alloc] initWithComGraphhopperRoutingWeightingWeightApproximator:approx]);
  return self;
}

- (SPTEntry *)createSPTEntryWithInt:(jint)node
                         withDouble:(jdouble)weight {
  @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"use AStarEdge constructor directly"] autorelease];
}

- (void)initFromWithInt:(jint)from
             withDouble:(jdouble)weight {
  AStarBidirection_setAndConsume_currFrom_(self, [[AStar_AStarEntry alloc] initWithInt:EdgeIterator_NO_EDGE withInt:from withDouble:weight withDouble:weight]);
  [((ComGraphhopperRoutingWeightingConsistentWeightApproximator *) nil_chk(weightApprox_)) setSourceNodeWithInt:from];
  [((JavaUtilPriorityQueue *) nil_chk(prioQueueOpenSetFrom_)) addWithId:currFrom_];
  if (currTo_ != nil) {
    currFrom_->weight_ += [weightApprox_ approximateWithInt:currFrom_->adjNode_ withBoolean:NO];
    currTo_->weight_ += [weightApprox_ approximateWithInt:currTo_->adjNode_ withBoolean:YES];
  }
  if (![((TraversalModeEnum *) nil_chk(traversalMode_)) isEdgeBased]) {
    [((id<GnuTroveMapTIntObjectMap>) nil_chk(bestWeightMapFrom_)) putWithInt:from withId:currFrom_];
    if (currTo_ != nil) {
      AStarBidirection_set_bestWeightMapOther_(self, bestWeightMapTo_);
      [self updateBestPathWithEdgeIteratorState:GHUtility_getEdgeWithGraph_withInt_withInt_(graph_, from, currTo_->adjNode_) withAStar_AStarEntry:currTo_ withInt:from];
    }
  }
  else if (currTo_ != nil && currTo_->adjNode_ == from) {
    Path_set_sptEntry_(nil_chk(bestPath_), currFrom_);
    PathBidirRef_set_edgeTo_(bestPath_, currTo_);
    finishedFrom_ = YES;
    finishedTo_ = YES;
  }
}

- (void)initToWithInt:(jint)to
           withDouble:(jdouble)weight {
  AStarBidirection_setAndConsume_currTo_(self, [[AStar_AStarEntry alloc] initWithInt:EdgeIterator_NO_EDGE withInt:to withDouble:weight withDouble:weight]);
  [((ComGraphhopperRoutingWeightingConsistentWeightApproximator *) nil_chk(weightApprox_)) setGoalNodeWithInt:to];
  [((JavaUtilPriorityQueue *) nil_chk(prioQueueOpenSetTo_)) addWithId:currTo_];
  if (currFrom_ != nil) {
    currFrom_->weight_ += [weightApprox_ approximateWithInt:currFrom_->adjNode_ withBoolean:NO];
    currTo_->weight_ += [weightApprox_ approximateWithInt:currTo_->adjNode_ withBoolean:YES];
  }
  if (![((TraversalModeEnum *) nil_chk(traversalMode_)) isEdgeBased]) {
    [((id<GnuTroveMapTIntObjectMap>) nil_chk(bestWeightMapTo_)) putWithInt:to withId:currTo_];
    if (currFrom_ != nil) {
      AStarBidirection_set_bestWeightMapOther_(self, bestWeightMapFrom_);
      [self updateBestPathWithEdgeIteratorState:GHUtility_getEdgeWithGraph_withInt_withInt_(graph_, currFrom_->adjNode_, to) withAStar_AStarEntry:currFrom_ withInt:to];
    }
  }
  else if (currFrom_ != nil && currFrom_->adjNode_ == to) {
    Path_set_sptEntry_(nil_chk(bestPath_), currFrom_);
    PathBidirRef_set_edgeTo_(bestPath_, currTo_);
    finishedFrom_ = YES;
    finishedTo_ = YES;
  }
}

- (Path *)createAndInitPath {
  AStarBidirection_setAndConsume_bestPath_(self, [[PathBidirRef alloc] initWithGraph:graph_ withComGraphhopperRoutingWeightingWeighting:weighting_]);
  return bestPath_;
}

- (Path *)extractPath {
  if ([self finished]) return [((PathBidirRef *) nil_chk(bestPath_)) extract];
  return bestPath_;
}

- (jdouble)getCurrentFromWeight {
  return ((AStar_AStarEntry *) nil_chk(currFrom_))->weight_;
}

- (jdouble)getCurrentToWeight {
  return ((AStar_AStarEntry *) nil_chk(currTo_))->weight_;
}

- (jboolean)finished {
  if (finishedFrom_ || finishedTo_) return YES;
  return ((AStar_AStarEntry *) nil_chk(currFrom_))->weight_ + ((AStar_AStarEntry *) nil_chk(currTo_))->weight_ >= [((PathBidirRef *) nil_chk(bestPath_)) getWeight];
}

- (jboolean)fillEdgesFrom {
  if ([((JavaUtilPriorityQueue *) nil_chk(prioQueueOpenSetFrom_)) isEmpty]) return NO;
  AStarBidirection_set_currFrom_(self, [prioQueueOpenSetFrom_ poll]);
  AStarBidirection_set_bestWeightMapOther_(self, bestWeightMapTo_);
  AStarBidirection_fillEdgesWithAStar_AStarEntry_withJavaUtilPriorityQueue_withGnuTroveMapTIntObjectMap_withEdgeExplorer_withBoolean_(self, currFrom_, prioQueueOpenSetFrom_, bestWeightMapFrom_, outEdgeExplorer_, NO);
  visitedCountFrom_++;
  return YES;
}

- (jboolean)fillEdgesTo {
  if ([((JavaUtilPriorityQueue *) nil_chk(prioQueueOpenSetTo_)) isEmpty]) return NO;
  AStarBidirection_set_currTo_(self, [prioQueueOpenSetTo_ poll]);
  AStarBidirection_set_bestWeightMapOther_(self, bestWeightMapFrom_);
  AStarBidirection_fillEdgesWithAStar_AStarEntry_withJavaUtilPriorityQueue_withGnuTroveMapTIntObjectMap_withEdgeExplorer_withBoolean_(self, currTo_, prioQueueOpenSetTo_, bestWeightMapTo_, inEdgeExplorer_, YES);
  visitedCountTo_++;
  return YES;
}

- (void)fillEdgesWithAStar_AStarEntry:(AStar_AStarEntry *)currEdge
            withJavaUtilPriorityQueue:(JavaUtilPriorityQueue *)prioQueueOpenSet
         withGnuTroveMapTIntObjectMap:(id<GnuTroveMapTIntObjectMap>)bestWeightMap
                     withEdgeExplorer:(id<EdgeExplorer>)explorer
                          withBoolean:(jboolean)reverse {
  AStarBidirection_fillEdgesWithAStar_AStarEntry_withJavaUtilPriorityQueue_withGnuTroveMapTIntObjectMap_withEdgeExplorer_withBoolean_(self, currEdge, prioQueueOpenSet, bestWeightMap, explorer, reverse);
}

- (void)updateBestPathWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                       withAStar_AStarEntry:(AStar_AStarEntry *)entryCurrent
                                    withInt:(jint)currLoc {
  AStar_AStarEntry *entryOther = [((id<GnuTroveMapTIntObjectMap>) nil_chk(bestWeightMapOther_)) getWithInt:currLoc];
  if (entryOther == nil) return;
  jboolean reverse = bestWeightMapFrom_ == bestWeightMapOther_;
  jdouble newWeight = ((AStar_AStarEntry *) nil_chk(entryCurrent))->weightOfVisitedPath_ + ((AStar_AStarEntry *) nil_chk(entryOther))->weightOfVisitedPath_;
  if ([((TraversalModeEnum *) nil_chk(traversalMode_)) isEdgeBased]) {
    if (entryOther->edge_ != entryCurrent->edge_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$$", @"cannot happen for edge based execution of ", [self getName])] autorelease];
    if (entryOther->adjNode_ != entryCurrent->adjNode_) {
      entryCurrent = (AStar_AStarEntry *) check_class_cast(entryCurrent->parent_, [AStar_AStarEntry class]);
      newWeight -= [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(weighting_)) calcWeightWithEdgeIteratorState:edgeState withBoolean:reverse withInt:EdgeIterator_NO_EDGE];
    }
    else if (![traversalMode_ hasUTurnSupport]) return;
  }
  if (newWeight < [((PathBidirRef *) nil_chk(bestPath_)) getWeight]) {
    [bestPath_ setSwitchToFromWithBoolean:reverse];
    Path_set_sptEntry_(bestPath_, entryCurrent);
    PathBidirRef_set_edgeTo_(bestPath_, entryOther);
    [bestPath_ setWeightWithDouble:newWeight];
  }
}

- (NSString *)getName {
  return Parameters_Algorithms_get_ASTAR_BI_();
}

- (void)dealloc {
  RELEASE_(bestWeightMapFrom_);
  RELEASE_(bestWeightMapTo_);
  RELEASE_(currFrom_);
  RELEASE_(currTo_);
  RELEASE_(bestPath_);
  RELEASE_(weightApprox_);
  RELEASE_(prioQueueOpenSetFrom_);
  RELEASE_(prioQueueOpenSetTo_);
  RELEASE_(bestWeightMapOther_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(AStarBidirection *)other {
  [super copyAllFieldsTo:other];
  AStarBidirection_set_bestWeightMapFrom_(other, bestWeightMapFrom_);
  AStarBidirection_set_bestWeightMapTo_(other, bestWeightMapTo_);
  AStarBidirection_set_currFrom_(other, currFrom_);
  AStarBidirection_set_currTo_(other, currTo_);
  AStarBidirection_set_bestPath_(other, bestPath_);
  AStarBidirection_set_weightApprox_(other, weightApprox_);
  AStarBidirection_set_prioQueueOpenSetFrom_(other, prioQueueOpenSetFrom_);
  AStarBidirection_set_prioQueueOpenSetTo_(other, prioQueueOpenSetTo_);
  AStarBidirection_set_bestWeightMapOther_(other, bestWeightMapOther_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraph:withComGraphhopperRoutingWeightingWeighting:withTraversalModeEnum:", "AStarBidirection", NULL, 0x1, NULL },
    { "initCollectionsWithInt:", "initCollections", "V", 0x4, NULL },
    { "setApproximationWithComGraphhopperRoutingWeightingWeightApproximator:", "setApproximation", "Lcom.graphhopper.routing.AStarBidirection;", 0x1, NULL },
    { "createSPTEntryWithInt:withDouble:", "createSPTEntry", "Lcom.graphhopper.storage.SPTEntry;", 0x4, NULL },
    { "initFromWithInt:withDouble:", "initFrom", "V", 0x1, NULL },
    { "initToWithInt:withDouble:", "initTo", "V", 0x1, NULL },
    { "createAndInitPath", NULL, "Lcom.graphhopper.routing.Path;", 0x4, NULL },
    { "extractPath", NULL, "Lcom.graphhopper.routing.Path;", 0x4, NULL },
    { "getCurrentFromWeight", NULL, "D", 0x4, NULL },
    { "getCurrentToWeight", NULL, "D", 0x4, NULL },
    { "finished", NULL, "Z", 0x4, NULL },
    { "fillEdgesFrom", NULL, "Z", 0x0, NULL },
    { "fillEdgesTo", NULL, "Z", 0x0, NULL },
    { "fillEdgesWithAStar_AStarEntry:withJavaUtilPriorityQueue:withGnuTroveMapTIntObjectMap:withEdgeExplorer:withBoolean:", "fillEdges", "V", 0x2, NULL },
    { "updateBestPathWithEdgeIteratorState:withAStar_AStarEntry:withInt:", "updateBestPath", "V", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bestWeightMapFrom_", NULL, 0x4, "Lgnu.trove.map.TIntObjectMap;", NULL,  },
    { "bestWeightMapTo_", NULL, 0x4, "Lgnu.trove.map.TIntObjectMap;", NULL,  },
    { "currFrom_", NULL, 0x4, "Lcom.graphhopper.routing.AStar$AStarEntry;", NULL,  },
    { "currTo_", NULL, 0x4, "Lcom.graphhopper.routing.AStar$AStarEntry;", NULL,  },
    { "bestPath_", NULL, 0x4, "Lcom.graphhopper.routing.PathBidirRef;", NULL,  },
    { "weightApprox_", NULL, 0x2, "Lcom.graphhopper.routing.weighting.ConsistentWeightApproximator;", NULL,  },
    { "prioQueueOpenSetFrom_", NULL, 0x2, "Ljava.util.PriorityQueue;", NULL,  },
    { "prioQueueOpenSetTo_", NULL, 0x2, "Ljava.util.PriorityQueue;", NULL,  },
    { "bestWeightMapOther_", NULL, 0x2, "Lgnu.trove.map.TIntObjectMap;", NULL,  },
  };
  static const J2ObjcClassInfo _AStarBidirection = { 1, "AStarBidirection", "com.graphhopper.routing", NULL, 0x1, 16, methods, 9, fields, 0, NULL};
  return &_AStarBidirection;
}

@end

void AStarBidirection_fillEdgesWithAStar_AStarEntry_withJavaUtilPriorityQueue_withGnuTroveMapTIntObjectMap_withEdgeExplorer_withBoolean_(AStarBidirection *self, AStar_AStarEntry *currEdge, JavaUtilPriorityQueue *prioQueueOpenSet, id<GnuTroveMapTIntObjectMap> bestWeightMap, id<EdgeExplorer> explorer, jboolean reverse) {
  jint currNode = ((AStar_AStarEntry *) nil_chk(currEdge))->adjNode_;
  id<EdgeIterator> iter = [((id<EdgeExplorer>) nil_chk(explorer)) setBaseNodeWithInt:currNode];
  while ([((id<EdgeIterator>) nil_chk(iter)) next]) {
    if (![self acceptWithEdgeIterator:iter withInt:currEdge->edge_]) continue;
    jint neighborNode = [iter getAdjNode];
    jint traversalId = [((TraversalModeEnum *) nil_chk(self->traversalMode_)) createTraversalIdWithEdgeIteratorState:iter withBoolean:reverse];
    jdouble alreadyVisitedWeight = [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(self->weighting_)) calcWeightWithEdgeIteratorState:iter withBoolean:reverse withInt:currEdge->edge_] + [currEdge getWeightOfVisitedPath];
    if (JavaLangDouble_isInfiniteWithDouble_(alreadyVisitedWeight)) continue;
    AStar_AStarEntry *ase = [((id<GnuTroveMapTIntObjectMap>) nil_chk(bestWeightMap)) getWithInt:traversalId];
    if (ase == nil || [ase getWeightOfVisitedPath] > alreadyVisitedWeight) {
      jdouble currWeightToGoal = [((ComGraphhopperRoutingWeightingConsistentWeightApproximator *) nil_chk(self->weightApprox_)) approximateWithInt:neighborNode withBoolean:reverse];
      jdouble estimationFullWeight = alreadyVisitedWeight + currWeightToGoal;
      if (ase == nil) {
        ase = [[[AStar_AStarEntry alloc] initWithInt:[iter getEdge] withInt:neighborNode withDouble:estimationFullWeight withDouble:alreadyVisitedWeight] autorelease];
        [bestWeightMap putWithInt:traversalId withId:ase];
      }
      else {
        NSCAssert((ase->weight_ > 0.999999 * estimationFullWeight), [JreStrcat("$C" J2OBJC_COMMA() JreStrcat("$D" J2OBJC_COMMA() JreStrcat("$$" J2OBJC_COMMA() JreStrcat("$D" J2OBJC_COMMA() JreStrcat("$$" J2OBJC_COMMA() JreStrcat("$D" J2OBJC_COMMA() JreStrcat("$$" J2OBJC_COMMA() JreStrcat("$D$D$D" J2OBJC_COMMA() @"Inconsistent distance estimate " J2OBJC_COMMA() ase->weight_ J2OBJC_COMMA() @" vs " J2OBJC_COMMA() estimationFullWeight J2OBJC_COMMA() @" (" J2OBJC_COMMA() ase->weight_ / estimationFullWeight) J2OBJC_COMMA() @") J2OBJC_COMMA() and:") J2OBJC_COMMA() [ase getWeightOfVisitedPath]) J2OBJC_COMMA() @" vs ") J2OBJC_COMMA() alreadyVisitedWeight) J2OBJC_COMMA() @" (") J2OBJC_COMMA() [ase getWeightOfVisitedPath] / alreadyVisitedWeight) J2OBJC_COMMA() ')') description]);
        [((JavaUtilPriorityQueue *) nil_chk(prioQueueOpenSet)) removeWithId:ase];
        ase->edge_ = [iter getEdge];
        ase->weight_ = estimationFullWeight;
        ase->weightOfVisitedPath_ = alreadyVisitedWeight;
      }
      SPTEntry_set_parent_(nil_chk(ase), currEdge);
      [((JavaUtilPriorityQueue *) nil_chk(prioQueueOpenSet)) addWithId:ase];
      [self updateBestPathWithEdgeIteratorState:iter withAStar_AStarEntry:ase withInt:traversalId];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AStarBidirection)
