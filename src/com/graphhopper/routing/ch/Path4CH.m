//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/ch/Path4CH.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/Path.h"
#include "com/graphhopper/routing/ch/Path4CH.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/util/CHEdgeIteratorState.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/EdgeIteratorState.h"

__attribute__((unused)) static void Path4CH_expandEdgeWithCHEdgeIteratorState_withBoolean_(Path4CH *self, id<CHEdgeIteratorState> mainEdgeState, jboolean reverse);

@interface Path4CH () {
 @public
  id<Graph> routingGraph_;
}

- (void)expandEdgeWithCHEdgeIteratorState:(id<CHEdgeIteratorState>)mainEdgeState
                              withBoolean:(jboolean)reverse;
@end

J2OBJC_FIELD_SETTER(Path4CH, routingGraph_, id<Graph>)

@implementation Path4CH

- (instancetype)initWithGraph:(id<Graph>)routingGraph
                    withGraph:(id<Graph>)baseGraph
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting {
  if (self = [super initWithGraph:baseGraph withComGraphhopperRoutingWeightingWeighting:weighting]) {
    Path4CH_set_routingGraph_(self, routingGraph);
  }
  return self;
}

- (void)processEdgeWithInt:(jint)tmpEdge
                   withInt:(jint)endNode
                   withInt:(jint)prevEdgeId {
  Path4CH_expandEdgeWithCHEdgeIteratorState_withBoolean_(self, (id<CHEdgeIteratorState>) check_protocol_cast([((id<Graph>) nil_chk(routingGraph_)) getEdgeIteratorStateWithInt:tmpEdge withInt:endNode], @protocol(CHEdgeIteratorState)), NO);
}

- (void)expandEdgeWithCHEdgeIteratorState:(id<CHEdgeIteratorState>)mainEdgeState
                              withBoolean:(jboolean)reverse {
  Path4CH_expandEdgeWithCHEdgeIteratorState_withBoolean_(self, mainEdgeState, reverse);
}

- (void)dealloc {
  RELEASE_(routingGraph_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(Path4CH *)other {
  [super copyAllFieldsTo:other];
  Path4CH_set_routingGraph_(other, routingGraph_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraph:withGraph:withComGraphhopperRoutingWeightingWeighting:", "Path4CH", NULL, 0x1, NULL },
    { "processEdgeWithInt:withInt:withInt:", "processEdge", "V", 0x14, NULL },
    { "expandEdgeWithCHEdgeIteratorState:withBoolean:", "expandEdge", "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "routingGraph_", NULL, 0x12, "Lcom.graphhopper.storage.Graph;", NULL,  },
  };
  static const J2ObjcClassInfo _Path4CH = { 1, "Path4CH", "com.graphhopper.routing.ch", NULL, 0x1, 3, methods, 1, fields, 0, NULL};
  return &_Path4CH;
}

@end

void Path4CH_expandEdgeWithCHEdgeIteratorState_withBoolean_(Path4CH *self, id<CHEdgeIteratorState> mainEdgeState, jboolean reverse) {
  if (![((id<CHEdgeIteratorState>) nil_chk(mainEdgeState)) isShortcut]) {
    self->distance_ += [mainEdgeState getDistance];
    self->time_ += [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(self->weighting_)) calcMillisWithEdgeIteratorState:mainEdgeState withBoolean:reverse withInt:EdgeIterator_NO_EDGE];
    [self addEdgeWithInt:[mainEdgeState getEdge]];
    return;
  }
  jint skippedEdge1 = [mainEdgeState getSkippedEdge1];
  jint skippedEdge2 = [mainEdgeState getSkippedEdge2];
  jint from = [mainEdgeState getBaseNode], to = [mainEdgeState getAdjNode];
  if (reverse) {
    jint tmp = from;
    from = to;
    to = tmp;
  }
  if (self->reverseOrder__) {
    id<CHEdgeIteratorState> edgeState = (id<CHEdgeIteratorState>) check_protocol_cast([((id<Graph>) nil_chk(self->routingGraph_)) getEdgeIteratorStateWithInt:skippedEdge1 withInt:to], @protocol(CHEdgeIteratorState));
    jboolean empty = edgeState == nil;
    if (empty) edgeState = (id<CHEdgeIteratorState>) check_protocol_cast([self->routingGraph_ getEdgeIteratorStateWithInt:skippedEdge2 withInt:to], @protocol(CHEdgeIteratorState));
    Path4CH_expandEdgeWithCHEdgeIteratorState_withBoolean_(self, edgeState, NO);
    if (empty) edgeState = (id<CHEdgeIteratorState>) check_protocol_cast([self->routingGraph_ getEdgeIteratorStateWithInt:skippedEdge1 withInt:from], @protocol(CHEdgeIteratorState));
    else edgeState = (id<CHEdgeIteratorState>) check_protocol_cast([self->routingGraph_ getEdgeIteratorStateWithInt:skippedEdge2 withInt:from], @protocol(CHEdgeIteratorState));
    Path4CH_expandEdgeWithCHEdgeIteratorState_withBoolean_(self, edgeState, YES);
  }
  else {
    id<CHEdgeIteratorState> iter = (id<CHEdgeIteratorState>) check_protocol_cast([((id<Graph>) nil_chk(self->routingGraph_)) getEdgeIteratorStateWithInt:skippedEdge1 withInt:from], @protocol(CHEdgeIteratorState));
    jboolean empty = iter == nil;
    if (empty) iter = (id<CHEdgeIteratorState>) check_protocol_cast([self->routingGraph_ getEdgeIteratorStateWithInt:skippedEdge2 withInt:from], @protocol(CHEdgeIteratorState));
    Path4CH_expandEdgeWithCHEdgeIteratorState_withBoolean_(self, iter, YES);
    if (empty) iter = (id<CHEdgeIteratorState>) check_protocol_cast([self->routingGraph_ getEdgeIteratorStateWithInt:skippedEdge1 withInt:to], @protocol(CHEdgeIteratorState));
    else iter = (id<CHEdgeIteratorState>) check_protocol_cast([self->routingGraph_ getEdgeIteratorStateWithInt:skippedEdge2 withInt:to], @protocol(CHEdgeIteratorState));
    Path4CH_expandEdgeWithCHEdgeIteratorState_withBoolean_(self, iter, NO);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Path4CH)
