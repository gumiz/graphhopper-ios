//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/ch/PreparationWeighting.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/ch/PreparationWeighting.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/HintsMap.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/util/CHEdgeIteratorState.h"
#include "com/graphhopper/util/EdgeIteratorState.h"

@interface PreparationWeighting () {
 @public
  id<ComGraphhopperRoutingWeightingWeighting> userWeighting_;
}
@end

J2OBJC_FIELD_SETTER(PreparationWeighting, userWeighting_, id<ComGraphhopperRoutingWeightingWeighting>)

@implementation PreparationWeighting

- (instancetype)initWithComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)userWeighting {
  if (self = [super init]) {
    PreparationWeighting_set_userWeighting_(self, userWeighting);
  }
  return self;
}

- (jdouble)getMinWeightWithDouble:(jdouble)distance {
  return [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(userWeighting_)) getMinWeightWithDouble:distance];
}

- (jdouble)calcWeightWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                               withBoolean:(jboolean)reverse
                                   withInt:(jint)prevOrNextEdgeId {
  id<CHEdgeIteratorState> tmp = (id<CHEdgeIteratorState>) check_protocol_cast(edgeState, @protocol(CHEdgeIteratorState));
  if ([((id<CHEdgeIteratorState>) nil_chk(tmp)) isShortcut]) return [tmp getWeight];
  return [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(userWeighting_)) calcWeightWithEdgeIteratorState:edgeState withBoolean:reverse withInt:prevOrNextEdgeId];
}

- (jlong)calcMillisWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                             withBoolean:(jboolean)reverse
                                 withInt:(jint)prevOrNextEdgeId {
  return [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(userWeighting_)) calcMillisWithEdgeIteratorState:edgeState withBoolean:reverse withInt:prevOrNextEdgeId];
}

- (id<FlagEncoder>)getFlagEncoder {
  return [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(userWeighting_)) getFlagEncoder];
}

- (jboolean)matchesWithHintsMap:(HintsMap *)map {
  return [((NSString *) nil_chk([self getName])) isEqual:[((HintsMap *) nil_chk(map)) getWeighting]] && [((NSString *) nil_chk([((id<FlagEncoder>) nil_chk([((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(userWeighting_)) getFlagEncoder])) description])) isEqual:[map getVehicle]];
}

- (NSString *)getName {
  return JreStrcat("$$", @"prepare|", [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(userWeighting_)) getName]);
}

- (NSString *)description {
  return [self getName];
}

- (void)dealloc {
  RELEASE_(userWeighting_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(PreparationWeighting *)other {
  [super copyAllFieldsTo:other];
  PreparationWeighting_set_userWeighting_(other, userWeighting_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComGraphhopperRoutingWeightingWeighting:", "PreparationWeighting", NULL, 0x1, NULL },
    { "getMinWeightWithDouble:", "getMinWeight", "D", 0x11, NULL },
    { "calcWeightWithEdgeIteratorState:withBoolean:withInt:", "calcWeight", "D", 0x1, NULL },
    { "calcMillisWithEdgeIteratorState:withBoolean:withInt:", "calcMillis", "J", 0x1, NULL },
    { "getFlagEncoder", NULL, "Lcom.graphhopper.routing.util.FlagEncoder;", 0x1, NULL },
    { "matchesWithHintsMap:", "matches", "Z", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "userWeighting_", NULL, 0x12, "Lcom.graphhopper.routing.weighting.Weighting;", NULL,  },
  };
  static const J2ObjcClassInfo _PreparationWeighting = { 1, "PreparationWeighting", "com.graphhopper.routing.ch", NULL, 0x1, 8, methods, 1, fields, 0, NULL};
  return &_PreparationWeighting;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PreparationWeighting)
