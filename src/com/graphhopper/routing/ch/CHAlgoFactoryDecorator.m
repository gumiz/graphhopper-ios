//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/routing/RoutingAlgorithmFactory.h"
#include "com/graphhopper/routing/ch/CHAlgoFactoryDecorator.h"
#include "com/graphhopper/routing/ch/PrepareContractionHierarchies.h"
#include "com/graphhopper/routing/util/HintsMap.h"
#include "com/graphhopper/routing/util/TraversalMode.h"
#include "com/graphhopper/routing/weighting/AbstractWeighting.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/CHGraph.h"
#include "com/graphhopper/storage/DAType.h"
#include "com/graphhopper/storage/GHDirectory.h"
#include "com/graphhopper/storage/GraphHopperStorage.h"
#include "com/graphhopper/storage/StorableProperties.h"
#include "com/graphhopper/util/CmdArgs.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/Parameters.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Thread.h"
#include "java/text/DateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

__attribute__((unused)) static jboolean CHAlgoFactoryDecorator_isEnabled(CHAlgoFactoryDecorator *self);
__attribute__((unused)) static void CHAlgoFactoryDecorator_setEnabledWithBoolean_(CHAlgoFactoryDecorator *self, jboolean enabled);
__attribute__((unused)) static jboolean CHAlgoFactoryDecorator_isDisablingAllowed(CHAlgoFactoryDecorator *self);
__attribute__((unused)) static CHAlgoFactoryDecorator *CHAlgoFactoryDecorator_setDisablingAllowedWithBoolean_(CHAlgoFactoryDecorator *self, jboolean disablingAllowed);
__attribute__((unused)) static id<JavaUtilList> CHAlgoFactoryDecorator_getWeightings(CHAlgoFactoryDecorator *self);
__attribute__((unused)) static NSString *CHAlgoFactoryDecorator_getDefaultWeighting(CHAlgoFactoryDecorator *self);

@interface CHAlgoFactoryDecorator () {
 @public
  id<OrgSlf4jLogger> logger_;
  id<JavaUtilList> preparations_;
  id<JavaUtilList> weightings_;
  id<JavaUtilList> weightingsAsStrings_;
  jboolean disablingAllowed_;
  jboolean enabled_;
  jint preparationThreads_;
  id<JavaUtilConcurrentExecutorService> chPreparePool_;
  jint preparationPeriodicUpdates_;
  jint preparationLazyUpdates_;
  jint preparationNeighborUpdates_;
  jint preparationContractedNodes_;
  jdouble preparationLogMessages_;
}

- (NSString *)getDefaultWeighting;
@end

J2OBJC_FIELD_SETTER(CHAlgoFactoryDecorator, logger_, id<OrgSlf4jLogger>)
J2OBJC_FIELD_SETTER(CHAlgoFactoryDecorator, preparations_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CHAlgoFactoryDecorator, weightings_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CHAlgoFactoryDecorator, weightingsAsStrings_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CHAlgoFactoryDecorator, chPreparePool_, id<JavaUtilConcurrentExecutorService>)

@interface CHAlgoFactoryDecorator_$1 () {
 @public
  CHAlgoFactoryDecorator *this$0_;
  NSString *val$name_;
  StorableProperties *val$properties_;
  PrepareContractionHierarchies *val$prepare_;
}
@end

J2OBJC_FIELD_SETTER(CHAlgoFactoryDecorator_$1, this$0_, CHAlgoFactoryDecorator *)
J2OBJC_FIELD_SETTER(CHAlgoFactoryDecorator_$1, val$name_, NSString *)
J2OBJC_FIELD_SETTER(CHAlgoFactoryDecorator_$1, val$properties_, StorableProperties *)
J2OBJC_FIELD_SETTER(CHAlgoFactoryDecorator_$1, val$prepare_, PrepareContractionHierarchies *)

@implementation CHAlgoFactoryDecorator

- (instancetype)init {
  if (self = [super init]) {
    CHAlgoFactoryDecorator_set_logger_(self, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_([self getClass]));
    CHAlgoFactoryDecorator_setAndConsume_preparations_(self, [[JavaUtilArrayList alloc] init]);
    CHAlgoFactoryDecorator_setAndConsume_weightings_(self, [[JavaUtilArrayList alloc] init]);
    CHAlgoFactoryDecorator_setAndConsume_weightingsAsStrings_(self, [[JavaUtilArrayList alloc] init]);
    disablingAllowed_ = NO;
    enabled_ = YES;
    preparationPeriodicUpdates_ = -1;
    preparationLazyUpdates_ = -1;
    preparationNeighborUpdates_ = -1;
    preparationContractedNodes_ = -1;
    preparationLogMessages_ = -1;
    [self setPreparationThreadsWithInt:1];
    [self setWeightingsAsStringsWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ CHAlgoFactoryDecorator_getDefaultWeighting(self) } count:1 type:NSString_class_()])];
  }
  return self;
}

- (void)init__WithCmdArgs:(CmdArgs *)args {
  [self setPreparationThreadsWithInt:[((CmdArgs *) nil_chk(args)) getIntWithNSString:@"prepare.threads" withInt:[self getPreparationThreads]]];
  NSString *deprecatedWeightingConfig = [args getWithNSString:@"prepare.chWeighting" withNSString:@""];
  if (![((NSString *) nil_chk(deprecatedWeightingConfig)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Use prepare.ch.weightings and a comma separated list instead of prepare.chWeighting"] autorelease];
  NSString *chWeightingsStr = [args getWithNSString:@"prepare.ch.weightings" withNSString:@""];
  if ([((NSString *) nil_chk(chWeightingsStr)) isEmpty]) chWeightingsStr = [args getWithNSString:@"prepare.chWeightings" withNSString:@""];
  if ([@"no" isEqual:chWeightingsStr]) {
    [((id<JavaUtilList>) nil_chk(weightingsAsStrings_)) clear];
  }
  else if (![((NSString *) nil_chk(chWeightingsStr)) isEmpty]) {
    id<JavaUtilList> tmpCHWeightingList = JavaUtilArrays_asListWithNSObjectArray_([chWeightingsStr split:@","]);
    [self setWeightingsAsStringsWithJavaUtilList:tmpCHWeightingList];
  }
  jboolean enableThis = ![((id<JavaUtilList>) nil_chk(weightingsAsStrings_)) isEmpty];
  CHAlgoFactoryDecorator_setEnabledWithBoolean_(self, enableThis);
  if (enableThis) CHAlgoFactoryDecorator_setDisablingAllowedWithBoolean_(self, [args getBoolWithNSString:Parameters_CH_get_INIT_DISABLING_ALLOWED_() withBoolean:CHAlgoFactoryDecorator_isDisablingAllowed(self)]);
  [self setPreparationPeriodicUpdatesWithInt:[args getIntWithNSString:@"prepare.updates.periodic" withInt:[self getPreparationPeriodicUpdates]]];
  [self setPreparationLazyUpdatesWithInt:[args getIntWithNSString:@"prepare.updates.lazy" withInt:[self getPreparationLazyUpdates]]];
  [self setPreparationNeighborUpdatesWithInt:[args getIntWithNSString:@"prepare.updates.neighbor" withInt:[self getPreparationNeighborUpdates]]];
  [self setPreparationContractedNodesWithInt:[args getIntWithNSString:@"prepare.contracted_nodes" withInt:[self getPreparationContractedNodes]]];
  [self setPreparationLogMessagesWithDouble:[args getDoubleWithNSString:@"prepare.log_messages" withDouble:[self getPreparationLogMessages]]];
}

- (jint)getPreparationPeriodicUpdates {
  return preparationPeriodicUpdates_;
}

- (CHAlgoFactoryDecorator *)setPreparationPeriodicUpdatesWithInt:(jint)preparePeriodicUpdates {
  self->preparationPeriodicUpdates_ = preparePeriodicUpdates;
  return self;
}

- (jint)getPreparationContractedNodes {
  return preparationContractedNodes_;
}

- (CHAlgoFactoryDecorator *)setPreparationContractedNodesWithInt:(jint)prepareContractedNodes {
  self->preparationContractedNodes_ = prepareContractedNodes;
  return self;
}

- (jint)getPreparationLazyUpdates {
  return preparationLazyUpdates_;
}

- (CHAlgoFactoryDecorator *)setPreparationLazyUpdatesWithInt:(jint)prepareLazyUpdates {
  self->preparationLazyUpdates_ = prepareLazyUpdates;
  return self;
}

- (jdouble)getPreparationLogMessages {
  return preparationLogMessages_;
}

- (CHAlgoFactoryDecorator *)setPreparationLogMessagesWithDouble:(jdouble)prepareLogMessages {
  self->preparationLogMessages_ = prepareLogMessages;
  return self;
}

- (jint)getPreparationNeighborUpdates {
  return preparationNeighborUpdates_;
}

- (CHAlgoFactoryDecorator *)setPreparationNeighborUpdatesWithInt:(jint)prepareNeighborUpdates {
  self->preparationNeighborUpdates_ = prepareNeighborUpdates;
  return self;
}

- (jboolean)isEnabled {
  return CHAlgoFactoryDecorator_isEnabled(self);
}

- (void)setEnabledWithBoolean:(jboolean)enabled {
  CHAlgoFactoryDecorator_setEnabledWithBoolean_(self, enabled);
}

- (jboolean)isDisablingAllowed {
  return CHAlgoFactoryDecorator_isDisablingAllowed(self);
}

- (CHAlgoFactoryDecorator *)setDisablingAllowedWithBoolean:(jboolean)disablingAllowed {
  return CHAlgoFactoryDecorator_setDisablingAllowedWithBoolean_(self, disablingAllowed);
}

- (CHAlgoFactoryDecorator *)addWeightingWithComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting {
  [((id<JavaUtilList>) nil_chk(weightings_)) addWithId:weighting];
  return self;
}

- (CHAlgoFactoryDecorator *)addWeightingWithNSString:(NSString *)weighting {
  [((id<JavaUtilList>) nil_chk(weightingsAsStrings_)) addWithId:weighting];
  return self;
}

- (CHAlgoFactoryDecorator *)addPreparationWithPrepareContractionHierarchies:(PrepareContractionHierarchies *)pch {
  [((id<JavaUtilList>) nil_chk(preparations_)) addWithId:pch];
  jint lastIndex = [preparations_ size] - 1;
  if (lastIndex >= [((id<JavaUtilList>) nil_chk(weightings_)) size]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@$", @"Cannot access weighting for PrepareContractionHierarchies with ", [((PrepareContractionHierarchies *) nil_chk(pch)) getWeighting], @". Call add(Weighting) before")] autorelease];
  if ([((PrepareContractionHierarchies *) nil_chk([preparations_ getWithInt:lastIndex])) getWeighting] != [weightings_ getWithInt:lastIndex]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@$@", @"Weighting of PrepareContractionHierarchies ", [((PrepareContractionHierarchies *) nil_chk([preparations_ getWithInt:lastIndex])) getWeighting], @" needs to be identical to previously added ", [weightings_ getWithInt:lastIndex])] autorelease];
  return self;
}

- (jboolean)hasWeightings {
  return ![((id<JavaUtilList>) nil_chk(weightings_)) isEmpty];
}

- (id<JavaUtilList>)getWeightings {
  return CHAlgoFactoryDecorator_getWeightings(self);
}

- (CHAlgoFactoryDecorator *)setWeightingsAsStringsWithNSStringArray:(IOSObjectArray *)weightingNames {
  return [self setWeightingsAsStringsWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_(weightingNames)];
}

- (id<JavaUtilList>)getWeightingsAsStrings {
  if ([((id<JavaUtilList>) nil_chk(self->weightingsAsStrings_)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Potential bug: chWeightingList is empty"] autorelease];
  return self->weightingsAsStrings_;
}

- (CHAlgoFactoryDecorator *)setWeightingsAsStringsWithJavaUtilList:(id<JavaUtilList>)weightingList {
  if ([((id<JavaUtilList>) nil_chk(weightingList)) isEmpty]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"It is not allowed to pass an emtpy weightingList"] autorelease];
  [((id<JavaUtilList>) nil_chk(weightingsAsStrings_)) clear];
  for (NSString * __strong strWeighting in weightingList) {
    strWeighting = [((NSString *) nil_chk(strWeighting)) lowercaseString];
    strWeighting = [((NSString *) nil_chk(strWeighting)) trim];
    [self addWeightingWithNSString:strWeighting];
  }
  return self;
}

- (NSString *)getDefaultWeighting {
  return CHAlgoFactoryDecorator_getDefaultWeighting(self);
}

- (id<JavaUtilList>)getPreparations {
  return preparations_;
}

- (id<RoutingAlgorithmFactory>)getDecoratedAlgorithmFactoryWithRoutingAlgorithmFactory:(id<RoutingAlgorithmFactory>)defaultAlgoFactory
                                                                          withHintsMap:(HintsMap *)map {
  jboolean forceFlexMode = [((HintsMap *) nil_chk(map)) getBoolWithNSString:Parameters_CH_get_DISABLE_() withBoolean:NO];
  if (!CHAlgoFactoryDecorator_isEnabled(self) || forceFlexMode) return defaultAlgoFactory;
  if ([((id<JavaUtilList>) nil_chk(preparations_)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"No preparations added to this decorator"] autorelease];
  if ([((NSString *) nil_chk([map getWeighting])) isEmpty]) [map setWeightingWithNSString:CHAlgoFactoryDecorator_getDefaultWeighting(self)];
  for (PrepareContractionHierarchies * __strong p in preparations_) {
    if ([((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk([((PrepareContractionHierarchies *) nil_chk(p)) getWeighting])) matchesWithHintsMap:map]) return p;
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@", @"Cannot find RoutingAlgorithmFactory for weighting map ", map)] autorelease];
}

- (jint)getPreparationThreads {
  return preparationThreads_;
}

- (void)setPreparationThreadsWithInt:(jint)preparationThreads {
  self->preparationThreads_ = preparationThreads;
  CHAlgoFactoryDecorator_set_chPreparePool_(self, JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(preparationThreads));
}

- (void)prepareWithStorableProperties:(StorableProperties *)properties {
  jint counter = 0;
  for (PrepareContractionHierarchies * __strong prepare in nil_chk([self getPreparations])) {
    [((id<OrgSlf4jLogger>) nil_chk(logger_)) infoWithNSString:JreStrcat("ICI$@$$C", (++counter), '/', [((id<JavaUtilList>) nil_chk([self getPreparations])) size], @" calling prepare.doWork for ", [((PrepareContractionHierarchies *) nil_chk(prepare)) getWeighting], @" ... (", Helper_getMemInfo(), ')')];
    NSString *name = ComGraphhopperRoutingWeightingAbstractWeighting_weightingToFileNameWithComGraphhopperRoutingWeightingWeighting_([prepare getWeighting]);
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(chPreparePool_)) executeWithJavaLangRunnable:[[[CHAlgoFactoryDecorator_$1 alloc] initWithCHAlgoFactoryDecorator:self withNSString:name withStorableProperties:properties withPrepareContractionHierarchies:prepare] autorelease]];
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(chPreparePool_)) shutdown];
  @try {
    if (![chPreparePool_ awaitTerminationWithLong:JavaLangInteger_MAX_VALUE withJavaUtilConcurrentTimeUnitEnum:JavaUtilConcurrentTimeUnitEnum_get_DAYS()]) [chPreparePool_ shutdownNow];
  }
  @catch (JavaLangInterruptedException *ie) {
    [chPreparePool_ shutdownNow];
    @throw [[[JavaLangRuntimeException alloc] initWithJavaLangThrowable:ie] autorelease];
  }
}

- (void)createPreparationsWithGraphHopperStorage:(GraphHopperStorage *)ghStorage
                           withTraversalModeEnum:(TraversalModeEnum *)traversalMode {
  if (!CHAlgoFactoryDecorator_isEnabled(self) || ![((id<JavaUtilList>) nil_chk(preparations_)) isEmpty]) return;
  if ([((id<JavaUtilList>) nil_chk(weightings_)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"No CH weightings found"] autorelease];
  traversalMode = [self getNodeBase];
  for (id<ComGraphhopperRoutingWeightingWeighting> __strong weighting in nil_chk(CHAlgoFactoryDecorator_getWeightings(self))) {
    PrepareContractionHierarchies *tmpPrepareCH = [[[PrepareContractionHierarchies alloc] initWithDirectory:[[[GHDirectory alloc] initWithNSString:@"" withDAType:DAType_get_RAM_INT_()] autorelease] withGraphHopperStorage:ghStorage withCHGraph:[((GraphHopperStorage *) nil_chk(ghStorage)) getGraphWithIOSClass:CHGraph_class_() withComGraphhopperRoutingWeightingWeighting:weighting] withComGraphhopperRoutingWeightingWeighting:weighting withTraversalModeEnum:traversalMode] autorelease];
    [((PrepareContractionHierarchies *) nil_chk([((PrepareContractionHierarchies *) nil_chk([((PrepareContractionHierarchies *) nil_chk([tmpPrepareCH setPeriodicUpdatesWithInt:preparationPeriodicUpdates_])) setLazyUpdatesWithInt:preparationLazyUpdates_])) setNeighborUpdatesWithInt:preparationNeighborUpdates_])) setLogMessagesWithDouble:preparationLogMessages_];
    [self addPreparationWithPrepareContractionHierarchies:tmpPrepareCH];
  }
}

- (TraversalModeEnum *)getNodeBase {
  return TraversalModeEnum_get_NODE_BASED();
}

- (void)dealloc {
  RELEASE_(logger_);
  RELEASE_(preparations_);
  RELEASE_(weightings_);
  RELEASE_(weightingsAsStrings_);
  RELEASE_(chPreparePool_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(CHAlgoFactoryDecorator *)other {
  [super copyAllFieldsTo:other];
  CHAlgoFactoryDecorator_set_logger_(other, logger_);
  CHAlgoFactoryDecorator_set_preparations_(other, preparations_);
  CHAlgoFactoryDecorator_set_weightings_(other, weightings_);
  CHAlgoFactoryDecorator_set_weightingsAsStrings_(other, weightingsAsStrings_);
  other->disablingAllowed_ = disablingAllowed_;
  other->enabled_ = enabled_;
  other->preparationThreads_ = preparationThreads_;
  CHAlgoFactoryDecorator_set_chPreparePool_(other, chPreparePool_);
  other->preparationPeriodicUpdates_ = preparationPeriodicUpdates_;
  other->preparationLazyUpdates_ = preparationLazyUpdates_;
  other->preparationNeighborUpdates_ = preparationNeighborUpdates_;
  other->preparationContractedNodes_ = preparationContractedNodes_;
  other->preparationLogMessages_ = preparationLogMessages_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CHAlgoFactoryDecorator", NULL, 0x1, NULL },
    { "init__WithCmdArgs:", "init", "V", 0x1, NULL },
    { "getPreparationPeriodicUpdates", NULL, "I", 0x1, NULL },
    { "setPreparationPeriodicUpdatesWithInt:", "setPreparationPeriodicUpdates", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x1, NULL },
    { "getPreparationContractedNodes", NULL, "I", 0x1, NULL },
    { "setPreparationContractedNodesWithInt:", "setPreparationContractedNodes", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x1, NULL },
    { "getPreparationLazyUpdates", NULL, "I", 0x1, NULL },
    { "setPreparationLazyUpdatesWithInt:", "setPreparationLazyUpdates", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x1, NULL },
    { "getPreparationLogMessages", NULL, "D", 0x1, NULL },
    { "setPreparationLogMessagesWithDouble:", "setPreparationLogMessages", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x1, NULL },
    { "getPreparationNeighborUpdates", NULL, "I", 0x1, NULL },
    { "setPreparationNeighborUpdatesWithInt:", "setPreparationNeighborUpdates", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x1, NULL },
    { "isEnabled", NULL, "Z", 0x11, NULL },
    { "setEnabledWithBoolean:", "setEnabled", "V", 0x11, NULL },
    { "isDisablingAllowed", NULL, "Z", 0x11, NULL },
    { "setDisablingAllowedWithBoolean:", "setDisablingAllowed", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x11, NULL },
    { "addWeightingWithComGraphhopperRoutingWeightingWeighting:", "addWeighting", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x1, NULL },
    { "addWeightingWithNSString:", "addWeighting", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x1, NULL },
    { "addPreparationWithPrepareContractionHierarchies:", "addPreparation", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x1, NULL },
    { "hasWeightings", NULL, "Z", 0x11, NULL },
    { "getWeightings", NULL, "Ljava.util.List;", 0x11, NULL },
    { "setWeightingsAsStringsWithNSStringArray:", "setWeightingsAsStrings", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x81, NULL },
    { "getWeightingsAsStrings", NULL, "Ljava.util.List;", 0x1, NULL },
    { "setWeightingsAsStringsWithJavaUtilList:", "setWeightingsAsStrings", "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", 0x1, NULL },
    { "getDefaultWeighting", NULL, "Ljava.lang.String;", 0x2, NULL },
    { "getPreparations", NULL, "Ljava.util.List;", 0x1, NULL },
    { "getDecoratedAlgorithmFactoryWithRoutingAlgorithmFactory:withHintsMap:", "getDecoratedAlgorithmFactory", "Lcom.graphhopper.routing.RoutingAlgorithmFactory;", 0x1, NULL },
    { "getPreparationThreads", NULL, "I", 0x1, NULL },
    { "setPreparationThreadsWithInt:", "setPreparationThreads", "V", 0x1, NULL },
    { "prepareWithStorableProperties:", "prepare", "V", 0x1, NULL },
    { "createPreparationsWithGraphHopperStorage:withTraversalModeEnum:", "createPreparations", "V", 0x1, NULL },
    { "getNodeBase", NULL, "Lcom.graphhopper.routing.util.TraversalMode;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger_", NULL, 0x12, "Lorg.slf4j.Logger;", NULL,  },
    { "preparations_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "weightings_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "weightingsAsStrings_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "disablingAllowed_", NULL, 0x2, "Z", NULL,  },
    { "enabled_", NULL, 0x2, "Z", NULL,  },
    { "preparationThreads_", NULL, 0x2, "I", NULL,  },
    { "chPreparePool_", NULL, 0x2, "Ljava.util.concurrent.ExecutorService;", NULL,  },
    { "preparationPeriodicUpdates_", NULL, 0x2, "I", NULL,  },
    { "preparationLazyUpdates_", NULL, 0x2, "I", NULL,  },
    { "preparationNeighborUpdates_", NULL, 0x2, "I", NULL,  },
    { "preparationContractedNodes_", NULL, 0x2, "I", NULL,  },
    { "preparationLogMessages_", NULL, 0x2, "D", NULL,  },
  };
  static const J2ObjcClassInfo _CHAlgoFactoryDecorator = { 1, "CHAlgoFactoryDecorator", "com.graphhopper.routing.ch", NULL, 0x1, 32, methods, 13, fields, 0, NULL};
  return &_CHAlgoFactoryDecorator;
}

@end

jboolean CHAlgoFactoryDecorator_isEnabled(CHAlgoFactoryDecorator *self) {
  return self->enabled_;
}

void CHAlgoFactoryDecorator_setEnabledWithBoolean_(CHAlgoFactoryDecorator *self, jboolean enabled) {
  self->enabled_ = enabled;
}

jboolean CHAlgoFactoryDecorator_isDisablingAllowed(CHAlgoFactoryDecorator *self) {
  return self->disablingAllowed_ || !CHAlgoFactoryDecorator_isEnabled(self);
}

CHAlgoFactoryDecorator *CHAlgoFactoryDecorator_setDisablingAllowedWithBoolean_(CHAlgoFactoryDecorator *self, jboolean disablingAllowed) {
  self->disablingAllowed_ = disablingAllowed;
  return self;
}

id<JavaUtilList> CHAlgoFactoryDecorator_getWeightings(CHAlgoFactoryDecorator *self) {
  return self->weightings_;
}

NSString *CHAlgoFactoryDecorator_getDefaultWeighting(CHAlgoFactoryDecorator *self) {
  return [((id<JavaUtilList>) nil_chk(self->weightingsAsStrings_)) isEmpty] ? @"fastest" : [self->weightingsAsStrings_ getWithInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CHAlgoFactoryDecorator)

@implementation CHAlgoFactoryDecorator_$1

- (void)run {
  NSString *errorKey = JreStrcat("$$", @"prepare.error.", val$name_);
  @try {
    [((StorableProperties *) nil_chk(val$properties_)) putWithNSString:errorKey withNSString:@"CH preparation incomplete"];
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) setNameWithNSString:val$name_];
    [((PrepareContractionHierarchies *) nil_chk(val$prepare_)) doWork];
    [val$properties_ removeWithNSString:errorKey];
    [val$properties_ putWithNSString:JreStrcat("$$", @"prepare.date.", val$name_) withNSString:[((JavaTextDateFormat *) nil_chk(Helper_createFormatter())) formatWithJavaUtilDate:[[[JavaUtilDate alloc] init] autorelease]]];
  }
  @catch (JavaLangException *ex) {
    [((id<OrgSlf4jLogger>) nil_chk(this$0_->logger_)) errorWithNSString:JreStrcat("$$", @"Problem while CH preparation ", val$name_) withJavaLangThrowable:ex];
    [((StorableProperties *) nil_chk(val$properties_)) putWithNSString:errorKey withNSString:[((JavaLangException *) nil_chk(ex)) getMessage]];
  }
}

- (instancetype)initWithCHAlgoFactoryDecorator:(CHAlgoFactoryDecorator *)outer$
                                  withNSString:(NSString *)capture$0
                        withStorableProperties:(StorableProperties *)capture$1
             withPrepareContractionHierarchies:(PrepareContractionHierarchies *)capture$2 {
  CHAlgoFactoryDecorator_$1_set_this$0_(self, outer$);
  CHAlgoFactoryDecorator_$1_set_val$name_(self, capture$0);
  CHAlgoFactoryDecorator_$1_set_val$properties_(self, capture$1);
  CHAlgoFactoryDecorator_$1_set_val$prepare_(self, capture$2);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$name_);
  RELEASE_(val$properties_);
  RELEASE_(val$prepare_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(CHAlgoFactoryDecorator_$1 *)other {
  [super copyAllFieldsTo:other];
  CHAlgoFactoryDecorator_$1_set_this$0_(other, this$0_);
  CHAlgoFactoryDecorator_$1_set_val$name_(other, val$name_);
  CHAlgoFactoryDecorator_$1_set_val$properties_(other, val$properties_);
  CHAlgoFactoryDecorator_$1_set_val$prepare_(other, val$prepare_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "V", 0x1, NULL },
    { "initWithCHAlgoFactoryDecorator:withNSString:withStorableProperties:withPrepareContractionHierarchies:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.graphhopper.routing.ch.CHAlgoFactoryDecorator;", NULL,  },
    { "val$name_", NULL, 0x1012, "Ljava.lang.String;", NULL,  },
    { "val$properties_", NULL, 0x1012, "Lcom.graphhopper.storage.StorableProperties;", NULL,  },
    { "val$prepare_", NULL, 0x1012, "Lcom.graphhopper.routing.ch.PrepareContractionHierarchies;", NULL,  },
  };
  static const J2ObjcClassInfo _CHAlgoFactoryDecorator_$1 = { 1, "$1", "com.graphhopper.routing.ch", "CHAlgoFactoryDecorator", 0x8000, 2, methods, 4, fields, 0, NULL};
  return &_CHAlgoFactoryDecorator_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CHAlgoFactoryDecorator_$1)
