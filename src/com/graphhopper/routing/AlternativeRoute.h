//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
//

#ifndef _AlternativeRoute_H_
#define _AlternativeRoute_H_

@class GnuTroveMapHashTIntObjectHashMap;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class Path;
@class SPTEntry;
@class TraversalModeEnum;
@protocol ComGraphhopperRoutingWeightingWeighting;
@protocol FlagEncoder;
@protocol GnuTroveMapTIntObjectMap;
@protocol GnuTroveSetTIntSet;
@protocol Graph;
@protocol JavaUtilList;

#include "J2ObjC_header.h"
#include "com/graphhopper/routing/AStarBidirection.h"
#include "com/graphhopper/routing/RoutingAlgorithm.h"
#include "gnu/trove/procedure/TIntObjectProcedure.h"
#include "gnu/trove/procedure/TObjectProcedure.h"
#include "java/util/Comparator.h"

/**
 @brief This class implements the alternative paths search using the "plateau" and partially the "penalty" method discribed in the following papers.
 <p> <ul> <li>Choice Routing Explanation - Camvit 2009: http://www.camvit.com/camvit-technical-english/Camvit-Choice-Routing-Explanation-english.pdf</li> <li>and refined in: Alternative Routes in Road Networks 2010: http://www.cs.princeton.edu/~rwerneck/papers/ADGW10-alternatives-sea.pdf</li> <li>other ideas 'Improved Alternative Route Planning', 2013: https://hal.inria.fr/hal-00871739/document</li> <li>via point 'storage' idea 'Candidate Sets for Alternative Routes in Road Networks', 2013: https://algo2.iti.kit.edu/download/s-csarrn-12.pdf</li> <li>Alternative route graph construction 2011: http://algo2.iti.kit.edu/download/altgraph_tapas_extended.pdf </li> </ul>
 @author Peter Karich
 */
@interface AlternativeRoute : NSObject < RoutingAlgorithm > {
}

- (instancetype)initWithGraph:(id<Graph>)graph
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
        withTraversalModeEnum:(TraversalModeEnum *)traversalMode;

+ (id<JavaUtilList>)getAltNamesWithGraph:(id<Graph>)graph
                            withSPTEntry:(SPTEntry *)ee;

+ (jdouble)calcSortByWithDouble:(jdouble)weightInfluence
                     withDouble:(jdouble)weight
                     withDouble:(jdouble)shareInfluence
                     withDouble:(jdouble)shareWeight
                     withDouble:(jdouble)plateauInfluence
                     withDouble:(jdouble)plateauWeight;

- (void)setMaxVisitedNodesWithInt:(jint)numberOfNodes;

/**
 @brief Increasing this factor results in returning more alternatives.
 E.g. if the factor is 2 than all alternatives with a weight 2 times longer than the optimal weight are return. (default is 1)
 */
- (void)setMaxWeightFactorWithDouble:(jdouble)maxWeightFactor;

/**
 @brief This parameter is used to avoid alternatives too similar to the best path.
 Specify 0.5 to force a same paths of maximum 50%. The unit is the 'weight' returned in the Weighting.
 */
- (void)setMaxShareFactorWithDouble:(jdouble)maxShareFactor;

/**
 @brief This method sets the minimum plateau portion of every alternative path that is required.
 */
- (void)setMinPlateauFactorWithDouble:(jdouble)minPlateauFactor;

/**
 @brief This method sets the graph exploration percentage for alternative paths.
 Default is 1 (100%). Specify a higher value to get more alternatives (especially if maxWeightFactor is higher than 1.5) and a lower value to improve query time but reduces the possibility to find alternatives.
 */
- (void)setMaxExplorationFactorWithDouble:(jdouble)explorationFactor;

/**
 @brief Specifies how many paths (including the optimal) are returned.
 (default is 2)
 */
- (void)setMaxPathsWithInt:(jint)maxPaths;

/**
 @brief This method calculates best paths (alternatives) between 'from' and 'to', where maxPaths-1 alternatives are searched and they are only accepted if they are not too similar but close to the best path.
 */
- (id<JavaUtilList>)calcAlternativesWithInt:(jint)from
                                    withInt:(jint)to;

- (Path *)calcPathWithInt:(jint)from
                  withInt:(jint)to;

- (id<JavaUtilList>)calcPathsWithInt:(jint)from
                             withInt:(jint)to;

- (NSString *)getName;

- (jint)getVisitedNodes;

@end

FOUNDATION_EXPORT BOOL AlternativeRoute_initialized;
J2OBJC_STATIC_INIT(AlternativeRoute)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT id<JavaUtilList> AlternativeRoute_getAltNamesWithGraph_withSPTEntry_(id<Graph> graph, SPTEntry *ee);

FOUNDATION_EXPORT jdouble AlternativeRoute_calcSortByWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble weightInfluence, jdouble weight, jdouble shareInfluence, jdouble shareWeight, jdouble plateauInfluence, jdouble plateauWeight);

FOUNDATION_EXPORT id<JavaUtilComparator> AlternativeRoute_ALT_COMPARATOR_;
J2OBJC_STATIC_FIELD_GETTER(AlternativeRoute, ALT_COMPARATOR_, id<JavaUtilComparator>)
CF_EXTERN_C_END

typedef AlternativeRoute ComGraphhopperRoutingAlternativeRoute;

J2OBJC_TYPE_LITERAL_HEADER(AlternativeRoute)

@interface AlternativeRoute_AlternativeInfo : NSObject {
}

- (instancetype)initWithDouble:(jdouble)sortBy
                      withPath:(Path *)path
                  withSPTEntry:(SPTEntry *)shareStart
                  withSPTEntry:(SPTEntry *)shareEnd
                    withDouble:(jdouble)shareWeight
              withJavaUtilList:(id<JavaUtilList>)altNames;

- (Path *)getPath;

- (SPTEntry *)getShareStart;

- (SPTEntry *)getShareEnd;

- (jdouble)getShareWeight;

- (jdouble)getSortBy;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(AlternativeRoute_AlternativeInfo)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(AlternativeRoute_AlternativeInfo)

/**
 @brief Helper class to find alternatives and alternatives for round trip.
 */
@interface AlternativeRoute_AlternativeBidirSearch : AStarBidirection {
}

- (instancetype)initWithGraph:(id<Graph>)graph
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
        withTraversalModeEnum:(TraversalModeEnum *)tMode
                   withDouble:(jdouble)explorationFactor;

- (id<GnuTroveMapTIntObjectMap>)getBestWeightMapFrom;

- (id<GnuTroveMapTIntObjectMap>)getBestWeightMapTo;

- (jboolean)finished;

- (Path *)searchBestWithInt:(jint)to
                    withInt:(jint)from;

/**
 @return the information necessary to handle alternative paths. Note that the paths are not yet extracted.
 */
- (id<JavaUtilList>)calcAlternativesWithInt:(jint)maxPaths
                                 withDouble:(jdouble)maxWeightFactor
                                 withDouble:(jdouble)weightInfluence
                                 withDouble:(jdouble)maxShareFactor
                                 withDouble:(jdouble)shareInfluence
                                 withDouble:(jdouble)minPlateauFactor
                                 withDouble:(jdouble)plateauInfluence;

/**
 @brief This method adds the traversal IDs of the specified path as set to the specified map.
 */
- (JavaUtilConcurrentAtomicAtomicInteger *)addToMapWithGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)map
                                                                               withPath:(Path *)path;

@end

J2OBJC_EMPTY_STATIC_INIT(AlternativeRoute_AlternativeBidirSearch)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(AlternativeRoute_AlternativeBidirSearch)

@interface AlternativeRoute_AlternativeBidirSearch_$1 : NSObject < GnuTroveProcedureTIntObjectProcedure > {
}

- (jboolean)executeWithInt:(jint)traversalId
                    withId:(SPTEntry *)fromSPTEntry;

/**
 @brief Extract path until we stumble over an existing traversal id
 */
- (SPTEntry *)getFirstShareEEWithSPTEntry:(SPTEntry *)startEE
                              withBoolean:(jboolean)reverse;

/**
 @brief This method returns true if the specified tid is already existent in the traversalIDMap
 */
- (jboolean)isAlreadyExistingWithInt:(jint)tid;

/**
 @brief Return the current worst weight for all alternatives
 */
- (jdouble)getWorstSortBy;

- (jboolean)isBestPathWithSPTEntry:(SPTEntry *)fromSPTEntry
                          withPath:(Path *)bestPath;

- (instancetype)initWithAlternativeRoute_AlternativeBidirSearch:(AlternativeRoute_AlternativeBidirSearch *)outer$
                                                     withDouble:(jdouble)capture$0
                                                     withDouble:(jdouble)capture$1
                                                     withDouble:(jdouble)capture$2
                                                     withDouble:(jdouble)capture$3
                                                     withDouble:(jdouble)capture$4
                                                     withDouble:(jdouble)capture$5
                                               withJavaUtilList:(id<JavaUtilList>)capture$6
                                                        withInt:(jint)capture$7
                           withAlternativeRoute_AlternativeInfo:(AlternativeRoute_AlternativeInfo *)capture$8
                           withGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)capture$9
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$10
                                               withJavaUtilList:(id<JavaUtilList>)capture$11;

@end

J2OBJC_EMPTY_STATIC_INIT(AlternativeRoute_AlternativeBidirSearch_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(AlternativeRoute_AlternativeBidirSearch_$1)

@interface AlternativeRoute_AlternativeBidirSearch_$1_$1 : NSObject < GnuTroveProcedureTObjectProcedure > {
}

- (jboolean)executeWithId:(id<GnuTroveSetTIntSet>)set;

- (instancetype)initWithInt:(jint)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(AlternativeRoute_AlternativeBidirSearch_$1_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(AlternativeRoute_AlternativeBidirSearch_$1_$1)

@interface AlternativeRoute_PlateauInfo : NSObject {
 @public
  NSString *name_;
  id<JavaUtilList> edges_;
}

- (instancetype)initWithNSString:(NSString *)name
                withJavaUtilList:(id<JavaUtilList>)edges;

- (NSString *)description;

- (id<JavaUtilList>)getEdges;

- (NSString *)getName;

@end

J2OBJC_EMPTY_STATIC_INIT(AlternativeRoute_PlateauInfo)

J2OBJC_FIELD_SETTER(AlternativeRoute_PlateauInfo, name_, NSString *)
J2OBJC_FIELD_SETTER(AlternativeRoute_PlateauInfo, edges_, id<JavaUtilList>)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(AlternativeRoute_PlateauInfo)

@interface AlternativeRoute_$1 : NSObject < JavaUtilComparator > {
}

- (jint)compareWithId:(AlternativeRoute_AlternativeInfo *)o1
               withId:(AlternativeRoute_AlternativeInfo *)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(AlternativeRoute_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(AlternativeRoute_$1)

#endif // _AlternativeRoute_H_
