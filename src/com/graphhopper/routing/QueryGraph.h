//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/QueryGraph.java
//

#ifndef _QueryGraph_H_
#define _QueryGraph_H_

@class AngleCalc;
@class BBox;
@class GHPoint3D;
@class JavaLangUnsupportedOperationException;
@class PointList;
@class QueryGraph;
@class QueryResult;
@protocol AllEdgesIterator;
@protocol EdgeFilter;
@protocol EdgeIterator;
@protocol EdgeIteratorState;
@protocol GnuTroveMapTIntObjectMap;
@protocol GraphExtension;
@protocol JavaUtilList;
@protocol JavaUtilMap;

#include "J2ObjC_header.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/storage/NodeAccess.h"
#include "com/graphhopper/storage/TurnCostExtension.h"
#include "com/graphhopper/util/EdgeExplorer.h"
#include "gnu/trove/procedure/TIntProcedure.h"
#include "gnu/trove/procedure/TObjectProcedure.h"
#include "java/util/Comparator.h"

@interface QueryGraph_QueryGraphTurnExt : TurnCostExtension {
}

- (instancetype)initWithQueryGraph:(QueryGraph *)outer$;

- (jlong)getTurnCostFlagsWithInt:(jint)edgeFrom
                         withInt:(jint)nodeVia
                         withInt:(jint)edgeTo;

@end

J2OBJC_EMPTY_STATIC_INIT(QueryGraph_QueryGraphTurnExt)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(QueryGraph_QueryGraphTurnExt)

@interface QueryGraph_$1 : NSObject < NodeAccess > {
}

- (void)ensureNodeWithInt:(jint)nodeId;

- (jboolean)is3D;

- (jint)getDimension;

- (jdouble)getLatitudeWithInt:(jint)nodeId;

- (jdouble)getLongitudeWithInt:(jint)nodeId;

- (jdouble)getElevationWithInt:(jint)nodeId;

- (jint)getAdditionalNodeFieldWithInt:(jint)nodeId;

- (void)setNodeWithInt:(jint)nodeId
            withDouble:(jdouble)lat
            withDouble:(jdouble)lon;

- (void)setNodeWithInt:(jint)nodeId
            withDouble:(jdouble)lat
            withDouble:(jdouble)lon
            withDouble:(jdouble)ele;

- (void)setAdditionalNodeFieldWithInt:(jint)nodeId
                              withInt:(jint)additionalValue;

- (jdouble)getLatWithInt:(jint)nodeId;

- (jdouble)getLonWithInt:(jint)nodeId;

- (jdouble)getEleWithInt:(jint)nodeId;

- (instancetype)initWithQueryGraph:(QueryGraph *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(QueryGraph_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(QueryGraph_$1)

#define QueryGraph_VE_ADJ 2
#define QueryGraph_VE_ADJ_REV 3
#define QueryGraph_VE_BASE 0
#define QueryGraph_VE_BASE_REV 1

/**
 @brief A class which is used to query the underlying graph with real GPS points.
 It does so by introducing virtual nodes and edges. It is lightweight in order to be created every time a new query comes in, which makes the behaviour thread safe. <p>
 @author Peter Karich
 */
@interface QueryGraph : NSObject < Graph > {
 @public
  /**
   @brief Virtual edges are created between existing graph and new virtual tower nodes.
   For every virtual node there are 4 edges: base-snap, snap-base, snap-adj, adj-snap.
   */
  id<JavaUtilList> virtualEdges_;
}

- (instancetype)initWithGraph:(id<Graph>)graph;

/**
 @brief Convenient method to initialize this QueryGraph with the two specified query results.
 */
- (QueryGraph *)lookupWithQueryResult:(QueryResult *)fromRes
                      withQueryResult:(QueryResult *)toRes;

/**
 @brief For all specified query results calculate snapped point and set closest node and edge to a virtual one if necessary.
 Additionally the wayIndex can change if an edge is swapped.
 */
- (void)lookupWithJavaUtilList:(id<JavaUtilList>)resList;

- (id<Graph>)getBaseGraph;

- (jboolean)isVirtualEdgeWithInt:(jint)edgeId;

- (jboolean)isVirtualNodeWithInt:(jint)nodeId;

/**
 @brief This method is an experimental feature to reduce memory and CPU resources if there are many locations ("hundreds") for one QueryGraph.
 It can make problems for custom or threaded algorithms or when using custom EdgeFilters for EdgeExplorer creation. Another limitation is that the same edge explorer is used even if a different vehicle/flagEncoder is chosen. Currently we can cache only the ALL_EDGES filter or instances of the DefaultEdgeFilter where three edge explorers will be created: forward OR backward OR both.
 */
- (QueryGraph *)setUseEdgeExplorerCacheWithBoolean:(jboolean)useEECache;

/**
 @brief Set those edges at the virtual node (nodeId) to 'unfavored' that require at least a turn of 100Â° from favoredHeading <p>
 @param nodeId VirtualNode at which edges get unfavored
 @param favoredHeading north based azimuth of favored heading between 0 and 360
 @param incoming if true, incoming edges are unfavored, else outgoing edges
 @return boolean indicating if enforcement took place
 */
- (jboolean)enforceHeadingWithInt:(jint)nodeId
                       withDouble:(jdouble)favoredHeading
                      withBoolean:(jboolean)incoming;

/**
 @brief Set one specific edge at the virtual node with nodeId to 'unfavored' to enforce routing along other edges <p>
 @param nodeId VirtualNode at which edges get unfavored
 @param edgeId edge to become unfavored
 @param incoming if true, incoming edge is unfavored, else outgoing edge
 @return boolean indicating if enforcement took place
 */
- (jboolean)enforceHeadingByEdgeIdWithInt:(jint)nodeId
                                  withInt:(jint)edgeId
                              withBoolean:(jboolean)incoming;

/**
 @brief Removes the 'unfavored' status of all virtual edges.
 */
- (void)clearUnfavoredStatus;

- (jint)getNodes;

- (id<NodeAccess>)getNodeAccess;

- (BBox *)getBounds;

- (id<EdgeIteratorState>)getEdgeIteratorStateWithInt:(jint)origEdgeId
                                             withInt:(jint)adjNode;

- (id<EdgeExplorer>)createEdgeExplorerWithEdgeFilter:(id<EdgeFilter>)edgeFilter;

- (void)fillVirtualEdgesWithGnuTroveMapTIntObjectMap:(id<GnuTroveMapTIntObjectMap>)node2Edge
                                             withInt:(jint)towerNode
                                    withEdgeExplorer:(id<EdgeExplorer>)mainExpl;

- (id<EdgeExplorer>)createEdgeExplorer;

- (id<AllEdgesIterator>)getAllEdges;

- (id<EdgeIteratorState>)edgeWithInt:(jint)a
                             withInt:(jint)b;

- (id<EdgeIteratorState>)edgeWithInt:(jint)a
                             withInt:(jint)b
                          withDouble:(jdouble)distance
                             withInt:(jint)flags;

- (id<EdgeIteratorState>)edgeWithInt:(jint)a
                             withInt:(jint)b
                          withDouble:(jdouble)distance
                         withBoolean:(jboolean)bothDirections;

- (id<Graph>)copyToWithGraph:(id<Graph>)g OBJC_METHOD_FAMILY_NONE;

- (id<GraphExtension>)getExtension;

@end

FOUNDATION_EXPORT BOOL QueryGraph_initialized;
J2OBJC_STATIC_INIT(QueryGraph)

J2OBJC_FIELD_SETTER(QueryGraph, virtualEdges_, id<JavaUtilList>)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(QueryGraph, VE_BASE, jint)

J2OBJC_STATIC_FIELD_GETTER(QueryGraph, VE_BASE_REV, jint)

J2OBJC_STATIC_FIELD_GETTER(QueryGraph, VE_ADJ, jint)

J2OBJC_STATIC_FIELD_GETTER(QueryGraph, VE_ADJ_REV, jint)

FOUNDATION_EXPORT AngleCalc *QueryGraph_AC_;
J2OBJC_STATIC_FIELD_GETTER(QueryGraph, AC_, AngleCalc *)
CF_EXTERN_C_END

typedef QueryGraph ComGraphhopperRoutingQueryGraph;

J2OBJC_TYPE_LITERAL_HEADER(QueryGraph)

@interface QueryGraph_$2 : QueryGraph {
}

- (QueryGraph *)setUseEdgeExplorerCacheWithBoolean:(jboolean)useEECache;

- (instancetype)initWithGraph:(id<Graph>)arg$0
               withQueryGraph:(QueryGraph *)arg$1;

@end

J2OBJC_EMPTY_STATIC_INIT(QueryGraph_$2)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(QueryGraph_$2)

@interface QueryGraph_$3 : NSObject < GnuTroveProcedureTObjectProcedure > {
}

- (jboolean)executeWithId:(id<JavaUtilList>)results;

- (instancetype)initWithQueryGraph:(QueryGraph *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(QueryGraph_$3)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(QueryGraph_$3)

@interface QueryGraph_$3_$1 : NSObject < JavaUtilComparator > {
}

- (jint)compareWithId:(QueryResult *)o1
               withId:(QueryResult *)o2;

- (instancetype)initWithPointList:(PointList *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(QueryGraph_$3_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(QueryGraph_$3_$1)

@interface QueryGraph_$4 : NSObject < GnuTroveProcedureTIntProcedure > {
}

- (jboolean)executeWithInt:(jint)value;

- (instancetype)initWithQueryGraph:(QueryGraph *)outer$
      withGnuTroveMapTIntObjectMap:(id<GnuTroveMapTIntObjectMap>)capture$0
                  withEdgeExplorer:(id<EdgeExplorer>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(QueryGraph_$4)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(QueryGraph_$4)

@interface QueryGraph_$5 : NSObject < EdgeExplorer > {
}

- (id<EdgeIterator>)setBaseNodeWithInt:(jint)baseNode;

- (instancetype)initWithGnuTroveMapTIntObjectMap:(id<GnuTroveMapTIntObjectMap>)capture$0
                                withEdgeExplorer:(id<EdgeExplorer>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(QueryGraph_$5)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(QueryGraph_$5)

#endif // _QueryGraph_H_
