//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/GHRequest.h"
#include "com/graphhopper/GHResponse.h"
#include "com/graphhopper/PathWrapper.h"
#include "com/graphhopper/routing/AlgorithmOptions.h"
#include "com/graphhopper/routing/Path.h"
#include "com/graphhopper/routing/QueryGraph.h"
#include "com/graphhopper/routing/RoutingAlgorithm.h"
#include "com/graphhopper/routing/RoutingAlgorithmFactory.h"
#include "com/graphhopper/routing/template/AbstractRoutingTemplate.h"
#include "com/graphhopper/routing/template/RoundTripRoutingTemplate.h"
#include "com/graphhopper/routing/util/DefaultEdgeFilter.h"
#include "com/graphhopper/routing/util/EdgeFilter.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/HintsMap.h"
#include "com/graphhopper/routing/util/tour/MultiPointTour.h"
#include "com/graphhopper/routing/util/tour/TourStrategy.h"
#include "com/graphhopper/routing/weighting/AvoidEdgesWeighting.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/index/LocationIndex.h"
#include "com/graphhopper/storage/index/QueryResult.h"
#include "com/graphhopper/util/DistanceCalc.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/PMap.h"
#include "com/graphhopper/util/Parameters.h"
#include "com/graphhopper/util/PathMerger.h"
#include "com/graphhopper/util/PointList.h"
#include "com/graphhopper/util/Translation.h"
#include "com/graphhopper/util/exceptions/PointNotFoundException.h"
#include "com/graphhopper/util/shapes/GHPoint.h"
#include "com/graphhopper/util/shapes/GHPoint3D.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Random.h"

__attribute__((unused)) static QueryResult *ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_generateValidPointWithGHPoint_withDouble_withDouble_withEdgeFilter_(ComGraphhopperRoutingTemplateRoundTripRoutingTemplate *self, GHPoint *from, jdouble distanceInMeters, jdouble heading, id<EdgeFilter> edgeFilter);

@interface ComGraphhopperRoutingTemplateRoundTripRoutingTemplate () {
 @public
  jint maxRetries_;
  GHRequest *ghRequest_;
  GHResponse *ghResponse_;
  id<LocationIndex> locationIndex_;
  PathWrapper *altResponse_;
  id<JavaUtilList> pathList_;
}

- (QueryResult *)generateValidPointWithGHPoint:(GHPoint *)from
                                    withDouble:(jdouble)distanceInMeters
                                    withDouble:(jdouble)heading
                                withEdgeFilter:(id<EdgeFilter>)edgeFilter;
@end

J2OBJC_FIELD_SETTER(ComGraphhopperRoutingTemplateRoundTripRoutingTemplate, ghRequest_, GHRequest *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingTemplateRoundTripRoutingTemplate, ghResponse_, GHResponse *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingTemplateRoundTripRoutingTemplate, locationIndex_, id<LocationIndex>)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingTemplateRoundTripRoutingTemplate, altResponse_, PathWrapper *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingTemplateRoundTripRoutingTemplate, pathList_, id<JavaUtilList>)

@implementation ComGraphhopperRoutingTemplateRoundTripRoutingTemplate

- (instancetype)initWithGHRequest:(GHRequest *)request
                   withGHResponse:(GHResponse *)ghRsp
                withLocationIndex:(id<LocationIndex>)locationIndex
                          withInt:(jint)maxRetries {
  if (self = [super init]) {
    ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_set_ghRequest_(self, request);
    ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_set_ghResponse_(self, ghRsp);
    ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_set_locationIndex_(self, locationIndex);
    self->maxRetries_ = maxRetries;
  }
  return self;
}

- (id<JavaUtilList>)lookupWithJavaUtilList:(id<JavaUtilList>)points
                           withFlagEncoder:(id<FlagEncoder>)encoder {
  if ([((id<JavaUtilList>) nil_chk(points)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"For round trip calculation one point is required"] autorelease];
  jdouble distanceInMeter = [((HintsMap *) nil_chk([((GHRequest *) nil_chk(ghRequest_)) getHints])) getDoubleWithNSString:Parameters_Algorithms_RoundTrip_get_DISTANCE_() withDouble:10000];
  jlong seed = [((HintsMap *) nil_chk([ghRequest_ getHints])) getLongWithNSString:Parameters_Algorithms_RoundTrip_get_SEED_() withLong:0LL];
  jdouble initialHeading = [((HintsMap *) nil_chk([ghRequest_ getHints])) getDoubleWithNSString:Parameters_Algorithms_RoundTrip_get_HEADING_() withDouble:JavaLangDouble_NaN];
  jint roundTripPointCount = JavaLangMath_minWithInt_withInt_(20, [((HintsMap *) nil_chk([ghRequest_ getHints])) getIntWithNSString:JreStrcat("$$", Parameters_Algorithms_get_ROUND_TRIP_(), @".points") withInt:2 + J2ObjCFpToInt((distanceInMeter / 50000))]);
  GHPoint *start = [((id<JavaUtilList>) nil_chk([ghRequest_ getPoints])) getWithInt:0];
  ComGraphhopperRoutingUtilTourTourStrategy *strategy = [[[ComGraphhopperRoutingUtilTourMultiPointTour alloc] initWithJavaUtilRandom:[[[JavaUtilRandom alloc] initWithLong:seed] autorelease] withDouble:distanceInMeter withInt:roundTripPointCount withDouble:initialHeading] autorelease];
  ComGraphhopperRoutingTemplateAbstractRoutingTemplate_setAndConsume_queryResults_(self, [[JavaUtilArrayList alloc] initWithInt:2 + [strategy getNumberOfGeneratedPoints]]);
  id<EdgeFilter> edgeFilter = [[[DefaultEdgeFilter alloc] initWithFlagEncoder:encoder] autorelease];
  QueryResult *startQR = [((id<LocationIndex>) nil_chk(locationIndex_)) findClosestWithDouble:((GHPoint *) nil_chk(start))->lat_ withDouble:start->lon_ withEdgeFilter:edgeFilter];
  if (![((QueryResult *) nil_chk(startQR)) isValid]) @throw [[[ComGraphhopperUtilExceptionsPointNotFoundException alloc] initWithNSString:JreStrcat("$@", @"Cannot find point 0: ", start) withInt:0] autorelease];
  [queryResults_ addWithId:startQR];
  GHPoint *last = [points getWithInt:0];
  for (jint i = 0; i < [strategy getNumberOfGeneratedPoints]; i++) {
    jdouble heading = [strategy getHeadingForIterationWithInt:i];
    QueryResult *result = ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_generateValidPointWithGHPoint_withDouble_withDouble_withEdgeFilter_(self, last, [strategy getDistanceForIterationWithInt:i], heading, edgeFilter);
    if (result == nil) {
      [((GHResponse *) nil_chk(ghResponse_)) addErrorWithJavaLangThrowable:[[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$I$@", @"Could not find a valid point after ", maxRetries_, @" tries, for the point:", last)] autorelease]];
      return JavaUtilCollections_emptyList();
    }
    last = [((QueryResult *) nil_chk(result)) getSnappedPoint];
    [queryResults_ addWithId:result];
  }
  [queryResults_ addWithId:startQR];
  return queryResults_;
}

- (void)setQueryResultsWithJavaUtilList:(id<JavaUtilList>)queryResults {
  ComGraphhopperRoutingTemplateAbstractRoutingTemplate_set_queryResults_(self, queryResults);
}

- (id<JavaUtilList>)calcPathsWithQueryGraph:(QueryGraph *)queryGraph
                withRoutingAlgorithmFactory:(id<RoutingAlgorithmFactory>)algoFactory
                       withAlgorithmOptions:(AlgorithmOptions *)algoOpts {
  ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_setAndConsume_pathList_(self, [[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(queryResults_)) size] - 1]);
  ComGraphhopperRoutingWeightingAvoidEdgesWeighting *avoidPathWeighting = [[[ComGraphhopperRoutingWeightingAvoidEdgesWeighting alloc] initWithComGraphhopperRoutingWeightingWeighting:[((AlgorithmOptions *) nil_chk(algoOpts)) getWeighting]] autorelease];
  [avoidPathWeighting setEdgePenaltyFactorWithDouble:5];
  algoOpts = [((AlgorithmOptions_Builder *) nil_chk([((AlgorithmOptions_Builder *) nil_chk([((AlgorithmOptions_Builder *) nil_chk(AlgorithmOptions_startWithAlgorithmOptions_(algoOpts))) algorithmWithNSString:Parameters_Algorithms_get_ASTAR_BI_()])) weightingWithComGraphhopperRoutingWeightingWeighting:avoidPathWeighting])) build];
  [((PMap *) nil_chk([((AlgorithmOptions *) nil_chk(algoOpts)) getHints])) putWithNSString:JreStrcat("$$", Parameters_Algorithms_get_ASTAR_BI_(), @".epsilon") withId:JavaLangInteger_valueOfWithInt_(2)];
  jlong visitedNodesSum = 0LL;
  QueryResult *start = [queryResults_ getWithInt:0];
  for (jint qrIndex = 1; qrIndex < [queryResults_ size]; qrIndex++) {
    id<RoutingAlgorithm> algo = [((id<RoutingAlgorithmFactory>) nil_chk(algoFactory)) createAlgoWithGraph:queryGraph withAlgorithmOptions:algoOpts];
    QueryResult *startQR = [queryResults_ getWithInt:qrIndex - 1];
    jint startNode = (startQR == start) ? [((QueryResult *) nil_chk(startQR)) getClosestNode] : [((id<EdgeIteratorState>) nil_chk([((QueryResult *) nil_chk(startQR)) getClosestEdge])) getBaseNode];
    QueryResult *endQR = [queryResults_ getWithInt:qrIndex];
    jint endNode = (endQR == start) ? [((QueryResult *) nil_chk(endQR)) getClosestNode] : [((id<EdgeIteratorState>) nil_chk([((QueryResult *) nil_chk(endQR)) getClosestEdge])) getBaseNode];
    Path *path = [((id<RoutingAlgorithm>) nil_chk(algo)) calcPathWithInt:startNode withInt:endNode];
    visitedNodesSum += [algo getVisitedNodes];
    [pathList_ addWithId:path];
    [avoidPathWeighting addEdgesWithJavaUtilCollection:[((Path *) nil_chk(path)) calcEdges]];
  }
  [((PMap *) nil_chk([((GHResponse *) nil_chk(ghResponse_)) getHints])) putWithNSString:@"visited_nodes.sum" withId:JavaLangLong_valueOfWithLong_(visitedNodesSum)];
  [((PMap *) nil_chk([ghResponse_ getHints])) putWithNSString:@"visited_nodes.average" withId:JavaLangFloat_valueOfWithFloat_((jfloat) visitedNodesSum / ([queryResults_ size] - 1))];
  return pathList_;
}

- (void)setPathsWithJavaUtilList:(id<JavaUtilList>)pathList {
  ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_set_pathList_(self, pathList);
}

- (jboolean)isReadyWithPathMerger:(PathMerger *)pathMerger
                  withTranslation:(id<Translation>)tr {
  ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_setAndConsume_altResponse_(self, [[PathWrapper alloc] init]);
  [altResponse_ setWaypointsWithPointList:[self getWaypoints]];
  [((GHResponse *) nil_chk(ghResponse_)) addWithPathWrapper:altResponse_];
  [((PathMerger *) nil_chk(pathMerger)) doWorkWithPathWrapper:altResponse_ withJavaUtilList:pathList_ withTranslation:tr];
  return YES;
}

- (QueryResult *)generateValidPointWithGHPoint:(GHPoint *)from
                                    withDouble:(jdouble)distanceInMeters
                                    withDouble:(jdouble)heading
                                withEdgeFilter:(id<EdgeFilter>)edgeFilter {
  return ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_generateValidPointWithGHPoint_withDouble_withDouble_withEdgeFilter_(self, from, distanceInMeters, heading, edgeFilter);
}

- (jint)getMaxRetries {
  return 1;
}

- (void)dealloc {
  RELEASE_(ghRequest_);
  RELEASE_(ghResponse_);
  RELEASE_(locationIndex_);
  RELEASE_(altResponse_);
  RELEASE_(pathList_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingTemplateRoundTripRoutingTemplate *)other {
  [super copyAllFieldsTo:other];
  other->maxRetries_ = maxRetries_;
  ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_set_ghRequest_(other, ghRequest_);
  ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_set_ghResponse_(other, ghResponse_);
  ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_set_locationIndex_(other, locationIndex_);
  ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_set_altResponse_(other, altResponse_);
  ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_set_pathList_(other, pathList_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGHRequest:withGHResponse:withLocationIndex:withInt:", "RoundTripRoutingTemplate", NULL, 0x1, NULL },
    { "lookupWithJavaUtilList:withFlagEncoder:", "lookup", "Ljava.util.List;", 0x1, NULL },
    { "setQueryResultsWithJavaUtilList:", "setQueryResults", "V", 0x0, NULL },
    { "calcPathsWithQueryGraph:withRoutingAlgorithmFactory:withAlgorithmOptions:", "calcPaths", "Ljava.util.List;", 0x1, NULL },
    { "setPathsWithJavaUtilList:", "setPaths", "V", 0x1, NULL },
    { "isReadyWithPathMerger:withTranslation:", "isReady", "Z", 0x1, NULL },
    { "generateValidPointWithGHPoint:withDouble:withDouble:withEdgeFilter:", "generateValidPoint", "Lcom.graphhopper.storage.index.QueryResult;", 0x2, NULL },
    { "getMaxRetries", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "maxRetries_", NULL, 0x12, "I", NULL,  },
    { "ghRequest_", NULL, 0x12, "Lcom.graphhopper.GHRequest;", NULL,  },
    { "ghResponse_", NULL, 0x12, "Lcom.graphhopper.GHResponse;", NULL,  },
    { "locationIndex_", NULL, 0x12, "Lcom.graphhopper.storage.index.LocationIndex;", NULL,  },
    { "altResponse_", NULL, 0x2, "Lcom.graphhopper.PathWrapper;", NULL,  },
    { "pathList_", NULL, 0x2, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingTemplateRoundTripRoutingTemplate = { 1, "RoundTripRoutingTemplate", "com.graphhopper.routing.template", NULL, 0x1, 8, methods, 6, fields, 0, NULL};
  return &_ComGraphhopperRoutingTemplateRoundTripRoutingTemplate;
}

@end

QueryResult *ComGraphhopperRoutingTemplateRoundTripRoutingTemplate_generateValidPointWithGHPoint_withDouble_withDouble_withEdgeFilter_(ComGraphhopperRoutingTemplateRoundTripRoutingTemplate *self, GHPoint *from, jdouble distanceInMeters, jdouble heading, id<EdgeFilter> edgeFilter) {
  jint tryCount = 0;
  while (YES) {
    GHPoint *generatedPoint = [((id<DistanceCalc>) nil_chk(Helper_get_DIST_EARTH_())) projectCoordinateWithDouble:[((GHPoint *) nil_chk(from)) getLat] withDouble:[from getLon] withDouble:distanceInMeters withDouble:heading];
    QueryResult *qr = [((id<LocationIndex>) nil_chk(self->locationIndex_)) findClosestWithDouble:[((GHPoint *) nil_chk(generatedPoint)) getLat] withDouble:[generatedPoint getLon] withEdgeFilter:edgeFilter];
    if ([((QueryResult *) nil_chk(qr)) isValid]) return qr;
    tryCount++;
    distanceInMeters *= 0.95;
    if (tryCount >= self->maxRetries_) return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingTemplateRoundTripRoutingTemplate)
