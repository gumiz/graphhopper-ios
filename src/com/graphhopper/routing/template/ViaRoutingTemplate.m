//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/GHRequest.h"
#include "com/graphhopper/GHResponse.h"
#include "com/graphhopper/PathWrapper.h"
#include "com/graphhopper/routing/AlgorithmOptions.h"
#include "com/graphhopper/routing/Path.h"
#include "com/graphhopper/routing/QueryGraph.h"
#include "com/graphhopper/routing/RoutingAlgorithm.h"
#include "com/graphhopper/routing/RoutingAlgorithmFactory.h"
#include "com/graphhopper/routing/template/AbstractRoutingTemplate.h"
#include "com/graphhopper/routing/template/ViaRoutingTemplate.h"
#include "com/graphhopper/routing/util/DefaultEdgeFilter.h"
#include "com/graphhopper/routing/util/EdgeFilter.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/HintsMap.h"
#include "com/graphhopper/storage/index/LocationIndex.h"
#include "com/graphhopper/storage/index/QueryResult.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/PMap.h"
#include "com/graphhopper/util/Parameters.h"
#include "com/graphhopper/util/PathMerger.h"
#include "com/graphhopper/util/PointList.h"
#include "com/graphhopper/util/StopWatch.h"
#include "com/graphhopper/util/Translation.h"
#include "com/graphhopper/util/exceptions/PointNotFoundException.h"
#include "com/graphhopper/util/shapes/GHPoint.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ComGraphhopperRoutingTemplateViaRoutingTemplate () {
 @public
  id<LocationIndex> locationIndex_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperRoutingTemplateViaRoutingTemplate, locationIndex_, id<LocationIndex>)

@implementation ComGraphhopperRoutingTemplateViaRoutingTemplate

- (instancetype)initWithGHRequest:(GHRequest *)ghRequest
                   withGHResponse:(GHResponse *)ghRsp
                withLocationIndex:(id<LocationIndex>)locationIndex {
  if (self = [super init]) {
    ComGraphhopperRoutingTemplateViaRoutingTemplate_setAndConsume_altResponse_(self, [[PathWrapper alloc] init]);
    ComGraphhopperRoutingTemplateViaRoutingTemplate_set_locationIndex_(self, locationIndex);
    ComGraphhopperRoutingTemplateViaRoutingTemplate_set_ghRequest_(self, ghRequest);
    ComGraphhopperRoutingTemplateViaRoutingTemplate_set_ghResponse_(self, ghRsp);
  }
  return self;
}

- (id<JavaUtilList>)lookupWithJavaUtilList:(id<JavaUtilList>)points
                           withFlagEncoder:(id<FlagEncoder>)encoder {
  if ([((id<JavaUtilList>) nil_chk(points)) size] < 2) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"At least 2 points have to be specified, but was:", [points size])] autorelease];
  id<EdgeFilter> edgeFilter = [[[DefaultEdgeFilter alloc] initWithFlagEncoder:encoder] autorelease];
  ComGraphhopperRoutingTemplateAbstractRoutingTemplate_setAndConsume_queryResults_(self, [[JavaUtilArrayList alloc] initWithInt:[points size]]);
  for (jint placeIndex = 0; placeIndex < [points size]; placeIndex++) {
    GHPoint *point = [points getWithInt:placeIndex];
    QueryResult *res = [((id<LocationIndex>) nil_chk(locationIndex_)) findClosestWithDouble:((GHPoint *) nil_chk(point))->lat_ withDouble:point->lon_ withEdgeFilter:edgeFilter];
    if (![((QueryResult *) nil_chk(res)) isValid]) [((GHResponse *) nil_chk(ghResponse_)) addErrorWithJavaLangThrowable:[[[ComGraphhopperUtilExceptionsPointNotFoundException alloc] initWithNSString:JreStrcat("$I$@", @"Cannot find point ", placeIndex, @": ", point) withInt:placeIndex] autorelease]];
    [queryResults_ addWithId:res];
  }
  return queryResults_;
}

- (id<JavaUtilList>)calcPathsWithQueryGraph:(QueryGraph *)queryGraph
                withRoutingAlgorithmFactory:(id<RoutingAlgorithmFactory>)algoFactory
                       withAlgorithmOptions:(AlgorithmOptions *)algoOpts {
  jlong visitedNodesSum = 0LL;
  jboolean viaTurnPenalty = [((HintsMap *) nil_chk([((GHRequest *) nil_chk(ghRequest_)) getHints])) getBoolWithNSString:Parameters_Routing_get_PASS_THROUGH_() withBoolean:NO];
  jint pointCounts = [((id<JavaUtilList>) nil_chk([ghRequest_ getPoints])) size];
  ComGraphhopperRoutingTemplateViaRoutingTemplate_setAndConsume_pathList_(self, [[JavaUtilArrayList alloc] initWithInt:pointCounts - 1]);
  QueryResult *fromQResult = [((id<JavaUtilList>) nil_chk(queryResults_)) getWithInt:0];
  StopWatch *sw;
  for (jint placeIndex = 1; placeIndex < pointCounts; placeIndex++) {
    if (placeIndex == 1) {
      [((QueryGraph *) nil_chk(queryGraph)) enforceHeadingWithInt:[((QueryResult *) nil_chk(fromQResult)) getClosestNode] withDouble:[ghRequest_ getFavoredHeadingWithInt:0] withBoolean:NO];
    }
    else if (viaTurnPenalty) {
      Path *prevRoute = [pathList_ getWithInt:placeIndex - 2];
      if ([((Path *) nil_chk(prevRoute)) getEdgeCount] > 0) {
        id<EdgeIteratorState> incomingVirtualEdge = [prevRoute getFinalEdge];
        [((QueryGraph *) nil_chk(queryGraph)) enforceHeadingByEdgeIdWithInt:[((QueryResult *) nil_chk(fromQResult)) getClosestNode] withInt:[((id<EdgeIteratorState>) nil_chk(incomingVirtualEdge)) getEdge] withBoolean:NO];
      }
    }
    QueryResult *toQResult = [queryResults_ getWithInt:placeIndex];
    [((QueryGraph *) nil_chk(queryGraph)) enforceHeadingWithInt:[((QueryResult *) nil_chk(toQResult)) getClosestNode] withDouble:[ghRequest_ getFavoredHeadingWithInt:placeIndex] withBoolean:YES];
    sw = [((StopWatch *) [[[StopWatch alloc] init] autorelease]) start];
    id<RoutingAlgorithm> algo = [((id<RoutingAlgorithmFactory>) nil_chk(algoFactory)) createAlgoWithGraph:queryGraph withAlgorithmOptions:algoOpts];
    NSString *debug = JreStrcat("$FC", @", algoInit:", [((StopWatch *) nil_chk([((StopWatch *) nil_chk(sw)) stop])) getSeconds], 's');
    sw = [((StopWatch *) [[[StopWatch alloc] init] autorelease]) start];
    id<JavaUtilList> tmpPathList = [((id<RoutingAlgorithm>) nil_chk(algo)) calcPathsWithInt:[((QueryResult *) nil_chk(fromQResult)) getClosestNode] withInt:[toQResult getClosestNode]];
    debug = JreStrcat("$$", debug, JreStrcat("$$$FC", @", ", [algo getName], @"-routing:", [((StopWatch *) nil_chk([((StopWatch *) nil_chk(sw)) stop])) getSeconds], 's'));
    if ([((id<JavaUtilList>) nil_chk(tmpPathList)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@$@", @"At least one path has to be returned for ", fromQResult, @" -> ", toQResult)] autorelease];
    for (Path * __strong path in tmpPathList) {
      if ([((Path *) nil_chk(path)) getTime] < 0) @throw [[[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$@", @"Time was negative. Please report as bug and include:", ghRequest_)] autorelease];
      [pathList_ addWithId:path];
      debug = JreStrcat("$$", debug, JreStrcat("$$", @", ", [path getDebugInfo]));
    }
    [((PathWrapper *) nil_chk(altResponse_)) addDebugInfoWithNSString:debug];
    [queryGraph clearUnfavoredStatus];
    if ([algo getVisitedNodes] >= [((AlgorithmOptions *) nil_chk(algoOpts)) getMaxVisitedNodes]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"No path found due to maximum nodes exceeded ", [algoOpts getMaxVisitedNodes])] autorelease];
    visitedNodesSum += [algo getVisitedNodes];
    fromQResult = toQResult;
  }
  [((PMap *) nil_chk([((GHResponse *) nil_chk(ghResponse_)) getHints])) putWithNSString:@"visited_nodes.sum" withId:JavaLangLong_valueOfWithLong_(visitedNodesSum)];
  [((PMap *) nil_chk([ghResponse_ getHints])) putWithNSString:@"visited_nodes.average" withId:JavaLangFloat_valueOfWithFloat_((jfloat) visitedNodesSum / (pointCounts - 1))];
  return pathList_;
}

- (jboolean)isReadyWithPathMerger:(PathMerger *)pathMerger
                  withTranslation:(id<Translation>)tr {
  if ([((id<JavaUtilList>) nil_chk([((GHRequest *) nil_chk(ghRequest_)) getPoints])) size] - 1 != [((id<JavaUtilList>) nil_chk(pathList_)) size]) @throw [[[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$I$I", @"There should be exactly one more points than paths. points:", [((id<JavaUtilList>) nil_chk([ghRequest_ getPoints])) size], @", paths:", [pathList_ size])] autorelease];
  [((PathWrapper *) nil_chk(altResponse_)) setWaypointsWithPointList:[self getWaypoints]];
  [((GHResponse *) nil_chk(ghResponse_)) addWithPathWrapper:altResponse_];
  [((PathMerger *) nil_chk(pathMerger)) doWorkWithPathWrapper:altResponse_ withJavaUtilList:pathList_ withTranslation:tr];
  return YES;
}

- (jint)getMaxRetries {
  return 1;
}

- (void)dealloc {
  RELEASE_(ghRequest_);
  RELEASE_(ghResponse_);
  RELEASE_(altResponse_);
  RELEASE_(locationIndex_);
  RELEASE_(pathList_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingTemplateViaRoutingTemplate *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperRoutingTemplateViaRoutingTemplate_set_ghRequest_(other, ghRequest_);
  ComGraphhopperRoutingTemplateViaRoutingTemplate_set_ghResponse_(other, ghResponse_);
  ComGraphhopperRoutingTemplateViaRoutingTemplate_set_altResponse_(other, altResponse_);
  ComGraphhopperRoutingTemplateViaRoutingTemplate_set_locationIndex_(other, locationIndex_);
  ComGraphhopperRoutingTemplateViaRoutingTemplate_set_pathList_(other, pathList_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGHRequest:withGHResponse:withLocationIndex:", "ViaRoutingTemplate", NULL, 0x1, NULL },
    { "lookupWithJavaUtilList:withFlagEncoder:", "lookup", "Ljava.util.List;", 0x1, NULL },
    { "calcPathsWithQueryGraph:withRoutingAlgorithmFactory:withAlgorithmOptions:", "calcPaths", "Ljava.util.List;", 0x1, NULL },
    { "isReadyWithPathMerger:withTranslation:", "isReady", "Z", 0x1, NULL },
    { "getMaxRetries", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ghRequest_", NULL, 0x14, "Lcom.graphhopper.GHRequest;", NULL,  },
    { "ghResponse_", NULL, 0x14, "Lcom.graphhopper.GHResponse;", NULL,  },
    { "altResponse_", NULL, 0x14, "Lcom.graphhopper.PathWrapper;", NULL,  },
    { "locationIndex_", NULL, 0x12, "Lcom.graphhopper.storage.index.LocationIndex;", NULL,  },
    { "pathList_", NULL, 0x4, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingTemplateViaRoutingTemplate = { 1, "ViaRoutingTemplate", "com.graphhopper.routing.template", NULL, 0x1, 5, methods, 5, fields, 0, NULL};
  return &_ComGraphhopperRoutingTemplateViaRoutingTemplate;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingTemplateViaRoutingTemplate)
