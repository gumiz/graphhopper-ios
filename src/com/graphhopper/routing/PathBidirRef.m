//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/PathBidirRef.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/Path.h"
#include "com/graphhopper/routing/PathBidirRef.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/storage/SPTEntry.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/StopWatch.h"
#include "java/lang/IllegalStateException.h"

@interface PathBidirRef () {
 @public
  jboolean switchWrapper_;
}
@end

@implementation PathBidirRef

- (instancetype)initWithGraph:(id<Graph>)g
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting {
  if (self = [super initWithGraph:g withComGraphhopperRoutingWeightingWeighting:weighting]) {
    switchWrapper_ = NO;
  }
  return self;
}

- (instancetype)initWithPathBidirRef:(PathBidirRef *)p {
  if (self = [super initWithPath:p]) {
    switchWrapper_ = NO;
    PathBidirRef_set_edgeTo_(self, ((PathBidirRef *) nil_chk(p))->edgeTo_);
    switchWrapper_ = p->switchWrapper_;
  }
  return self;
}

- (PathBidirRef *)setSwitchToFromWithBoolean:(jboolean)b {
  switchWrapper_ = b;
  return self;
}

- (PathBidirRef *)setSPTEntryToWithSPTEntry:(SPTEntry *)edgeTo {
  PathBidirRef_set_edgeTo_(self, edgeTo);
  return self;
}

- (Path *)extract {
  if (sptEntry_ == nil || edgeTo_ == nil) return self;
  if (((SPTEntry *) nil_chk(sptEntry_))->adjNode_ != ((SPTEntry *) nil_chk(edgeTo_))->adjNode_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$$$@$@", @"Locations of the 'to'- and 'from'-Edge has to be the same.", [self description], @", fromEntry:", sptEntry_, @", toEntry:", edgeTo_)] autorelease];
  [((StopWatch *) nil_chk(extractSW_)) start];
  if (switchWrapper_) {
    SPTEntry *ee = sptEntry_;
    Path_set_sptEntry_(self, edgeTo_);
    PathBidirRef_set_edgeTo_(self, ee);
  }
  jint prevEdge = EdgeIterator_NO_EDGE;
  SPTEntry *currEdge = sptEntry_;
  while (EdgeIterator_Edge_isValidWithInt_(currEdge->edge_)) {
    [self processEdgeWithInt:currEdge->edge_ withInt:currEdge->adjNode_ withInt:prevEdge];
    prevEdge = currEdge->edge_;
    currEdge = currEdge->parent_;
  }
  [self setFromNodeWithInt:((SPTEntry *) nil_chk(currEdge))->adjNode_];
  [self reverseOrder];
  currEdge = edgeTo_;
  jint tmpEdge = currEdge->edge_;
  while (EdgeIterator_Edge_isValidWithInt_(tmpEdge)) {
    currEdge = currEdge->parent_;
    [self processEdgeWithInt:tmpEdge withInt:((SPTEntry *) nil_chk(currEdge))->adjNode_ withInt:currEdge->edge_];
    tmpEdge = currEdge->edge_;
  }
  [self setEndNodeWithInt:((SPTEntry *) nil_chk(currEdge))->adjNode_];
  [extractSW_ stop];
  return [self setFoundWithBoolean:YES];
}

- (void)dealloc {
  RELEASE_(edgeTo_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(PathBidirRef *)other {
  [super copyAllFieldsTo:other];
  PathBidirRef_set_edgeTo_(other, edgeTo_);
  other->switchWrapper_ = switchWrapper_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraph:withComGraphhopperRoutingWeightingWeighting:", "PathBidirRef", NULL, 0x1, NULL },
    { "initWithPathBidirRef:", "PathBidirRef", NULL, 0x0, NULL },
    { "setSwitchToFromWithBoolean:", "setSwitchToFrom", "Lcom.graphhopper.routing.PathBidirRef;", 0x1, NULL },
    { "setSPTEntryToWithSPTEntry:", "setSPTEntryTo", "Lcom.graphhopper.routing.PathBidirRef;", 0x1, NULL },
    { "extract", NULL, "Lcom.graphhopper.routing.Path;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "edgeTo_", NULL, 0x4, "Lcom.graphhopper.storage.SPTEntry;", NULL,  },
    { "switchWrapper_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _PathBidirRef = { 1, "PathBidirRef", "com.graphhopper.routing", NULL, 0x1, 5, methods, 2, fields, 0, NULL};
  return &_PathBidirRef;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(PathBidirRef)
