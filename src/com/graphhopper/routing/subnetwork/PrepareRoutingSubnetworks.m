//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/subnetwork/PrepareRoutingSubnetworks.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/coll/GHBitSet.h"
#include "com/graphhopper/coll/GHBitSetImpl.h"
#include "com/graphhopper/routing/subnetwork/PrepareRoutingSubnetworks.h"
#include "com/graphhopper/routing/subnetwork/TarjansSCCAlgorithm.h"
#include "com/graphhopper/routing/util/AllEdgesIterator.h"
#include "com/graphhopper/routing/util/DefaultEdgeFilter.h"
#include "com/graphhopper/routing/util/EdgeFilter.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/storage/GraphHopperStorage.h"
#include "com/graphhopper/storage/NodeAccess.h"
#include "com/graphhopper/util/EdgeExplorer.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/StopWatch.h"
#include "gnu/trove/list/TIntList.h"
#include "gnu/trove/list/array/TIntArrayList.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks () {
 @public
  id<OrgSlf4jLogger> logger_;
  GraphHopperStorage *ghStorage_;
  JavaUtilConcurrentAtomicAtomicInteger *maxEdgesPerNode_;
  id<JavaUtilList> encoders_;
  jint minNetworkSize_;
  jint minOneWayNetworkSize_;
  jint subnetworks_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks, logger_, id<OrgSlf4jLogger>)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks, ghStorage_, GraphHopperStorage *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks, maxEdgesPerNode_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks, encoders_, id<JavaUtilList>)

@interface ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1 () {
 @public
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks *this$0_;
  id<GHBitSet> val$bs_;
  GnuTroveListArrayTIntArrayList *val$intList_;
  id<FlagEncoder> val$encoder_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1, this$0_, ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1, val$bs_, id<GHBitSet>)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1, val$intList_, GnuTroveListArrayTIntArrayList *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1, val$encoder_, id<FlagEncoder>)

@implementation ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks

- (instancetype)initWithGraphHopperStorage:(GraphHopperStorage *)ghStorage
                          withJavaUtilList:(id<JavaUtilList>)encoders {
  if (self = [super init]) {
    ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_set_logger_(self, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_([self getClass]));
    ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_setAndConsume_maxEdgesPerNode_(self, [[JavaUtilConcurrentAtomicAtomicInteger alloc] initWithInt:0]);
    minNetworkSize_ = 200;
    minOneWayNetworkSize_ = 0;
    subnetworks_ = -1;
    ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_set_ghStorage_(self, ghStorage);
    ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_set_encoders_(self, encoders);
  }
  return self;
}

- (ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks *)setMinNetworkSizeWithInt:(jint)minNetworkSize {
  self->minNetworkSize_ = minNetworkSize;
  return self;
}

- (ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks *)setMinOneWayNetworkSizeWithInt:(jint)minOnewayNetworkSize {
  self->minOneWayNetworkSize_ = minOnewayNetworkSize;
  return self;
}

- (void)doWork {
  if (minNetworkSize_ <= 0 && minOneWayNetworkSize_ <= 0) return;
  jint unvisitedDeadEnds = 0;
  for (id<FlagEncoder> __strong encoder in nil_chk(encoders_)) {
    ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *filter = [[[ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter alloc] initWithFlagEncoder:encoder] autorelease];
    if (minOneWayNetworkSize_ > 0) unvisitedDeadEnds += [self removeDeadEndUnvisitedNetworksWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:filter];
    id<JavaUtilList> components = [self findSubnetworksWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:filter];
    [self keepLargeNetworksWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:filter withJavaUtilList:components];
    subnetworks_ = JavaLangMath_maxWithInt_withInt_([((id<JavaUtilList>) nil_chk(components)) size], subnetworks_);
    [((id<OrgSlf4jLogger>) nil_chk(logger_)) infoWithNSString:JreStrcat("I$@$$", [components size], @" subnetworks found for ", encoder, @", ", Helper_getMemInfo())];
  }
  [self markNodesRemovedIfUnreachable];
  [((id<OrgSlf4jLogger>) nil_chk(logger_)) infoWithNSString:JreStrcat("$I$I$IC", @"optimize to remove subnetworks (", subnetworks_, @"), unvisited-dead-end-nodes (", unvisitedDeadEnds, @"), maxEdges/node (", [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(maxEdgesPerNode_)) get], ')')];
  [((GraphHopperStorage *) nil_chk(ghStorage_)) optimize];
}

- (jint)getMaxSubnetworks {
  return subnetworks_;
}

- (id<JavaUtilList>)findSubnetworksWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *)filter {
  id<FlagEncoder> encoder = [((ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *) nil_chk(filter)) getEncoder];
  id<EdgeExplorer> explorer = [((GraphHopperStorage *) nil_chk(ghStorage_)) createEdgeExplorerWithEdgeFilter:filter];
  jint locs = [ghStorage_ getNodes];
  id<JavaUtilList> list = [[[JavaUtilArrayList alloc] initWithInt:100] autorelease];
  id<GHBitSet> bs = [[[GHBitSetImpl alloc] initWithInt:locs] autorelease];
  for (jint start = 0; start < locs; start++) {
    if ([bs containsWithInt:start]) continue;
    GnuTroveListArrayTIntArrayList *intList = [[[GnuTroveListArrayTIntArrayList alloc] initWithInt:20] autorelease];
    [list addWithId:intList];
    [((ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1 *) [[[ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1 alloc] initWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks:self withGHBitSet:bs withGnuTroveListArrayTIntArrayList:intList withFlagEncoder:encoder] autorelease]) startWithEdgeExplorer:explorer withInt:start];
    [intList trimToSize];
  }
  return list;
}

- (jint)keepLargeNetworksWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *)filter
                                                                                    withJavaUtilList:(id<JavaUtilList>)components {
  if ([((id<JavaUtilList>) nil_chk(components)) size] <= 1) return 0;
  jint maxCount = -1;
  id<GnuTroveListTIntList> oldComponent = nil;
  jint allRemoved = 0;
  id<FlagEncoder> encoder = [((ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *) nil_chk(filter)) getEncoder];
  id<EdgeExplorer> explorer = [((GraphHopperStorage *) nil_chk(ghStorage_)) createEdgeExplorerWithEdgeFilter:filter];
  for (GnuTroveListArrayTIntArrayList * __strong component in components) {
    if (maxCount < 0) {
      maxCount = [((GnuTroveListArrayTIntArrayList *) nil_chk(component)) size];
      oldComponent = component;
      continue;
    }
    jint removedEdges;
    if (maxCount < [((GnuTroveListArrayTIntArrayList *) nil_chk(component)) size]) {
      removedEdges = [self removeEdgesWithEdgeExplorer:explorer withFlagEncoder:encoder withGnuTroveListTIntList:oldComponent withInt:minNetworkSize_];
      maxCount = [component size];
      oldComponent = component;
    }
    else {
      removedEdges = [self removeEdgesWithEdgeExplorer:explorer withFlagEncoder:encoder withGnuTroveListTIntList:component withInt:minNetworkSize_];
    }
    allRemoved += removedEdges;
  }
  if (allRemoved > [((id<AllEdgesIterator>) nil_chk([ghStorage_ getAllEdges])) getMaxId] / 2) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$I$I", @"Too many total edges were removed: ", allRemoved, @", all edges:", [((id<AllEdgesIterator>) nil_chk([ghStorage_ getAllEdges])) getMaxId])] autorelease];
  return allRemoved;
}

- (NSString *)toStringWithFlagEncoder:(id<FlagEncoder>)encoder
                     withEdgeIterator:(id<EdgeIterator>)iter {
  NSString *str = @"";
  while ([((id<EdgeIterator>) nil_chk(iter)) next]) {
    jint adjNode = [iter getAdjNode];
    str = JreStrcat("$$", str, JreStrcat("I$DCD$", adjNode, @" (", [((id<NodeAccess>) nil_chk([((GraphHopperStorage *) nil_chk(ghStorage_)) getNodeAccess])) getLatWithInt:adjNode], ',', [((id<NodeAccess>) nil_chk([ghStorage_ getNodeAccess])) getLonWithInt:adjNode], @"), "));
    str = JreStrcat("$$", str, JreStrcat("$D$D$", @"speed  (fwd:", [((id<FlagEncoder>) nil_chk(encoder)) getSpeedWithLong:[iter getFlags]], @", rev:", [encoder getReverseSpeedWithLong:[iter getFlags]], @"), "));
    str = JreStrcat("$$", str, JreStrcat("$Z$Z$", @"access (fwd:", [encoder isForwardWithLong:[iter getFlags]], @", rev:", [encoder isBackwardWithLong:[iter getFlags]], @"), "));
    str = JreStrcat("$$", str, JreStrcat("$D", @"distance:", [iter getDistance]));
    str = JreStrcat("$$", str, @";\n ");
  }
  return str;
}

- (jint)removeDeadEndUnvisitedNetworksWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *)bothFilter {
  StopWatch *sw = [((StopWatch *) [[[StopWatch alloc] initWithNSString:JreStrcat("@$", [((ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *) nil_chk(bothFilter)) getEncoder], @" findComponents")] autorelease]) start];
  id<EdgeFilter> outFilter = [[[DefaultEdgeFilter alloc] initWithFlagEncoder:[bothFilter getEncoder] withBoolean:NO withBoolean:YES] autorelease];
  id<EdgeExplorer> explorer = [((GraphHopperStorage *) nil_chk(ghStorage_)) createEdgeExplorerWithEdgeFilter:outFilter];
  jint nodes = [ghStorage_ getNodes];
  id<GHBitSet> ignoreSet = [[[GHBitSetImpl alloc] initWithInt:[ghStorage_ getNodes]] autorelease];
  for (jint start = 0; start < nodes; start++) {
    if (![ghStorage_ isNodeRemovedWithInt:start]) {
      id<EdgeIterator> iter = [((id<EdgeExplorer>) nil_chk(explorer)) setBaseNodeWithInt:start];
      if (![((id<EdgeIterator>) nil_chk(iter)) next]) [ignoreSet addWithInt:start];
    }
  }
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm *tarjan = [[[ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm alloc] initWithGraphHopperStorage:ghStorage_ withGHBitSet:ignoreSet withEdgeFilter:outFilter] autorelease];
  id<JavaUtilList> components = [tarjan findComponents];
  [((id<OrgSlf4jLogger>) nil_chk(logger_)) infoWithNSString:JreStrcat("@$I", [((StopWatch *) nil_chk(sw)) stop], @", size:", [((id<JavaUtilList>) nil_chk(components)) size])];
  return [self removeEdgesWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:bothFilter withJavaUtilList:components withInt:minOneWayNetworkSize_];
}

- (jint)removeEdgesWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *)bothFilter
                                                                              withJavaUtilList:(id<JavaUtilList>)components
                                                                                       withInt:(jint)min {
  id<FlagEncoder> encoder = [((ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *) nil_chk(bothFilter)) getEncoder];
  id<EdgeExplorer> explorer = [((GraphHopperStorage *) nil_chk(ghStorage_)) createEdgeExplorerWithEdgeFilter:bothFilter];
  jint removedEdges = 0;
  for (GnuTroveListArrayTIntArrayList * __strong component in nil_chk(components)) {
    removedEdges += [self removeEdgesWithEdgeExplorer:explorer withFlagEncoder:encoder withGnuTroveListTIntList:component withInt:min];
  }
  return removedEdges;
}

- (jint)removeEdgesWithEdgeExplorer:(id<EdgeExplorer>)explorer
                    withFlagEncoder:(id<FlagEncoder>)encoder
           withGnuTroveListTIntList:(id<GnuTroveListTIntList>)component
                            withInt:(jint)min {
  jint removedEdges = 0;
  if ([((id<GnuTroveListTIntList>) nil_chk(component)) size] < min) {
    for (jint i = 0; i < [component size]; i++) {
      id<EdgeIterator> edge = [((id<EdgeExplorer>) nil_chk(explorer)) setBaseNodeWithInt:[component getWithInt:i]];
      while ([((id<EdgeIterator>) nil_chk(edge)) next]) {
        [edge setFlagsWithLong:[((id<FlagEncoder>) nil_chk(encoder)) setAccessWithLong:[edge getFlags] withBoolean:NO withBoolean:NO]];
        removedEdges++;
      }
    }
  }
  return removedEdges;
}

- (void)markNodesRemovedIfUnreachable {
  id<EdgeExplorer> edgeExplorer = [((GraphHopperStorage *) nil_chk(ghStorage_)) createEdgeExplorer];
  for (jint nodeIndex = 0; nodeIndex < [ghStorage_ getNodes]; nodeIndex++) {
    if ([self detectNodeRemovedForAllEncodersWithEdgeExplorer:edgeExplorer withInt:nodeIndex]) [ghStorage_ markNodeRemovedWithInt:nodeIndex];
  }
}

- (jboolean)detectNodeRemovedForAllEncodersWithEdgeExplorer:(id<EdgeExplorer>)edgeExplorerAllEdges
                                                    withInt:(jint)nodeIndex {
  id<EdgeIterator> iter = [((id<EdgeExplorer>) nil_chk(edgeExplorerAllEdges)) setBaseNodeWithInt:nodeIndex];
  while ([((id<EdgeIterator>) nil_chk(iter)) next]) {
    for (id<FlagEncoder> __strong encoder in nil_chk(encoders_)) {
      if ([((id<FlagEncoder>) nil_chk(encoder)) isBackwardWithLong:[iter getFlags]] || [encoder isForwardWithLong:[iter getFlags]]) return NO;
    }
  }
  return YES;
}

- (void)dealloc {
  RELEASE_(logger_);
  RELEASE_(ghStorage_);
  RELEASE_(maxEdgesPerNode_);
  RELEASE_(encoders_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_set_logger_(other, logger_);
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_set_ghStorage_(other, ghStorage_);
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_set_maxEdgesPerNode_(other, maxEdgesPerNode_);
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_set_encoders_(other, encoders_);
  other->minNetworkSize_ = minNetworkSize_;
  other->minOneWayNetworkSize_ = minOneWayNetworkSize_;
  other->subnetworks_ = subnetworks_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraphHopperStorage:withJavaUtilList:", "PrepareRoutingSubnetworks", NULL, 0x1, NULL },
    { "setMinNetworkSizeWithInt:", "setMinNetworkSize", "Lcom.graphhopper.routing.subnetwork.PrepareRoutingSubnetworks;", 0x1, NULL },
    { "setMinOneWayNetworkSizeWithInt:", "setMinOneWayNetworkSize", "Lcom.graphhopper.routing.subnetwork.PrepareRoutingSubnetworks;", 0x1, NULL },
    { "doWork", NULL, "V", 0x1, NULL },
    { "getMaxSubnetworks", NULL, "I", 0x1, NULL },
    { "findSubnetworksWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:", "findSubnetworks", "Ljava.util.List;", 0x0, NULL },
    { "keepLargeNetworksWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:withJavaUtilList:", "keepLargeNetworks", "I", 0x0, NULL },
    { "toStringWithFlagEncoder:withEdgeIterator:", "toString", "Ljava.lang.String;", 0x0, NULL },
    { "removeDeadEndUnvisitedNetworksWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:", "removeDeadEndUnvisitedNetworks", "I", 0x0, NULL },
    { "removeEdgesWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter:withJavaUtilList:withInt:", "removeEdges", "I", 0x0, NULL },
    { "removeEdgesWithEdgeExplorer:withFlagEncoder:withGnuTroveListTIntList:withInt:", "removeEdges", "I", 0x0, NULL },
    { "markNodesRemovedIfUnreachable", NULL, "V", 0x0, NULL },
    { "detectNodeRemovedForAllEncodersWithEdgeExplorer:withInt:", "detectNodeRemovedForAllEncoders", "Z", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger_", NULL, 0x12, "Lorg.slf4j.Logger;", NULL,  },
    { "ghStorage_", NULL, 0x12, "Lcom.graphhopper.storage.GraphHopperStorage;", NULL,  },
    { "maxEdgesPerNode_", NULL, 0x12, "Ljava.util.concurrent.atomic.AtomicInteger;", NULL,  },
    { "encoders_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "minNetworkSize_", NULL, 0x2, "I", NULL,  },
    { "minOneWayNetworkSize_", NULL, 0x2, "I", NULL,  },
    { "subnetworks_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks = { 1, "PrepareRoutingSubnetworks", "com.graphhopper.routing.subnetwork", NULL, 0x1, 13, methods, 7, fields, 0, NULL};
  return &_ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks)

@implementation ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter

- (instancetype)initWithFlagEncoder:(id<FlagEncoder>)encoder {
  if (self = [super initWithFlagEncoder:encoder]) {
    ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter_set_encoder_PrepEdgeFilter_(self, encoder);
  }
  return self;
}

- (id<FlagEncoder>)getEncoder {
  return encoder_PrepEdgeFilter_;
}

- (void)dealloc {
  RELEASE_(encoder_PrepEdgeFilter_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter_set_encoder_PrepEdgeFilter_(other, encoder_PrepEdgeFilter_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFlagEncoder:", "PrepEdgeFilter", NULL, 0x1, NULL },
    { "getEncoder", NULL, "Lcom.graphhopper.routing.util.FlagEncoder;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "encoder_PrepEdgeFilter_", "encoder", 0x0, "Lcom.graphhopper.routing.util.FlagEncoder;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter = { 1, "PrepEdgeFilter", "com.graphhopper.routing.subnetwork", "PrepareRoutingSubnetworks", 0x8, 2, methods, 1, fields, 0, NULL};
  return &_ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_PrepEdgeFilter)

@implementation ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1

- (id<GHBitSet>)createBitSet {
  return val$bs_;
}

- (jboolean)goFurtherWithInt:(jint)nodeId {
  if (tmpCounter_ > [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->maxEdgesPerNode_)) get]) [this$0_->maxEdgesPerNode_ setWithInt:tmpCounter_];
  tmpCounter_ = 0;
  [((GnuTroveListArrayTIntArrayList *) nil_chk(val$intList_)) addWithInt:nodeId];
  return YES;
}

- (jboolean)checkAdjacentWithEdgeIteratorState:(id<EdgeIteratorState>)edge {
  if ([((id<FlagEncoder>) nil_chk(val$encoder_)) isForwardWithLong:[((id<EdgeIteratorState>) nil_chk(edge)) getFlags]] || [val$encoder_ isBackwardWithLong:[edge getFlags]]) {
    tmpCounter_++;
    return YES;
  }
  return NO;
}

- (instancetype)initWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks:(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks *)outer$
                                                                    withGHBitSet:(id<GHBitSet>)capture$0
                                              withGnuTroveListArrayTIntArrayList:(GnuTroveListArrayTIntArrayList *)capture$1
                                                                 withFlagEncoder:(id<FlagEncoder>)capture$2 {
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1_set_this$0_(self, outer$);
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1_set_val$bs_(self, capture$0);
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1_set_val$intList_(self, capture$1);
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1_set_val$encoder_(self, capture$2);
  if (self = [super init]) {
    tmpCounter_ = 0;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$bs_);
  RELEASE_(val$intList_);
  RELEASE_(val$encoder_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1 *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1_set_this$0_(other, this$0_);
  other->tmpCounter_ = tmpCounter_;
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1_set_val$bs_(other, val$bs_);
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1_set_val$intList_(other, val$intList_);
  ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1_set_val$encoder_(other, val$encoder_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createBitSet", NULL, "Lcom.graphhopper.coll.GHBitSet;", 0x4, NULL },
    { "goFurtherWithInt:", "goFurther", "Z", 0x14, NULL },
    { "checkAdjacentWithEdgeIteratorState:", "checkAdjacent", "Z", 0x14, NULL },
    { "initWithComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks:withGHBitSet:withGnuTroveListArrayTIntArrayList:withFlagEncoder:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.graphhopper.routing.subnetwork.PrepareRoutingSubnetworks;", NULL,  },
    { "tmpCounter_", NULL, 0x0, "I", NULL,  },
    { "val$bs_", NULL, 0x1012, "Lcom.graphhopper.coll.GHBitSet;", NULL,  },
    { "val$intList_", NULL, 0x1012, "Lgnu.trove.list.array.TIntArrayList;", NULL,  },
    { "val$encoder_", NULL, 0x1012, "Lcom.graphhopper.routing.util.FlagEncoder;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1 = { 1, "$1", "com.graphhopper.routing.subnetwork", "PrepareRoutingSubnetworks", 0x8000, 4, methods, 5, fields, 0, NULL};
  return &_ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingSubnetworkPrepareRoutingSubnetworks_$1)
