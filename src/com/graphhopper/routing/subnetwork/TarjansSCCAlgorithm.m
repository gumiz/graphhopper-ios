//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/subnetwork/TarjansSCCAlgorithm.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/coll/GHBitSet.h"
#include "com/graphhopper/coll/GHBitSetImpl.h"
#include "com/graphhopper/routing/subnetwork/TarjansSCCAlgorithm.h"
#include "com/graphhopper/routing/util/EdgeFilter.h"
#include "com/graphhopper/storage/GraphHopperStorage.h"
#include "com/graphhopper/util/EdgeExplorer.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "gnu/trove/list/array/TIntArrayList.h"
#include "gnu/trove/stack/array/TIntArrayStack.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Stack.h"

__attribute__((unused)) static void ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_strongConnectWithInt_(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm *self, jint firstNode);

@interface ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm () {
 @public
  JavaUtilArrayList *components_;
  GraphHopperStorage *graph_;
  GnuTroveStackArrayTIntArrayStack *nodeStack_;
  id<GHBitSet> onStack_;
  id<GHBitSet> ignoreSet_;
  IOSIntArray *nodeIndex_;
  IOSIntArray *nodeLowLink_;
  id<EdgeFilter> edgeFilter_;
  jint index_;
}

/**
 @brief Find all components reachable from firstNode, add them to 'components' <p>
 @param firstNode start search of SCC at this node
 */
- (void)strongConnectWithInt:(jint)firstNode;
@end

J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm, components_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm, graph_, GraphHopperStorage *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm, nodeStack_, GnuTroveStackArrayTIntArrayStack *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm, onStack_, id<GHBitSet>)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm, ignoreSet_, id<GHBitSet>)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm, nodeIndex_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm, nodeLowLink_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm, edgeFilter_, id<EdgeFilter>)

@interface ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState ()
- (instancetype)initWithInt:(jint)start
           withEdgeIterator:(id<EdgeIterator>)iter;
@end

@implementation ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm

- (instancetype)initWithGraphHopperStorage:(GraphHopperStorage *)graph
                              withGHBitSet:(id<GHBitSet>)ignoreSet
                            withEdgeFilter:(id<EdgeFilter>)edgeFilter {
  if (self = [super init]) {
    ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_setAndConsume_components_(self, [[JavaUtilArrayList alloc] init]);
    index_ = 1;
    ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_graph_(self, graph);
    ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_setAndConsume_nodeStack_(self, [[GnuTroveStackArrayTIntArrayStack alloc] init]);
    ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_setAndConsume_onStack_(self, [[GHBitSetImpl alloc] initWithInt:[((GraphHopperStorage *) nil_chk(graph)) getNodes]]);
    ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_setAndConsume_nodeIndex_(self, [IOSIntArray newArrayWithLength:[graph getNodes]]);
    ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_setAndConsume_nodeLowLink_(self, [IOSIntArray newArrayWithLength:[graph getNodes]]);
    ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_edgeFilter_(self, edgeFilter);
    ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_ignoreSet_(self, ignoreSet);
  }
  return self;
}

- (id<JavaUtilList>)findComponents {
  jint nodes = [((GraphHopperStorage *) nil_chk(graph_)) getNodes];
  for (jint start = 0; start < nodes; start++) {
    if (IOSIntArray_Get(nil_chk(nodeIndex_), start) == 0 && ![((id<GHBitSet>) nil_chk(ignoreSet_)) containsWithInt:start] && ![graph_ isNodeRemovedWithInt:start]) ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_strongConnectWithInt_(self, start);
  }
  return components_;
}

- (void)strongConnectWithInt:(jint)firstNode {
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_strongConnectWithInt_(self, firstNode);
}

- (void)dealloc {
  RELEASE_(components_);
  RELEASE_(graph_);
  RELEASE_(nodeStack_);
  RELEASE_(onStack_);
  RELEASE_(ignoreSet_);
  RELEASE_(nodeIndex_);
  RELEASE_(nodeLowLink_);
  RELEASE_(edgeFilter_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_components_(other, components_);
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_graph_(other, graph_);
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_nodeStack_(other, nodeStack_);
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_onStack_(other, onStack_);
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_ignoreSet_(other, ignoreSet_);
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_nodeIndex_(other, nodeIndex_);
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_nodeLowLink_(other, nodeLowLink_);
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_set_edgeFilter_(other, edgeFilter_);
  other->index_ = index_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraphHopperStorage:withGHBitSet:withEdgeFilter:", "TarjansSCCAlgorithm", NULL, 0x1, NULL },
    { "findComponents", NULL, "Ljava.util.List;", 0x1, NULL },
    { "strongConnectWithInt:", "strongConnect", "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "components_", NULL, 0x12, "Ljava.util.ArrayList;", NULL,  },
    { "graph_", NULL, 0x12, "Lcom.graphhopper.storage.GraphHopperStorage;", NULL,  },
    { "nodeStack_", NULL, 0x12, "Lgnu.trove.stack.array.TIntArrayStack;", NULL,  },
    { "onStack_", NULL, 0x12, "Lcom.graphhopper.coll.GHBitSet;", NULL,  },
    { "ignoreSet_", NULL, 0x12, "Lcom.graphhopper.coll.GHBitSet;", NULL,  },
    { "nodeIndex_", NULL, 0x12, "[I", NULL,  },
    { "nodeLowLink_", NULL, 0x12, "[I", NULL,  },
    { "edgeFilter_", NULL, 0x12, "Lcom.graphhopper.routing.util.EdgeFilter;", NULL,  },
    { "index_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm = { 1, "TarjansSCCAlgorithm", "com.graphhopper.routing.subnetwork", NULL, 0x1, 3, methods, 9, fields, 0, NULL};
  return &_ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm;
}

@end

void ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_strongConnectWithInt_(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm *self, jint firstNode) {
  JavaUtilStack *stateStack = [[[JavaUtilStack alloc] init] autorelease];
  [stateStack pushWithId:ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_startStateWithInt_(firstNode)];
  while (![stateStack empty]) {
    {
      ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *state = [stateStack pop];
      jint start = ((ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *) nil_chk(state))->start_;
      id<EdgeIterator> iter;
      if ([state isStart]) {
        *IOSIntArray_GetRef(nil_chk(self->nodeIndex_), start) = self->index_;
        *IOSIntArray_GetRef(nil_chk(self->nodeLowLink_), start) = self->index_;
        self->index_++;
        [((GnuTroveStackArrayTIntArrayStack *) nil_chk(self->nodeStack_)) pushWithInt:start];
        [((id<GHBitSet>) nil_chk(self->onStack_)) addWithInt:start];
        iter = [((id<EdgeExplorer>) nil_chk([((GraphHopperStorage *) nil_chk(self->graph_)) createEdgeExplorerWithEdgeFilter:self->edgeFilter_])) setBaseNodeWithInt:start];
      }
      else {
        iter = state->iter_;
        jint prevConnectedId = [((id<EdgeIterator>) nil_chk(iter)) getAdjNode];
        *IOSIntArray_GetRef(nil_chk(self->nodeLowLink_), start) = JavaLangMath_minWithInt_withInt_(IOSIntArray_Get(self->nodeLowLink_, start), IOSIntArray_Get(self->nodeLowLink_, prevConnectedId));
      }
      while ([((id<EdgeIterator>) nil_chk(iter)) next]) {
        jint connectedId = [iter getAdjNode];
        if ([((id<GHBitSet>) nil_chk(self->ignoreSet_)) containsWithInt:start]) continue;
        if (IOSIntArray_Get(nil_chk(self->nodeIndex_), connectedId) == 0) {
          [stateStack pushWithId:ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_resumeStateWithInt_withEdgeIterator_(start, iter)];
          [stateStack pushWithId:ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_startStateWithInt_(connectedId)];
          goto continue_nextState;
        }
        else if ([((id<GHBitSet>) nil_chk(self->onStack_)) containsWithInt:connectedId]) {
          *IOSIntArray_GetRef(nil_chk(self->nodeLowLink_), start) = JavaLangMath_minWithInt_withInt_(IOSIntArray_Get(self->nodeLowLink_, start), IOSIntArray_Get(self->nodeIndex_, connectedId));
        }
      }
      if (IOSIntArray_Get(nil_chk(self->nodeIndex_), start) == IOSIntArray_Get(nil_chk(self->nodeLowLink_), start)) {
        GnuTroveListArrayTIntArrayList *component = [[[GnuTroveListArrayTIntArrayList alloc] init] autorelease];
        jint node;
        while ((node = [((GnuTroveStackArrayTIntArrayStack *) nil_chk(self->nodeStack_)) pop]) != start) {
          [component addWithInt:node];
          [((id<GHBitSet>) nil_chk(self->onStack_)) removeWithInt:node];
        }
        [component addWithInt:start];
        [component trimToSize];
        [((id<GHBitSet>) nil_chk(self->onStack_)) removeWithInt:start];
        [((JavaUtilArrayList *) nil_chk(self->components_)) addWithId:component];
      }
    }
    continue_nextState: ;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm)

@implementation ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState

- (instancetype)initWithInt:(jint)start
           withEdgeIterator:(id<EdgeIterator>)iter {
  if (self = [super init]) {
    self->start_ = start;
    ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_set_iter_(self, iter);
  }
  return self;
}

+ (ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *)startStateWithInt:(jint)start {
  return ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_startStateWithInt_(start);
}

+ (ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *)resumeStateWithInt:(jint)start
                                                                      withEdgeIterator:(id<EdgeIterator>)iter {
  return ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_resumeStateWithInt_withEdgeIterator_(start, iter);
}

- (jboolean)isStart {
  return iter_ == nil;
}

- (void)dealloc {
  RELEASE_(iter_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *)other {
  [super copyAllFieldsTo:other];
  other->start_ = start_;
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_set_iter_(other, iter_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withEdgeIterator:", "TarjanState", NULL, 0x2, NULL },
    { "startStateWithInt:", "startState", "Lcom.graphhopper.routing.subnetwork.TarjansSCCAlgorithm$TarjanState;", 0x9, NULL },
    { "resumeStateWithInt:withEdgeIterator:", "resumeState", "Lcom.graphhopper.routing.subnetwork.TarjansSCCAlgorithm$TarjanState;", 0x9, NULL },
    { "isStart", NULL, "Z", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "start_", NULL, 0x10, "I", NULL,  },
    { "iter_", NULL, 0x10, "Lcom.graphhopper.util.EdgeIterator;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState = { 1, "TarjanState", "com.graphhopper.routing.subnetwork", "TarjansSCCAlgorithm", 0xa, 4, methods, 2, fields, 0, NULL};
  return &_ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState;
}

@end

ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_startStateWithInt_(jint start) {
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_init();
  return [[[ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState alloc] initWithInt:start withEdgeIterator:nil] autorelease];
}

ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_resumeStateWithInt_withEdgeIterator_(jint start, id<EdgeIterator> iter) {
  ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_init();
  return [[[ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState alloc] initWithInt:start withEdgeIterator:iter] autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState)
