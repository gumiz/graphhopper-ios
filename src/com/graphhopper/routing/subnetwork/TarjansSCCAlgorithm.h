//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/subnetwork/TarjansSCCAlgorithm.java
//

#ifndef _ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_H_
#define _ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_H_

@class GnuTroveStackArrayTIntArrayStack;
@class GraphHopperStorage;
@class IOSIntArray;
@class JavaUtilArrayList;
@protocol EdgeFilter;
@protocol EdgeIterator;
@protocol GHBitSet;
@protocol JavaUtilList;

#include "J2ObjC_header.h"

/**
 @brief Implementation of Tarjan's algorithm using an explicit stack.
 The traditional recursive approach runs into stack overflow pretty quickly. The algorithm is used within GraphHopper to find strongly connected components to detect dead-ends leading to routes not found. <p> See http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm. See http://www.timl.id.au/?p=327 and http://homepages.ecs.vuw.ac.nz/~djp/files/P05.pdf
 */
@interface ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm : NSObject {
}

- (instancetype)initWithGraphHopperStorage:(GraphHopperStorage *)graph
                              withGHBitSet:(id<GHBitSet>)ignoreSet
                            withEdgeFilter:(id<EdgeFilter>)edgeFilter;

/**
 @brief Find and return list of all strongly connected components in g.
 */
- (id<JavaUtilList>)findComponents;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm)

/**
 @brief Internal stack state of algorithm, used to avoid recursive function calls and hitting stack overflow exceptions.
 State is either 'start' for new nodes or 'resume' for partially traversed nodes.
 */
@interface ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState : NSObject {
 @public
  jint start_;
  id<EdgeIterator> iter_;
}

+ (ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *)startStateWithInt:(jint)start;

+ (ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *)resumeStateWithInt:(jint)start
                                                                      withEdgeIterator:(id<EdgeIterator>)iter;

- (jboolean)isStart;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState)

J2OBJC_FIELD_SETTER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState, iter_, id<EdgeIterator>)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_startStateWithInt_(jint start);

FOUNDATION_EXPORT ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState *ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState_resumeStateWithInt_withEdgeIterator_(jint start, id<EdgeIterator> iter);
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_TarjanState)

#endif // _ComGraphhopperRoutingSubnetworkTarjansSCCAlgorithm_H_
