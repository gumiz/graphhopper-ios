//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/Dijkstra.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/AbstractRoutingAlgorithm.h"
#include "com/graphhopper/routing/Dijkstra.h"
#include "com/graphhopper/routing/Path.h"
#include "com/graphhopper/routing/util/TraversalMode.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/storage/SPTEntry.h"
#include "com/graphhopper/util/EdgeExplorer.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/Parameters.h"
#include "gnu/trove/map/TIntObjectMap.h"
#include "gnu/trove/map/hash/TIntObjectHashMap.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/PriorityQueue.h"

@interface Dijkstra () {
 @public
  jint visitedNodes_;
  jint to_;
}
@end

@implementation Dijkstra

- (instancetype)initWithGraph:(id<Graph>)graph
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
        withTraversalModeEnum:(TraversalModeEnum *)tMode {
  if (self = [super initWithGraph:graph withComGraphhopperRoutingWeightingWeighting:weighting withTraversalModeEnum:tMode]) {
    to_ = -1;
    jint size = JavaLangMath_minWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(200, [((id<Graph>) nil_chk(graph)) getNodes] / 10), 2000);
    [self initCollectionsWithInt:size];
  }
  return self;
}

- (void)initCollectionsWithInt:(jint)size {
  Dijkstra_setAndConsume_fromHeap_(self, [[JavaUtilPriorityQueue alloc] initWithInt:size]);
  Dijkstra_setAndConsume_fromMap_(self, [[GnuTroveMapHashTIntObjectHashMap alloc] initWithInt:size]);
}

- (Path *)calcPathWithInt:(jint)from
                  withInt:(jint)to {
  [self checkAlreadyRun];
  self->to_ = to;
  Dijkstra_set_currEdge_(self, [self createSPTEntryWithInt:from withDouble:0]);
  if (![((TraversalModeEnum *) nil_chk(traversalMode_)) isEdgeBased]) {
    [((id<GnuTroveMapTIntObjectMap>) nil_chk(fromMap_)) putWithInt:from withId:currEdge_];
  }
  [self runAlgo];
  return [self extractPath];
}

- (void)runAlgo {
  id<EdgeExplorer> explorer = outEdgeExplorer_;
  while (YES) {
    visitedNodes_++;
    if ([self isMaxVisitedNodesExceeded] || [self finished]) break;
    jint startNode = ((SPTEntry *) nil_chk(currEdge_))->adjNode_;
    id<EdgeIterator> iter = [((id<EdgeExplorer>) nil_chk(explorer)) setBaseNodeWithInt:startNode];
    while ([((id<EdgeIterator>) nil_chk(iter)) next]) {
      if (![self acceptWithEdgeIterator:iter withInt:currEdge_->edge_]) continue;
      jint traversalId = [((TraversalModeEnum *) nil_chk(traversalMode_)) createTraversalIdWithEdgeIteratorState:iter withBoolean:NO];
      jdouble tmpWeight = [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(weighting_)) calcWeightWithEdgeIteratorState:iter withBoolean:NO withInt:currEdge_->edge_] + currEdge_->weight_;
      if (JavaLangDouble_isInfiniteWithDouble_(tmpWeight)) continue;
      SPTEntry *nEdge = [((id<GnuTroveMapTIntObjectMap>) nil_chk(fromMap_)) getWithInt:traversalId];
      if (nEdge == nil) {
        nEdge = [[[SPTEntry alloc] initWithInt:[iter getEdge] withInt:[iter getAdjNode] withDouble:tmpWeight] autorelease];
        SPTEntry_set_parent_(nEdge, currEdge_);
        [fromMap_ putWithInt:traversalId withId:nEdge];
        [((JavaUtilPriorityQueue *) nil_chk(fromHeap_)) addWithId:nEdge];
      }
      else if (nEdge->weight_ > tmpWeight) {
        [((JavaUtilPriorityQueue *) nil_chk(fromHeap_)) removeWithId:nEdge];
        nEdge->edge_ = [iter getEdge];
        nEdge->weight_ = tmpWeight;
        SPTEntry_set_parent_(nEdge, currEdge_);
        [fromHeap_ addWithId:nEdge];
      }
      else continue;
      [self updateBestPathWithEdgeIteratorState:iter withSPTEntry:nEdge withInt:traversalId];
    }
    if ([((JavaUtilPriorityQueue *) nil_chk(fromHeap_)) isEmpty]) break;
    Dijkstra_set_currEdge_(self, [fromHeap_ poll]);
    if (currEdge_ == nil) @throw [[[JavaLangAssertionError alloc] initWithId:@"Empty edge cannot happen"] autorelease];
  }
}

- (jboolean)finished {
  return ((SPTEntry *) nil_chk(currEdge_))->adjNode_ == to_;
}

- (Path *)extractPath {
  if (currEdge_ == nil || ![self finished]) return [self createEmptyPath];
  return [((Path *) nil_chk([((Path *) nil_chk([((Path *) [[[Path alloc] initWithGraph:graph_ withComGraphhopperRoutingWeightingWeighting:weighting_] autorelease]) setWeightWithDouble:((SPTEntry *) nil_chk(currEdge_))->weight_])) setSPTEntryWithSPTEntry:currEdge_])) extract];
}

- (jint)getVisitedNodes {
  return visitedNodes_;
}

- (NSString *)getName {
  return Parameters_Algorithms_get_DIJKSTRA_();
}

- (void)dealloc {
  RELEASE_(fromMap_);
  RELEASE_(fromHeap_);
  RELEASE_(currEdge_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(Dijkstra *)other {
  [super copyAllFieldsTo:other];
  Dijkstra_set_fromMap_(other, fromMap_);
  Dijkstra_set_fromHeap_(other, fromHeap_);
  Dijkstra_set_currEdge_(other, currEdge_);
  other->visitedNodes_ = visitedNodes_;
  other->to_ = to_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraph:withComGraphhopperRoutingWeightingWeighting:withTraversalModeEnum:", "Dijkstra", NULL, 0x1, NULL },
    { "initCollectionsWithInt:", "initCollections", "V", 0x4, NULL },
    { "calcPathWithInt:withInt:", "calcPath", "Lcom.graphhopper.routing.Path;", 0x1, NULL },
    { "runAlgo", NULL, "V", 0x4, NULL },
    { "finished", NULL, "Z", 0x4, NULL },
    { "extractPath", NULL, "Lcom.graphhopper.routing.Path;", 0x4, NULL },
    { "getVisitedNodes", NULL, "I", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fromMap_", NULL, 0x4, "Lgnu.trove.map.TIntObjectMap;", NULL,  },
    { "fromHeap_", NULL, 0x4, "Ljava.util.PriorityQueue;", NULL,  },
    { "currEdge_", NULL, 0x4, "Lcom.graphhopper.storage.SPTEntry;", NULL,  },
    { "visitedNodes_", NULL, 0x2, "I", NULL,  },
    { "to_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _Dijkstra = { 1, "Dijkstra", "com.graphhopper.routing", NULL, 0x1, 8, methods, 5, fields, 0, NULL};
  return &_Dijkstra;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Dijkstra)
