//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/VirtualEdgeIteratorState.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/util/CHEdgeIteratorState.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/PointList.h"
#include "java/lang/UnsupportedOperationException.h"

@interface VirtualEdgeIteratorState () {
 @public
  PointList *pointList_;
  jint edgeId_;
  jint baseNode_;
  jint adjNode_;
  jint originalTraversalKey_;
  jdouble distance_;
  jlong flags_;
  NSString *name_;
  jboolean unfavored_;
}
@end

J2OBJC_FIELD_SETTER(VirtualEdgeIteratorState, pointList_, PointList *)
J2OBJC_FIELD_SETTER(VirtualEdgeIteratorState, name_, NSString *)

@implementation VirtualEdgeIteratorState

- (instancetype)initWithInt:(jint)originalTraversalKey
                    withInt:(jint)edgeId
                    withInt:(jint)baseNode
                    withInt:(jint)adjNode
                 withDouble:(jdouble)distance
                   withLong:(jlong)flags
               withNSString:(NSString *)name
              withPointList:(PointList *)pointList {
  if (self = [super init]) {
    self->originalTraversalKey_ = originalTraversalKey;
    self->edgeId_ = edgeId;
    self->baseNode_ = baseNode;
    self->adjNode_ = adjNode;
    self->distance_ = distance;
    self->flags_ = flags;
    VirtualEdgeIteratorState_set_name_(self, name);
    VirtualEdgeIteratorState_set_pointList_(self, pointList);
  }
  return self;
}

- (jint)getOriginalTraversalKey {
  return originalTraversalKey_;
}

- (jint)getEdge {
  return edgeId_;
}

- (jint)getBaseNode {
  return baseNode_;
}

- (jint)getAdjNode {
  return adjNode_;
}

- (PointList *)fetchWayGeometryWithInt:(jint)mode {
  if ([((PointList *) nil_chk(pointList_)) getSize] == 0) return PointList_get_EMPTY_();
  if (mode == 3) return [pointList_ cloneWithBoolean:NO];
  else if (mode == 1) return [pointList_ copy__WithInt:0 withInt:[pointList_ getSize] - 1];
  else if (mode == 2) return [pointList_ copy__WithInt:1 withInt:[pointList_ getSize]];
  else if (mode == 0) {
    if ([pointList_ getSize] == 1) return PointList_get_EMPTY_();
    return [pointList_ copy__WithInt:1 withInt:[pointList_ getSize] - 1];
  }
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:JreStrcat("$I", @"Illegal mode:", mode)] autorelease];
}

- (id<EdgeIteratorState>)setWayGeometryWithPointList:(PointList *)list {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported for virtual edge. Set when creating it."] autorelease];
}

- (jdouble)getDistance {
  return distance_;
}

- (id<EdgeIteratorState>)setDistanceWithDouble:(jdouble)dist {
  self->distance_ = dist;
  return self;
}

- (jlong)getFlags {
  return flags_;
}

- (id<EdgeIteratorState>)setFlagsWithLong:(jlong)flags {
  self->flags_ = flags;
  return self;
}

- (NSString *)getName {
  return name_;
}

- (id<EdgeIteratorState>)setNameWithNSString:(NSString *)name {
  VirtualEdgeIteratorState_set_name_(self, name);
  return self;
}

- (jboolean)getBoolWithInt:(jint)key
               withBoolean:(jboolean)_default {
  if (key == EdgeIteratorState_K_UNFAVORED_EDGE) return unfavored_;
  return _default;
}

- (void)setUnfavoredWithBoolean:(jboolean)unfavored {
  self->unfavored_ = unfavored;
}

- (NSString *)description {
  return JreStrcat("I$I", baseNode_, @"->", adjNode_);
}

- (jboolean)isShortcut {
  return NO;
}

- (jboolean)isForwardWithFlagEncoder:(id<FlagEncoder>)encoder {
  return [((id<FlagEncoder>) nil_chk(encoder)) isForwardWithLong:[self getFlags]];
}

- (jboolean)isBackwardWithFlagEncoder:(id<FlagEncoder>)encoder {
  return [((id<FlagEncoder>) nil_chk(encoder)) isBackwardWithLong:[self getFlags]];
}

- (jint)getAdditionalField {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (jboolean)canBeOverwrittenWithLong:(jlong)flags {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (jint)getSkippedEdge1 {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (jint)getSkippedEdge2 {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (void)setSkippedEdgesWithInt:(jint)edge1
                       withInt:(jint)edge2 {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (id<EdgeIteratorState>)detachWithBoolean:(jboolean)reverse {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (id<EdgeIteratorState>)setAdditionalFieldWithInt:(jint)value {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (id<EdgeIteratorState>)copyPropertiesToWithEdgeIteratorState:(id<EdgeIteratorState>)edge {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (id<CHEdgeIteratorState>)setWeightWithDouble:(jdouble)weight {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (jdouble)getWeight {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (void)dealloc {
  RELEASE_(pointList_);
  RELEASE_(name_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(VirtualEdgeIteratorState *)other {
  [super copyAllFieldsTo:other];
  VirtualEdgeIteratorState_set_pointList_(other, pointList_);
  other->edgeId_ = edgeId_;
  other->baseNode_ = baseNode_;
  other->adjNode_ = adjNode_;
  other->originalTraversalKey_ = originalTraversalKey_;
  other->distance_ = distance_;
  other->flags_ = flags_;
  VirtualEdgeIteratorState_set_name_(other, name_);
  other->unfavored_ = unfavored_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:withInt:withDouble:withLong:withNSString:withPointList:", "VirtualEdgeIteratorState", NULL, 0x1, NULL },
    { "getOriginalTraversalKey", NULL, "I", 0x1, NULL },
    { "getEdge", NULL, "I", 0x1, NULL },
    { "getBaseNode", NULL, "I", 0x1, NULL },
    { "getAdjNode", NULL, "I", 0x1, NULL },
    { "fetchWayGeometryWithInt:", "fetchWayGeometry", "Lcom.graphhopper.util.PointList;", 0x1, NULL },
    { "setWayGeometryWithPointList:", "setWayGeometry", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getDistance", NULL, "D", 0x1, NULL },
    { "setDistanceWithDouble:", "setDistance", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getFlags", NULL, "J", 0x1, NULL },
    { "setFlagsWithLong:", "setFlags", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setNameWithNSString:", "setName", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getBoolWithInt:withBoolean:", "getBool", "Z", 0x1, NULL },
    { "setUnfavoredWithBoolean:", "setUnfavored", "V", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "isShortcut", NULL, "Z", 0x1, NULL },
    { "isForwardWithFlagEncoder:", "isForward", "Z", 0x1, NULL },
    { "isBackwardWithFlagEncoder:", "isBackward", "Z", 0x1, NULL },
    { "getAdditionalField", NULL, "I", 0x1, NULL },
    { "canBeOverwrittenWithLong:", "canBeOverwritten", "Z", 0x1, NULL },
    { "getSkippedEdge1", NULL, "I", 0x1, NULL },
    { "getSkippedEdge2", NULL, "I", 0x1, NULL },
    { "setSkippedEdgesWithInt:withInt:", "setSkippedEdges", "V", 0x1, NULL },
    { "detachWithBoolean:", "detach", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "setAdditionalFieldWithInt:", "setAdditionalField", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "copyPropertiesToWithEdgeIteratorState:", "copyPropertiesTo", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "setWeightWithDouble:", "setWeight", "Lcom.graphhopper.util.CHEdgeIteratorState;", 0x1, NULL },
    { "getWeight", NULL, "D", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pointList_", NULL, 0x12, "Lcom.graphhopper.util.PointList;", NULL,  },
    { "edgeId_", NULL, 0x12, "I", NULL,  },
    { "baseNode_", NULL, 0x12, "I", NULL,  },
    { "adjNode_", NULL, 0x12, "I", NULL,  },
    { "originalTraversalKey_", NULL, 0x12, "I", NULL,  },
    { "distance_", NULL, 0x2, "D", NULL,  },
    { "flags_", NULL, 0x2, "J", NULL,  },
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "unfavored_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _VirtualEdgeIteratorState = { 1, "VirtualEdgeIteratorState", "com.graphhopper.routing", NULL, 0x1, 29, methods, 9, fields, 0, NULL};
  return &_VirtualEdgeIteratorState;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(VirtualEdgeIteratorState)
