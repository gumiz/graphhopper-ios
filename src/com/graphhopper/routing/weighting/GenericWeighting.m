//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/weighting/GenericWeighting.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/DataFlagEncoder.h"
#include "com/graphhopper/routing/weighting/GenericWeighting.h"
#include "com/graphhopper/util/ConfigMap.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/Parameters.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/Map.h"

@interface ComGraphhopperRoutingWeightingGenericWeighting () {
 @public
  jdouble headingPenalty_;
  jlong headingPenaltyMillis_;
  jdouble maxSpeed_;
  DataFlagEncoder *gEncoder_;
  IOSDoubleArray *speedArray_;
  jint accessType_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperRoutingWeightingGenericWeighting, gEncoder_, DataFlagEncoder *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingWeightingGenericWeighting, speedArray_, IOSDoubleArray *)

@implementation ComGraphhopperRoutingWeightingGenericWeighting

- (instancetype)initWithDataFlagEncoder:(DataFlagEncoder *)encoder
                          withConfigMap:(ConfigMap *)cMap {
  if (self = [super initWithFlagEncoder:encoder]) {
    ComGraphhopperRoutingWeightingGenericWeighting_set_gEncoder_(self, encoder);
    headingPenalty_ = [((ConfigMap *) nil_chk(cMap)) getDoubleWithNSString:Parameters_Routing_get_HEADING_PENALTY_() withDouble:Parameters_Routing_DEFAULT_HEADING_PENALTY];
    headingPenaltyMillis_ = JavaLangMath_roundWithDouble_(headingPenalty_ * 1000);
    ComGraphhopperRoutingWeightingGenericWeighting_set_speedArray_(self, [((DataFlagEncoder *) nil_chk(gEncoder_)) getHighwaySpeedMapWithJavaUtilMap:[cMap getMapWithNSString:@"highways" withIOSClass:JavaLangDouble_class_()]]);
    jdouble tmpSpeed = 0;
    {
      IOSDoubleArray *a__ = speedArray_;
      jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
      jdouble const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jdouble speed = *b__++;
        if (speed > tmpSpeed) tmpSpeed = speed;
      }
    }
    if (tmpSpeed > [((DataFlagEncoder *) nil_chk(encoder)) getMaxPossibleSpeed]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$D$D", @"Speed bigger than maximum speed: ", tmpSpeed, @" > ", [encoder getMaxPossibleSpeed])] autorelease];
    maxSpeed_ = tmpSpeed / ComGraphhopperRoutingWeightingGenericWeighting_SPEED_CONV;
    accessType_ = [gEncoder_ getAccessTypeWithNSString:@"motor_vehicle"];
  }
  return self;
}

- (jdouble)getMinWeightWithDouble:(jdouble)distance {
  return distance / maxSpeed_;
}

- (jdouble)calcWeightWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                               withBoolean:(jboolean)reverse
                                   withInt:(jint)prevOrNextEdgeId {
  if (reverse) {
    if (![((DataFlagEncoder *) nil_chk(gEncoder_)) isBackwardWithEdgeIteratorState:edgeState withInt:accessType_]) return JavaLangDouble_POSITIVE_INFINITY;
  }
  else if (![((DataFlagEncoder *) nil_chk(gEncoder_)) isForwardWithEdgeIteratorState:edgeState withInt:accessType_]) return JavaLangDouble_POSITIVE_INFINITY;
  jlong time = [self calcMillisWithEdgeIteratorState:edgeState withBoolean:reverse withInt:prevOrNextEdgeId];
  if (time == JavaLangLong_MAX_VALUE) return JavaLangDouble_POSITIVE_INFINITY;
  return time;
}

- (jlong)calcMillisWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                             withBoolean:(jboolean)reverse
                                 withInt:(jint)prevOrNextEdgeId {
  jint highwayVal = [((DataFlagEncoder *) nil_chk(gEncoder_)) getHighwayWithEdgeIteratorState:edgeState];
  jdouble speed = IOSDoubleArray_Get(nil_chk(speedArray_), highwayVal);
  if (speed < 0) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$I$I$Z", @"speed was negative? ", [((id<EdgeIteratorState>) nil_chk(edgeState)) getEdge], @", highway:", highwayVal, @", reverse:", reverse)] autorelease];
  if (speed == 0) return JavaLangLong_MAX_VALUE;
  jdouble maxspeed = [gEncoder_ getMaxspeedWithEdgeIteratorState:edgeState withInt:accessType_ withBoolean:reverse];
  if (maxspeed > 0 && speed > maxspeed) speed = maxspeed;
  jlong timeInMillis = J2ObjCFpToLong(([((id<EdgeIteratorState>) nil_chk(edgeState)) getDistance] / speed * ComGraphhopperRoutingWeightingGenericWeighting_SPEED_CONV));
  jboolean unfavoredEdge = [edgeState getBoolWithInt:EdgeIteratorState_K_UNFAVORED_EDGE withBoolean:NO];
  if (unfavoredEdge) timeInMillis += headingPenaltyMillis_;
  if (timeInMillis < 0) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$J$D", @"Some problem with weight calculation: time:", timeInMillis, @", speed:", speed)] autorelease];
  return timeInMillis;
}

- (NSString *)getName {
  return @"generic";
}

- (void)dealloc {
  RELEASE_(gEncoder_);
  RELEASE_(speedArray_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingWeightingGenericWeighting *)other {
  [super copyAllFieldsTo:other];
  other->headingPenalty_ = headingPenalty_;
  other->headingPenaltyMillis_ = headingPenaltyMillis_;
  other->maxSpeed_ = maxSpeed_;
  ComGraphhopperRoutingWeightingGenericWeighting_set_gEncoder_(other, gEncoder_);
  ComGraphhopperRoutingWeightingGenericWeighting_set_speedArray_(other, speedArray_);
  other->accessType_ = accessType_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDataFlagEncoder:withConfigMap:", "GenericWeighting", NULL, 0x1, NULL },
    { "getMinWeightWithDouble:", "getMinWeight", "D", 0x1, NULL },
    { "calcWeightWithEdgeIteratorState:withBoolean:withInt:", "calcWeight", "D", 0x1, NULL },
    { "calcMillisWithEdgeIteratorState:withBoolean:withInt:", "calcMillis", "J", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SPEED_CONV_", NULL, 0x1c, "D", NULL, .constantValue.asDouble = ComGraphhopperRoutingWeightingGenericWeighting_SPEED_CONV },
    { "headingPenalty_", NULL, 0x12, "D", NULL,  },
    { "headingPenaltyMillis_", NULL, 0x12, "J", NULL,  },
    { "maxSpeed_", NULL, 0x12, "D", NULL,  },
    { "gEncoder_", NULL, 0x12, "Lcom.graphhopper.routing.util.DataFlagEncoder;", NULL,  },
    { "speedArray_", NULL, 0x12, "[D", NULL,  },
    { "accessType_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingWeightingGenericWeighting = { 1, "GenericWeighting", "com.graphhopper.routing.weighting", NULL, 0x1, 5, methods, 7, fields, 0, NULL};
  return &_ComGraphhopperRoutingWeightingGenericWeighting;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingWeightingGenericWeighting)
