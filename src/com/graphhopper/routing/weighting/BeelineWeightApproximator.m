//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/weighting/BeelineWeightApproximator.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/weighting/BeelineWeightApproximator.h"
#include "com/graphhopper/routing/weighting/WeightApproximator.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/NodeAccess.h"
#include "com/graphhopper/util/DistanceCalc.h"
#include "com/graphhopper/util/Helper.h"

@interface ComGraphhopperRoutingWeightingBeelineWeightApproximator () {
 @public
  id<NodeAccess> nodeAccess_;
  id<ComGraphhopperRoutingWeightingWeighting> weighting_;
  id<DistanceCalc> distanceCalc_;
  jdouble toLat_, toLon_;
  jdouble epsilon_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperRoutingWeightingBeelineWeightApproximator, nodeAccess_, id<NodeAccess>)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingWeightingBeelineWeightApproximator, weighting_, id<ComGraphhopperRoutingWeightingWeighting>)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingWeightingBeelineWeightApproximator, distanceCalc_, id<DistanceCalc>)

@implementation ComGraphhopperRoutingWeightingBeelineWeightApproximator

- (instancetype)initWithNodeAccess:(id<NodeAccess>)nodeAccess
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting {
  if (self = [super init]) {
    ComGraphhopperRoutingWeightingBeelineWeightApproximator_set_distanceCalc_(self, Helper_get_DIST_EARTH_());
    epsilon_ = 1;
    ComGraphhopperRoutingWeightingBeelineWeightApproximator_set_nodeAccess_(self, nodeAccess);
    ComGraphhopperRoutingWeightingBeelineWeightApproximator_set_weighting_(self, weighting);
  }
  return self;
}

- (void)setGoalNodeWithInt:(jint)toNode {
  toLat_ = [((id<NodeAccess>) nil_chk(nodeAccess_)) getLatitudeWithInt:toNode];
  toLon_ = [nodeAccess_ getLongitudeWithInt:toNode];
}

- (id<ComGraphhopperRoutingWeightingWeightApproximator>)setEpsilonWithDouble:(jdouble)epsilon {
  self->epsilon_ = epsilon;
  return self;
}

- (id<ComGraphhopperRoutingWeightingWeightApproximator>)duplicate {
  return [((ComGraphhopperRoutingWeightingBeelineWeightApproximator *) nil_chk([((ComGraphhopperRoutingWeightingBeelineWeightApproximator *) [[[ComGraphhopperRoutingWeightingBeelineWeightApproximator alloc] initWithNodeAccess:nodeAccess_ withComGraphhopperRoutingWeightingWeighting:weighting_] autorelease]) setDistanceCalcWithDistanceCalc:distanceCalc_])) setEpsilonWithDouble:epsilon_];
}

- (jdouble)approximateWithInt:(jint)fromNode {
  jdouble fromLat = [((id<NodeAccess>) nil_chk(nodeAccess_)) getLatitudeWithInt:fromNode];
  jdouble fromLon = [nodeAccess_ getLongitudeWithInt:fromNode];
  jdouble dist2goal = [((id<DistanceCalc>) nil_chk(distanceCalc_)) calcDistWithDouble:toLat_ withDouble:toLon_ withDouble:fromLat withDouble:fromLon];
  jdouble weight2goal = [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(weighting_)) getMinWeightWithDouble:dist2goal];
  return weight2goal * epsilon_;
}

- (ComGraphhopperRoutingWeightingBeelineWeightApproximator *)setDistanceCalcWithDistanceCalc:(id<DistanceCalc>)distanceCalc {
  ComGraphhopperRoutingWeightingBeelineWeightApproximator_set_distanceCalc_(self, distanceCalc);
  return self;
}

- (void)dealloc {
  RELEASE_(nodeAccess_);
  RELEASE_(weighting_);
  RELEASE_(distanceCalc_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingWeightingBeelineWeightApproximator *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperRoutingWeightingBeelineWeightApproximator_set_nodeAccess_(other, nodeAccess_);
  ComGraphhopperRoutingWeightingBeelineWeightApproximator_set_weighting_(other, weighting_);
  ComGraphhopperRoutingWeightingBeelineWeightApproximator_set_distanceCalc_(other, distanceCalc_);
  other->toLat_ = toLat_;
  other->toLon_ = toLon_;
  other->epsilon_ = epsilon_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNodeAccess:withComGraphhopperRoutingWeightingWeighting:", "BeelineWeightApproximator", NULL, 0x1, NULL },
    { "setGoalNodeWithInt:", "setGoalNode", "V", 0x1, NULL },
    { "setEpsilonWithDouble:", "setEpsilon", "Lcom.graphhopper.routing.weighting.WeightApproximator;", 0x1, NULL },
    { "duplicate", NULL, "Lcom.graphhopper.routing.weighting.WeightApproximator;", 0x1, NULL },
    { "approximateWithInt:", "approximate", "D", 0x1, NULL },
    { "setDistanceCalcWithDistanceCalc:", "setDistanceCalc", "Lcom.graphhopper.routing.weighting.BeelineWeightApproximator;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nodeAccess_", NULL, 0x12, "Lcom.graphhopper.storage.NodeAccess;", NULL,  },
    { "weighting_", NULL, 0x12, "Lcom.graphhopper.routing.weighting.Weighting;", NULL,  },
    { "distanceCalc_", NULL, 0x2, "Lcom.graphhopper.util.DistanceCalc;", NULL,  },
    { "toLat_", NULL, 0x2, "D", NULL,  },
    { "toLon_", NULL, 0x2, "D", NULL,  },
    { "epsilon_", NULL, 0x2, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingWeightingBeelineWeightApproximator = { 1, "BeelineWeightApproximator", "com.graphhopper.routing.weighting", NULL, 0x1, 6, methods, 6, fields, 0, NULL};
  return &_ComGraphhopperRoutingWeightingBeelineWeightApproximator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingWeightingBeelineWeightApproximator)
