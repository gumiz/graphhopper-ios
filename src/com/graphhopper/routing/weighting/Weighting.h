//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/weighting/Weighting.java
//

#ifndef _ComGraphhopperRoutingWeightingWeighting_H_
#define _ComGraphhopperRoutingWeightingWeighting_H_

@class HintsMap;
@protocol EdgeIteratorState;
@protocol FlagEncoder;

#include "J2ObjC_header.h"

/**
 @brief Specifies how the best route is calculated.
 E.g. the fastest or shortest route. <p>
 @author Peter Karich
 */
@protocol ComGraphhopperRoutingWeightingWeighting < NSObject, JavaObject >

/**
 @brief Used only for the heuristic estimation in A <p>
 @return minimal weight. E.g. if you calculate the fastest way it is distance/maxVelocity
 */
- (jdouble)getMinWeightWithDouble:(jdouble)distance;

/**
 @brief This method calculates the weighting a certain edgeState should be associated.
 E.g. a high value indicates that the edge should be avoided. Make sure that this method is very fast and optimized as this is called potentially millions of times for one route or a lot more for nearly any preprocessing phase.
 @param edgeState the edge for which the weight should be calculated
 @param reverse if the specified edge is specified in reverse direction e.g. from the reverse case of a bidirectional search.
 @param prevOrNextEdgeId if reverse is false this has to be the previous edgeId, if true it has to be the next edgeId in the direction from start to end.
 @return the calculated weight with the specified velocity has to be in the range of 0 and +Infinity. Make sure your method does not return NaN which can e.g. occur for 0/0.
 */
- (jdouble)calcWeightWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                               withBoolean:(jboolean)reverse
                                   withInt:(jint)prevOrNextEdgeId;

/**
 @brief This method calculates the time taken (in milli seconds) for the specified edgeState and optionally include the turn costs (in seconds) of the previous (or next) edgeId via prevOrNextEdgeId.
 Typically used for post-processing and on only a few thausend edges.
 */
- (jlong)calcMillisWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                             withBoolean:(jboolean)reverse
                                 withInt:(jint)prevOrNextEdgeId;

- (id<FlagEncoder>)getFlagEncoder;

- (NSString *)getName;

/**
 @brief Returns true if the specified weighting and encoder matches to this Weighting.
 */
- (jboolean)matchesWithHintsMap:(HintsMap *)map;

@end

J2OBJC_EMPTY_STATIC_INIT(ComGraphhopperRoutingWeightingWeighting)

J2OBJC_TYPE_LITERAL_HEADER(ComGraphhopperRoutingWeightingWeighting)

#endif // _ComGraphhopperRoutingWeightingWeighting_H_
