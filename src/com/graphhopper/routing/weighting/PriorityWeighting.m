//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/weighting/PriorityWeighting.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/weighting/PriorityWeighting.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/PMap.h"
#include "java/lang/Double.h"

@interface ComGraphhopperRoutingWeightingPriorityWeighting () {
 @public
  jdouble minFactor_;
}
@end

@implementation ComGraphhopperRoutingWeightingPriorityWeighting

- (instancetype)initWithFlagEncoder:(id<FlagEncoder>)encoder {
  return [self initComGraphhopperRoutingWeightingPriorityWeightingWithFlagEncoder:encoder withPMap:[[[PMap alloc] initWithInt:0] autorelease]];
}

- (instancetype)initComGraphhopperRoutingWeightingPriorityWeightingWithFlagEncoder:(id<FlagEncoder>)encoder
                                                                          withPMap:(PMap *)pMap {
  if (self = [super initWithFlagEncoder:encoder withPMap:pMap]) {
    jdouble maxPriority = 1;
    minFactor_ = 1 / (0.5 + maxPriority);
  }
  return self;
}

- (instancetype)initWithFlagEncoder:(id<FlagEncoder>)encoder
                           withPMap:(PMap *)pMap {
  return [self initComGraphhopperRoutingWeightingPriorityWeightingWithFlagEncoder:encoder withPMap:pMap];
}

- (jdouble)getMinWeightWithDouble:(jdouble)distance {
  return minFactor_ * [super getMinWeightWithDouble:distance];
}

- (jdouble)calcWeightWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                               withBoolean:(jboolean)reverse
                                   withInt:(jint)prevOrNextEdgeId {
  jdouble weight = [super calcWeightWithEdgeIteratorState:edgeState withBoolean:reverse withInt:prevOrNextEdgeId];
  if (JavaLangDouble_isInfiniteWithDouble_(weight)) return JavaLangDouble_POSITIVE_INFINITY;
  return weight / (0.5 + [((id<FlagEncoder>) nil_chk(flagEncoder_)) getDoubleWithLong:[((id<EdgeIteratorState>) nil_chk(edgeState)) getFlags] withInt:ComGraphhopperRoutingWeightingPriorityWeighting_KEY]);
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingWeightingPriorityWeighting *)other {
  [super copyAllFieldsTo:other];
  other->minFactor_ = minFactor_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFlagEncoder:", "PriorityWeighting", NULL, 0x1, NULL },
    { "initWithFlagEncoder:withPMap:", "PriorityWeighting", NULL, 0x1, NULL },
    { "getMinWeightWithDouble:", "getMinWeight", "D", 0x1, NULL },
    { "calcWeightWithEdgeIteratorState:withBoolean:withInt:", "calcWeight", "D", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "KEY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComGraphhopperRoutingWeightingPriorityWeighting_KEY },
    { "minFactor_", NULL, 0x12, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingWeightingPriorityWeighting = { 1, "PriorityWeighting", "com.graphhopper.routing.weighting", NULL, 0x1, 4, methods, 2, fields, 0, NULL};
  return &_ComGraphhopperRoutingWeightingPriorityWeighting;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingWeightingPriorityWeighting)
