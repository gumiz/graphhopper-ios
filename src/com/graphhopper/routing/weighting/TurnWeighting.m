//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/weighting/TurnWeighting.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/HintsMap.h"
#include "com/graphhopper/routing/util/TurnCostEncoder.h"
#include "com/graphhopper/routing/weighting/TurnWeighting.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/TurnCostExtension.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "java/lang/Double.h"
#include "java/lang/RuntimeException.h"

@interface ComGraphhopperRoutingWeightingTurnWeighting () {
 @public
  /**
   @brief Encoder, which decodes the turn flags
   */
  id<TurnCostEncoder> turnCostEncoder_;
  TurnCostExtension *turnCostExt_;
  id<ComGraphhopperRoutingWeightingWeighting> superWeighting_;
  jdouble defaultUTurnCost_;
}
@end

J2OBJC_FIELD_SETTER(ComGraphhopperRoutingWeightingTurnWeighting, turnCostEncoder_, id<TurnCostEncoder>)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingWeightingTurnWeighting, turnCostExt_, TurnCostExtension *)
J2OBJC_FIELD_SETTER(ComGraphhopperRoutingWeightingTurnWeighting, superWeighting_, id<ComGraphhopperRoutingWeightingWeighting>)

@implementation ComGraphhopperRoutingWeightingTurnWeighting

- (instancetype)initWithComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)superWeighting
                                          withTurnCostExtension:(TurnCostExtension *)turnCostExt {
  if (self = [super init]) {
    defaultUTurnCost_ = 40;
    ComGraphhopperRoutingWeightingTurnWeighting_set_turnCostEncoder_(self, (id<TurnCostEncoder>) check_protocol_cast([((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting)) getFlagEncoder], @protocol(TurnCostEncoder)));
    ComGraphhopperRoutingWeightingTurnWeighting_set_superWeighting_(self, superWeighting);
    ComGraphhopperRoutingWeightingTurnWeighting_set_turnCostExt_(self, turnCostExt);
    if (turnCostExt == nil) @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"No storage set to calculate turn weight"] autorelease];
  }
  return self;
}

- (ComGraphhopperRoutingWeightingTurnWeighting *)setDefaultUTurnCostWithDouble:(jdouble)costInSeconds {
  self->defaultUTurnCost_ = costInSeconds;
  return self;
}

- (jdouble)getMinWeightWithDouble:(jdouble)distance {
  return [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) getMinWeightWithDouble:distance];
}

- (jdouble)calcWeightWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                               withBoolean:(jboolean)reverse
                                   withInt:(jint)prevOrNextEdgeId {
  jdouble weight = [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) calcWeightWithEdgeIteratorState:edgeState withBoolean:reverse withInt:prevOrNextEdgeId];
  if (prevOrNextEdgeId == EdgeIterator_NO_EDGE) return weight;
  jint edgeId = [((id<EdgeIteratorState>) nil_chk(edgeState)) getEdge];
  jdouble turnCosts;
  if (reverse) turnCosts = [self calcTurnWeightWithInt:edgeId withInt:[edgeState getBaseNode] withInt:prevOrNextEdgeId];
  else turnCosts = [self calcTurnWeightWithInt:prevOrNextEdgeId withInt:[edgeState getBaseNode] withInt:edgeId];
  if (turnCosts == 0 && edgeId == prevOrNextEdgeId) return weight + defaultUTurnCost_;
  return weight + turnCosts;
}

- (jlong)calcMillisWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                             withBoolean:(jboolean)reverse
                                 withInt:(jint)prevOrNextEdgeId {
  jlong millis = [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) calcMillisWithEdgeIteratorState:edgeState withBoolean:reverse withInt:prevOrNextEdgeId];
  if (prevOrNextEdgeId == EdgeIterator_NO_EDGE) return millis;
  jlong turnCostsInMillis;
  if (reverse) turnCostsInMillis = J2ObjCFpToLong([self calcTurnWeightWithInt:[((id<EdgeIteratorState>) nil_chk(edgeState)) getEdge] withInt:[edgeState getBaseNode] withInt:prevOrNextEdgeId]);
  else turnCostsInMillis = J2ObjCFpToLong([self calcTurnWeightWithInt:prevOrNextEdgeId withInt:[((id<EdgeIteratorState>) nil_chk(edgeState)) getBaseNode] withInt:[edgeState getEdge]]);
  return millis + turnCostsInMillis;
}

- (jdouble)calcTurnWeightWithInt:(jint)edgeFrom
                         withInt:(jint)nodeVia
                         withInt:(jint)edgeTo {
  jlong turnFlags = [((TurnCostExtension *) nil_chk(turnCostExt_)) getTurnCostFlagsWithInt:edgeFrom withInt:nodeVia withInt:edgeTo];
  if ([((id<TurnCostEncoder>) nil_chk(turnCostEncoder_)) isTurnRestrictedWithLong:turnFlags]) return JavaLangDouble_POSITIVE_INFINITY;
  return [turnCostEncoder_ getTurnCostWithLong:turnFlags];
}

- (id<FlagEncoder>)getFlagEncoder {
  return [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) getFlagEncoder];
}

- (jboolean)matchesWithHintsMap:(HintsMap *)weightingMap {
  return [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) matchesWithHintsMap:weightingMap];
}

- (NSString *)getName {
  return JreStrcat("$$", @"turn|", [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) getName]);
}

- (void)dealloc {
  RELEASE_(turnCostEncoder_);
  RELEASE_(turnCostExt_);
  RELEASE_(superWeighting_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingWeightingTurnWeighting *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperRoutingWeightingTurnWeighting_set_turnCostEncoder_(other, turnCostEncoder_);
  ComGraphhopperRoutingWeightingTurnWeighting_set_turnCostExt_(other, turnCostExt_);
  ComGraphhopperRoutingWeightingTurnWeighting_set_superWeighting_(other, superWeighting_);
  other->defaultUTurnCost_ = defaultUTurnCost_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComGraphhopperRoutingWeightingWeighting:withTurnCostExtension:", "TurnWeighting", NULL, 0x1, NULL },
    { "setDefaultUTurnCostWithDouble:", "setDefaultUTurnCost", "Lcom.graphhopper.routing.weighting.TurnWeighting;", 0x1, NULL },
    { "getMinWeightWithDouble:", "getMinWeight", "D", 0x1, NULL },
    { "calcWeightWithEdgeIteratorState:withBoolean:withInt:", "calcWeight", "D", 0x1, NULL },
    { "calcMillisWithEdgeIteratorState:withBoolean:withInt:", "calcMillis", "J", 0x1, NULL },
    { "calcTurnWeightWithInt:withInt:withInt:", "calcTurnWeight", "D", 0x1, NULL },
    { "getFlagEncoder", NULL, "Lcom.graphhopper.routing.util.FlagEncoder;", 0x1, NULL },
    { "matchesWithHintsMap:", "matches", "Z", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "turnCostEncoder_", NULL, 0x12, "Lcom.graphhopper.routing.util.TurnCostEncoder;", NULL,  },
    { "turnCostExt_", NULL, 0x12, "Lcom.graphhopper.storage.TurnCostExtension;", NULL,  },
    { "superWeighting_", NULL, 0x12, "Lcom.graphhopper.routing.weighting.Weighting;", NULL,  },
    { "defaultUTurnCost_", NULL, 0x2, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingWeightingTurnWeighting = { 1, "TurnWeighting", "com.graphhopper.routing.weighting", NULL, 0x1, 9, methods, 4, fields, 0, NULL};
  return &_ComGraphhopperRoutingWeightingTurnWeighting;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingWeightingTurnWeighting)
