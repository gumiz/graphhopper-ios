//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/weighting/CurvatureWeighting.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/MotorcycleFlagEncoder.h"
#include "com/graphhopper/routing/weighting/CurvatureWeighting.h"
#include "com/graphhopper/routing/weighting/PriorityWeighting.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/PMap.h"
#include "java/lang/Math.h"

@interface ComGraphhopperRoutingWeightingCurvatureWeighting () {
 @public
  jdouble minFactor_CurvatureWeighting_;
}
@end

@implementation ComGraphhopperRoutingWeightingCurvatureWeighting

- (instancetype)initWithFlagEncoder:(id<FlagEncoder>)flagEncoder
                           withPMap:(PMap *)pMap {
  if (self = [super initWithFlagEncoder:flagEncoder withPMap:pMap]) {
    jdouble minBendiness = 1;
    jdouble maxPriority = 1;
    minFactor_CurvatureWeighting_ = minBendiness / JavaLangMath_logWithDouble_([((id<FlagEncoder>) nil_chk(flagEncoder)) getMaxSpeed]) / (0.5 + maxPriority);
  }
  return self;
}

- (jdouble)getMinWeightWithDouble:(jdouble)distance {
  return minFactor_CurvatureWeighting_ * distance;
}

- (jdouble)calcWeightWithEdgeIteratorState:(id<EdgeIteratorState>)edge
                               withBoolean:(jboolean)reverse
                                   withInt:(jint)prevOrNextEdgeId {
  jdouble priority = [((id<FlagEncoder>) nil_chk(flagEncoder_)) getDoubleWithLong:[((id<EdgeIteratorState>) nil_chk(edge)) getFlags] withInt:ComGraphhopperRoutingWeightingPriorityWeighting_KEY];
  jdouble bendiness = [flagEncoder_ getDoubleWithLong:[edge getFlags] withInt:MotorcycleFlagEncoder_CURVATURE_KEY];
  jdouble speed = [self getRoadSpeedWithEdgeIteratorState:edge withBoolean:reverse];
  jdouble roadDistance = [edge getDistance];
  jdouble regularWeight = roadDistance / JavaLangMath_logWithDouble_(speed);
  return (bendiness * regularWeight) / (0.5 + priority);
}

- (jdouble)getRoadSpeedWithEdgeIteratorState:(id<EdgeIteratorState>)edge
                                 withBoolean:(jboolean)reverse {
  return reverse ? [((id<FlagEncoder>) nil_chk(flagEncoder_)) getReverseSpeedWithLong:[((id<EdgeIteratorState>) nil_chk(edge)) getFlags]] : [((id<FlagEncoder>) nil_chk(flagEncoder_)) getSpeedWithLong:[((id<EdgeIteratorState>) nil_chk(edge)) getFlags]];
}

- (NSString *)getName {
  return @"curvature";
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingWeightingCurvatureWeighting *)other {
  [super copyAllFieldsTo:other];
  other->minFactor_CurvatureWeighting_ = minFactor_CurvatureWeighting_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFlagEncoder:withPMap:", "CurvatureWeighting", NULL, 0x1, NULL },
    { "getMinWeightWithDouble:", "getMinWeight", "D", 0x1, NULL },
    { "calcWeightWithEdgeIteratorState:withBoolean:withInt:", "calcWeight", "D", 0x1, NULL },
    { "getRoadSpeedWithEdgeIteratorState:withBoolean:", "getRoadSpeed", "D", 0x4, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "minFactor_CurvatureWeighting_", "minFactor", 0x12, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingWeightingCurvatureWeighting = { 1, "CurvatureWeighting", "com.graphhopper.routing.weighting", NULL, 0x1, 5, methods, 1, fields, 0, NULL};
  return &_ComGraphhopperRoutingWeightingCurvatureWeighting;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingWeightingCurvatureWeighting)
