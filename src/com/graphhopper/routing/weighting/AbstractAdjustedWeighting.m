//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/weighting/AbstractAdjustedWeighting.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/HintsMap.h"
#include "com/graphhopper/routing/weighting/AbstractAdjustedWeighting.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "java/lang/IllegalArgumentException.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation ComGraphhopperRoutingWeightingAbstractAdjustedWeighting

- (instancetype)initWithComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)superWeighting {
  if (self = [super init]) {
    if (superWeighting == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"No super weighting set"] autorelease];
    ComGraphhopperRoutingWeightingAbstractAdjustedWeighting_set_superWeighting_(self, superWeighting);
  }
  return self;
}

- (jlong)calcMillisWithEdgeIteratorState:(id<EdgeIteratorState>)edgeState
                             withBoolean:(jboolean)reverse
                                 withInt:(jint)prevOrNextEdgeId {
  return [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) calcMillisWithEdgeIteratorState:edgeState withBoolean:reverse withInt:prevOrNextEdgeId];
}

- (id<FlagEncoder>)getFlagEncoder {
  return [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) getFlagEncoder];
}

- (jboolean)matchesWithHintsMap:(HintsMap *)reqMap {
  return [((NSString *) nil_chk([self getName])) isEqual:[((HintsMap *) nil_chk(reqMap)) getWeighting]] && [((NSString *) nil_chk([((id<FlagEncoder>) nil_chk([((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) getFlagEncoder])) description])) isEqual:[reqMap getVehicle]];
}

- (NSString *)description {
  return JreStrcat("$C$", [self getName], '|', [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(superWeighting_)) description]);
}

- (void)dealloc {
  RELEASE_(superWeighting_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(ComGraphhopperRoutingWeightingAbstractAdjustedWeighting *)other {
  [super copyAllFieldsTo:other];
  ComGraphhopperRoutingWeightingAbstractAdjustedWeighting_set_superWeighting_(other, superWeighting_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComGraphhopperRoutingWeightingWeighting:", "AbstractAdjustedWeighting", NULL, 0x1, NULL },
    { "calcMillisWithEdgeIteratorState:withBoolean:withInt:", "calcMillis", "J", 0x1, NULL },
    { "getFlagEncoder", NULL, "Lcom.graphhopper.routing.util.FlagEncoder;", 0x1, NULL },
    { "matchesWithHintsMap:", "matches", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "superWeighting_", NULL, 0x14, "Lcom.graphhopper.routing.weighting.Weighting;", NULL,  },
  };
  static const J2ObjcClassInfo _ComGraphhopperRoutingWeightingAbstractAdjustedWeighting = { 1, "AbstractAdjustedWeighting", "com.graphhopper.routing.weighting", NULL, 0x401, 5, methods, 1, fields, 0, NULL};
  return &_ComGraphhopperRoutingWeightingAbstractAdjustedWeighting;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGraphhopperRoutingWeightingAbstractAdjustedWeighting)
