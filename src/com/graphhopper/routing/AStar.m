//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/AStar.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/AStar.h"
#include "com/graphhopper/routing/AbstractRoutingAlgorithm.h"
#include "com/graphhopper/routing/Path.h"
#include "com/graphhopper/routing/util/TraversalMode.h"
#include "com/graphhopper/routing/weighting/BeelineWeightApproximator.h"
#include "com/graphhopper/routing/weighting/WeightApproximator.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/storage/NodeAccess.h"
#include "com/graphhopper/storage/SPTEntry.h"
#include "com/graphhopper/util/DistancePlaneProjection.h"
#include "com/graphhopper/util/EdgeExplorer.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/Parameters.h"
#include "gnu/trove/map/TIntObjectMap.h"
#include "gnu/trove/map/hash/TIntObjectHashMap.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/util/PriorityQueue.h"

__attribute__((unused)) static Path *AStar_runAlgo(AStar *self);

@interface AStar () {
 @public
  id<ComGraphhopperRoutingWeightingWeightApproximator> weightApprox_;
  jint visitedCount_;
  id<GnuTroveMapTIntObjectMap> fromMap_;
  JavaUtilPriorityQueue *prioQueueOpenSet_;
  AStar_AStarEntry *currEdge_;
  jint to1_;
}

- (Path *)runAlgo;
@end

J2OBJC_FIELD_SETTER(AStar, weightApprox_, id<ComGraphhopperRoutingWeightingWeightApproximator>)
J2OBJC_FIELD_SETTER(AStar, fromMap_, id<GnuTroveMapTIntObjectMap>)
J2OBJC_FIELD_SETTER(AStar, prioQueueOpenSet_, JavaUtilPriorityQueue *)
J2OBJC_FIELD_SETTER(AStar, currEdge_, AStar_AStarEntry *)

@implementation AStar

- (instancetype)initWithGraph:(id<Graph>)graph
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
        withTraversalModeEnum:(TraversalModeEnum *)tMode {
  if (self = [super initWithGraph:graph withComGraphhopperRoutingWeightingWeighting:weighting withTraversalModeEnum:tMode]) {
    to1_ = -1;
    jint size = JavaLangMath_minWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(200, [((id<Graph>) nil_chk(graph)) getNodes] / 10), 2000);
    [self initCollectionsWithInt:size];
    ComGraphhopperRoutingWeightingBeelineWeightApproximator *defaultApprox = [[[ComGraphhopperRoutingWeightingBeelineWeightApproximator alloc] initWithNodeAccess:nodeAccess_ withComGraphhopperRoutingWeightingWeighting:weighting] autorelease];
    [defaultApprox setDistanceCalcWithDistanceCalc:[[[DistancePlaneProjection alloc] init] autorelease]];
    [self setApproximationWithComGraphhopperRoutingWeightingWeightApproximator:defaultApprox];
  }
  return self;
}

- (AStar *)setApproximationWithComGraphhopperRoutingWeightingWeightApproximator:(id<ComGraphhopperRoutingWeightingWeightApproximator>)approx {
  AStar_set_weightApprox_(self, approx);
  return self;
}

- (void)initCollectionsWithInt:(jint)size {
  AStar_setAndConsume_fromMap_(self, [[GnuTroveMapHashTIntObjectHashMap alloc] init]);
  AStar_setAndConsume_prioQueueOpenSet_(self, [[JavaUtilPriorityQueue alloc] initWithInt:size]);
}

- (Path *)calcPathWithInt:(jint)from
                  withInt:(jint)to {
  [self checkAlreadyRun];
  to1_ = to;
  [((id<ComGraphhopperRoutingWeightingWeightApproximator>) nil_chk(weightApprox_)) setGoalNodeWithInt:to];
  jdouble weightToGoal = [weightApprox_ approximateWithInt:from];
  AStar_setAndConsume_currEdge_(self, [[AStar_AStarEntry alloc] initWithInt:EdgeIterator_NO_EDGE withInt:from withDouble:0 + weightToGoal withDouble:0]);
  if (![((TraversalModeEnum *) nil_chk(traversalMode_)) isEdgeBased]) {
    [((id<GnuTroveMapTIntObjectMap>) nil_chk(fromMap_)) putWithInt:from withId:currEdge_];
  }
  return AStar_runAlgo(self);
}

- (Path *)runAlgo {
  return AStar_runAlgo(self);
}

- (Path *)extractPath {
  return [((Path *) nil_chk([((Path *) nil_chk([((Path *) [[[Path alloc] initWithGraph:graph_ withComGraphhopperRoutingWeightingWeighting:weighting_] autorelease]) setWeightWithDouble:((AStar_AStarEntry *) nil_chk(currEdge_))->weight_])) setSPTEntryWithSPTEntry:currEdge_])) extract];
}

- (SPTEntry *)createSPTEntryWithInt:(jint)node
                         withDouble:(jdouble)weight {
  @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"use AStarEdge constructor directly"] autorelease];
}

- (jboolean)finished {
  return ((AStar_AStarEntry *) nil_chk(currEdge_))->adjNode_ == to1_;
}

- (jint)getVisitedNodes {
  return visitedCount_;
}

- (NSString *)getName {
  return Parameters_Algorithms_get_ASTAR_();
}

- (void)dealloc {
  RELEASE_(weightApprox_);
  RELEASE_(fromMap_);
  RELEASE_(prioQueueOpenSet_);
  RELEASE_(currEdge_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(AStar *)other {
  [super copyAllFieldsTo:other];
  AStar_set_weightApprox_(other, weightApprox_);
  other->visitedCount_ = visitedCount_;
  AStar_set_fromMap_(other, fromMap_);
  AStar_set_prioQueueOpenSet_(other, prioQueueOpenSet_);
  AStar_set_currEdge_(other, currEdge_);
  other->to1_ = to1_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraph:withComGraphhopperRoutingWeightingWeighting:withTraversalModeEnum:", "AStar", NULL, 0x1, NULL },
    { "setApproximationWithComGraphhopperRoutingWeightingWeightApproximator:", "setApproximation", "Lcom.graphhopper.routing.AStar;", 0x1, NULL },
    { "initCollectionsWithInt:", "initCollections", "V", 0x4, NULL },
    { "calcPathWithInt:withInt:", "calcPath", "Lcom.graphhopper.routing.Path;", 0x1, NULL },
    { "runAlgo", NULL, "Lcom.graphhopper.routing.Path;", 0x2, NULL },
    { "extractPath", NULL, "Lcom.graphhopper.routing.Path;", 0x4, NULL },
    { "createSPTEntryWithInt:withDouble:", "createSPTEntry", "Lcom.graphhopper.storage.SPTEntry;", 0x4, NULL },
    { "finished", NULL, "Z", 0x4, NULL },
    { "getVisitedNodes", NULL, "I", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "weightApprox_", NULL, 0x2, "Lcom.graphhopper.routing.weighting.WeightApproximator;", NULL,  },
    { "visitedCount_", NULL, 0x2, "I", NULL,  },
    { "fromMap_", NULL, 0x2, "Lgnu.trove.map.TIntObjectMap;", NULL,  },
    { "prioQueueOpenSet_", NULL, 0x2, "Ljava.util.PriorityQueue;", NULL,  },
    { "currEdge_", NULL, 0x2, "Lcom.graphhopper.routing.AStar$AStarEntry;", NULL,  },
    { "to1_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _AStar = { 1, "AStar", "com.graphhopper.routing", NULL, 0x1, 10, methods, 6, fields, 0, NULL};
  return &_AStar;
}

@end

Path *AStar_runAlgo(AStar *self) {
  jdouble currWeightToGoal, estimationFullWeight;
  id<EdgeExplorer> explorer = self->outEdgeExplorer_;
  while (YES) {
    jint currVertex = ((AStar_AStarEntry *) nil_chk(self->currEdge_))->adjNode_;
    self->visitedCount_++;
    if ([self isMaxVisitedNodesExceeded]) return [self createEmptyPath];
    if ([self finished]) break;
    id<EdgeIterator> iter = [((id<EdgeExplorer>) nil_chk(explorer)) setBaseNodeWithInt:currVertex];
    while ([((id<EdgeIterator>) nil_chk(iter)) next]) {
      if (![self acceptWithEdgeIterator:iter withInt:self->currEdge_->edge_]) continue;
      jint neighborNode = [iter getAdjNode];
      jint traversalId = [((TraversalModeEnum *) nil_chk(self->traversalMode_)) createTraversalIdWithEdgeIteratorState:iter withBoolean:NO];
      jdouble alreadyVisitedWeight = [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(self->weighting_)) calcWeightWithEdgeIteratorState:iter withBoolean:NO withInt:self->currEdge_->edge_] + self->currEdge_->weightOfVisitedPath_;
      if (JavaLangDouble_isInfiniteWithDouble_(alreadyVisitedWeight)) continue;
      AStar_AStarEntry *ase = [((id<GnuTroveMapTIntObjectMap>) nil_chk(self->fromMap_)) getWithInt:traversalId];
      if (ase == nil || ase->weightOfVisitedPath_ > alreadyVisitedWeight) {
        currWeightToGoal = [((id<ComGraphhopperRoutingWeightingWeightApproximator>) nil_chk(self->weightApprox_)) approximateWithInt:neighborNode];
        estimationFullWeight = alreadyVisitedWeight + currWeightToGoal;
        if (ase == nil) {
          ase = [[[AStar_AStarEntry alloc] initWithInt:[iter getEdge] withInt:neighborNode withDouble:estimationFullWeight withDouble:alreadyVisitedWeight] autorelease];
          [self->fromMap_ putWithInt:traversalId withId:ase];
        }
        else {
          NSCAssert((ase->weight_ > 0.9999999 * estimationFullWeight), [JreStrcat("$C" J2OBJC_COMMA() JreStrcat("$D" J2OBJC_COMMA() JreStrcat("$$" J2OBJC_COMMA() JreStrcat("$D" J2OBJC_COMMA() JreStrcat("$$" J2OBJC_COMMA() JreStrcat("$D" J2OBJC_COMMA() JreStrcat("$$" J2OBJC_COMMA() JreStrcat("$D$D$D" J2OBJC_COMMA() @"Inconsistent distance estimate " J2OBJC_COMMA() ase->weight_ J2OBJC_COMMA() @" vs " J2OBJC_COMMA() estimationFullWeight J2OBJC_COMMA() @" (" J2OBJC_COMMA() ase->weight_ / estimationFullWeight) J2OBJC_COMMA() @") J2OBJC_COMMA() and:") J2OBJC_COMMA() ase->weightOfVisitedPath_) J2OBJC_COMMA() @" vs ") J2OBJC_COMMA() alreadyVisitedWeight) J2OBJC_COMMA() @" (") J2OBJC_COMMA() ase->weightOfVisitedPath_ / alreadyVisitedWeight) J2OBJC_COMMA() ')') description]);
          [((JavaUtilPriorityQueue *) nil_chk(self->prioQueueOpenSet_)) removeWithId:ase];
          ase->edge_ = [iter getEdge];
          ase->weight_ = estimationFullWeight;
          ase->weightOfVisitedPath_ = alreadyVisitedWeight;
        }
        SPTEntry_set_parent_(nil_chk(ase), self->currEdge_);
        [((JavaUtilPriorityQueue *) nil_chk(self->prioQueueOpenSet_)) addWithId:ase];
        [self updateBestPathWithEdgeIteratorState:iter withSPTEntry:ase withInt:traversalId];
      }
    }
    if ([((JavaUtilPriorityQueue *) nil_chk(self->prioQueueOpenSet_)) isEmpty]) return [self createEmptyPath];
    AStar_set_currEdge_(self, [self->prioQueueOpenSet_ poll]);
    if (self->currEdge_ == nil) @throw [[[JavaLangAssertionError alloc] initWithId:@"Empty edge cannot happen"] autorelease];
  }
  return [self extractPath];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AStar)

@implementation AStar_AStarEntry

- (instancetype)initWithInt:(jint)edgeId
                    withInt:(jint)adjNode
                 withDouble:(jdouble)weightForHeap
                 withDouble:(jdouble)weightOfVisitedPath {
  if (self = [super initWithInt:edgeId withInt:adjNode withDouble:weightForHeap]) {
    self->weightOfVisitedPath_ = weightOfVisitedPath;
  }
  return self;
}

- (jdouble)getWeightOfVisitedPath {
  return weightOfVisitedPath_;
}

- (void)copyAllFieldsTo:(AStar_AStarEntry *)other {
  [super copyAllFieldsTo:other];
  other->weightOfVisitedPath_ = weightOfVisitedPath_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withDouble:withDouble:", "AStarEntry", NULL, 0x1, NULL },
    { "getWeightOfVisitedPath", NULL, "D", 0x11, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "weightOfVisitedPath_", NULL, 0x0, "D", NULL,  },
  };
  static const J2ObjcClassInfo _AStar_AStarEntry = { 1, "AStarEntry", "com.graphhopper.routing", "AStar", 0x9, 2, methods, 1, fields, 0, NULL};
  return &_AStar_AStarEntry;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AStar_AStarEntry)
