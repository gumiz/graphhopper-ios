//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/routing/AStar.h"
#include "com/graphhopper/routing/AStarBidirection.h"
#include "com/graphhopper/routing/AbstractBidirAlgo.h"
#include "com/graphhopper/routing/AbstractRoutingAlgorithm.h"
#include "com/graphhopper/routing/AlternativeRoute.h"
#include "com/graphhopper/routing/Path.h"
#include "com/graphhopper/routing/PathBidirRef.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/routing/util/TraversalMode.h"
#include "com/graphhopper/routing/weighting/Weighting.h"
#include "com/graphhopper/storage/Graph.h"
#include "com/graphhopper/storage/SPTEntry.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/GHUtility.h"
#include "com/graphhopper/util/Parameters.h"
#include "gnu/trove/map/TIntObjectMap.h"
#include "gnu/trove/map/hash/TIntObjectHashMap.h"
#include "gnu/trove/set/TIntSet.h"
#include "gnu/trove/set/hash/TIntHashSet.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"

@interface AlternativeRoute () {
 @public
  id<Graph> graph_;
  id<FlagEncoder> flagEncoder_;
  id<ComGraphhopperRoutingWeightingWeighting> weighting_;
  TraversalModeEnum *traversalMode_;
  jint visitedNodes_;
  jint maxVisitedNodes_;
  jdouble maxWeightFactor_;
  jdouble maxExplorationFactor_;
  jdouble maxShareFactor_;
  jdouble minPlateauFactor_;
  jint maxPaths_;
}
@end

J2OBJC_FIELD_SETTER(AlternativeRoute, graph_, id<Graph>)
J2OBJC_FIELD_SETTER(AlternativeRoute, flagEncoder_, id<FlagEncoder>)
J2OBJC_FIELD_SETTER(AlternativeRoute, weighting_, id<ComGraphhopperRoutingWeightingWeighting>)
J2OBJC_FIELD_SETTER(AlternativeRoute, traversalMode_, TraversalModeEnum *)

@interface AlternativeRoute_AlternativeInfo () {
 @public
  jdouble sortBy_;
  Path *path_;
  SPTEntry *shareStart_;
  SPTEntry *shareEnd_;
  jdouble shareWeight_;
  id<JavaUtilList> names_;
}
@end

J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeInfo, path_, Path *)
J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeInfo, shareStart_, SPTEntry *)
J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeInfo, shareEnd_, SPTEntry *)
J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeInfo, names_, id<JavaUtilList>)

@interface AlternativeRoute_AlternativeBidirSearch () {
 @public
  jdouble explorationFactor_;
}
@end

@interface AlternativeRoute_AlternativeBidirSearch_$1 () {
 @public
  AlternativeRoute_AlternativeBidirSearch *this$0_;
  jdouble val$maxWeight_;
  jdouble val$minPlateauFactor_;
  jdouble val$maxShareFactor_;
  jdouble val$weightInfluence_;
  jdouble val$shareInfluence_;
  jdouble val$plateauInfluence_;
  id<JavaUtilList> val$alternatives_;
  jint val$maxPaths_;
  AlternativeRoute_AlternativeInfo *val$bestAlt_;
  GnuTroveMapHashTIntObjectHashMap *val$traversalIDMap_;
  JavaUtilConcurrentAtomicAtomicInteger *val$startTID_;
  id<JavaUtilList> val$bestPathEntries_;
}
@end

J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeBidirSearch_$1, this$0_, AlternativeRoute_AlternativeBidirSearch *)
J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeBidirSearch_$1, val$alternatives_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeBidirSearch_$1, val$bestAlt_, AlternativeRoute_AlternativeInfo *)
J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeBidirSearch_$1, val$traversalIDMap_, GnuTroveMapHashTIntObjectHashMap *)
J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeBidirSearch_$1, val$startTID_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(AlternativeRoute_AlternativeBidirSearch_$1, val$bestPathEntries_, id<JavaUtilList>)

@interface AlternativeRoute_AlternativeBidirSearch_$1_$1 () {
 @public
  jint val$tid_;
}
@end

BOOL AlternativeRoute_initialized = NO;

@implementation AlternativeRoute

id<JavaUtilComparator> AlternativeRoute_ALT_COMPARATOR_;

- (instancetype)initWithGraph:(id<Graph>)graph
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
        withTraversalModeEnum:(TraversalModeEnum *)traversalMode {
  if (self = [super init]) {
    maxVisitedNodes_ = JavaLangInteger_MAX_VALUE;
    maxWeightFactor_ = 1.4;
    maxExplorationFactor_ = 0.8;
    maxShareFactor_ = 0.6;
    minPlateauFactor_ = 0.2;
    maxPaths_ = 2;
    AlternativeRoute_set_graph_(self, graph);
    AlternativeRoute_set_flagEncoder_(self, [((id<ComGraphhopperRoutingWeightingWeighting>) nil_chk(weighting)) getFlagEncoder]);
    AlternativeRoute_set_weighting_(self, weighting);
    AlternativeRoute_set_traversalMode_(self, traversalMode);
  }
  return self;
}

+ (id<JavaUtilList>)getAltNamesWithGraph:(id<Graph>)graph
                            withSPTEntry:(SPTEntry *)ee {
  return AlternativeRoute_getAltNamesWithGraph_withSPTEntry_(graph, ee);
}

+ (jdouble)calcSortByWithDouble:(jdouble)weightInfluence
                     withDouble:(jdouble)weight
                     withDouble:(jdouble)shareInfluence
                     withDouble:(jdouble)shareWeight
                     withDouble:(jdouble)plateauInfluence
                     withDouble:(jdouble)plateauWeight {
  return AlternativeRoute_calcSortByWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(weightInfluence, weight, shareInfluence, shareWeight, plateauInfluence, plateauWeight);
}

- (void)setMaxVisitedNodesWithInt:(jint)numberOfNodes {
  self->maxVisitedNodes_ = numberOfNodes;
}

- (void)setMaxWeightFactorWithDouble:(jdouble)maxWeightFactor {
  self->maxWeightFactor_ = maxWeightFactor;
}

- (void)setMaxShareFactorWithDouble:(jdouble)maxShareFactor {
  self->maxShareFactor_ = maxShareFactor;
}

- (void)setMinPlateauFactorWithDouble:(jdouble)minPlateauFactor {
  self->minPlateauFactor_ = minPlateauFactor;
}

- (void)setMaxExplorationFactorWithDouble:(jdouble)explorationFactor {
  self->maxExplorationFactor_ = explorationFactor;
}

- (void)setMaxPathsWithInt:(jint)maxPaths {
  self->maxPaths_ = maxPaths;
  if (self->maxPaths_ < 2) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Use normal algorithm with less overhead instead if no alternatives are required"] autorelease];
}

- (id<JavaUtilList>)calcAlternativesWithInt:(jint)from
                                    withInt:(jint)to {
  AlternativeRoute_AlternativeBidirSearch *altBidirDijktra = [[[AlternativeRoute_AlternativeBidirSearch alloc] initWithGraph:graph_ withComGraphhopperRoutingWeightingWeighting:weighting_ withTraversalModeEnum:traversalMode_ withDouble:maxExplorationFactor_ * 2] autorelease];
  [altBidirDijktra setMaxVisitedNodesWithInt:maxVisitedNodes_];
  [altBidirDijktra searchBestWithInt:from withInt:to];
  visitedNodes_ = [altBidirDijktra getVisitedNodes];
  id<JavaUtilList> alternatives = [altBidirDijktra calcAlternativesWithInt:maxPaths_ withDouble:maxWeightFactor_ withDouble:7 withDouble:maxShareFactor_ withDouble:0.8 withDouble:minPlateauFactor_ withDouble:-0.2];
  return alternatives;
}

- (Path *)calcPathWithInt:(jint)from
                  withInt:(jint)to {
  return [((id<JavaUtilList>) nil_chk([self calcPathsWithInt:from withInt:to])) getWithInt:0];
}

- (id<JavaUtilList>)calcPathsWithInt:(jint)from
                             withInt:(jint)to {
  id<JavaUtilList> alts = [self calcAlternativesWithInt:from withInt:to];
  id<JavaUtilList> paths = [[[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) nil_chk(alts)) size]] autorelease];
  for (AlternativeRoute_AlternativeInfo * __strong a in alts) {
    [paths addWithId:[((AlternativeRoute_AlternativeInfo *) nil_chk(a)) getPath]];
  }
  return paths;
}

- (NSString *)getName {
  return Parameters_Algorithms_get_ALT_ROUTE_();
}

- (jint)getVisitedNodes {
  return visitedNodes_;
}

- (void)dealloc {
  RELEASE_(graph_);
  RELEASE_(flagEncoder_);
  RELEASE_(weighting_);
  RELEASE_(traversalMode_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(AlternativeRoute *)other {
  [super copyAllFieldsTo:other];
  AlternativeRoute_set_graph_(other, graph_);
  AlternativeRoute_set_flagEncoder_(other, flagEncoder_);
  AlternativeRoute_set_weighting_(other, weighting_);
  AlternativeRoute_set_traversalMode_(other, traversalMode_);
  other->visitedNodes_ = visitedNodes_;
  other->maxVisitedNodes_ = maxVisitedNodes_;
  other->maxWeightFactor_ = maxWeightFactor_;
  other->maxExplorationFactor_ = maxExplorationFactor_;
  other->maxShareFactor_ = maxShareFactor_;
  other->minPlateauFactor_ = minPlateauFactor_;
  other->maxPaths_ = maxPaths_;
}

+ (void)initialize {
  if (self == [AlternativeRoute class]) {
    JreStrongAssignAndConsume(&AlternativeRoute_ALT_COMPARATOR_, nil, [[AlternativeRoute_$1 alloc] init]);
    J2OBJC_SET_INITIALIZED(AlternativeRoute)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraph:withComGraphhopperRoutingWeightingWeighting:withTraversalModeEnum:", "AlternativeRoute", NULL, 0x1, NULL },
    { "getAltNamesWithGraph:withSPTEntry:", "getAltNames", "Ljava.util.List;", 0x8, NULL },
    { "calcSortByWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "calcSortBy", "D", 0x8, NULL },
    { "setMaxVisitedNodesWithInt:", "setMaxVisitedNodes", "V", 0x1, NULL },
    { "setMaxWeightFactorWithDouble:", "setMaxWeightFactor", "V", 0x1, NULL },
    { "setMaxShareFactorWithDouble:", "setMaxShareFactor", "V", 0x1, NULL },
    { "setMinPlateauFactorWithDouble:", "setMinPlateauFactor", "V", 0x1, NULL },
    { "setMaxExplorationFactorWithDouble:", "setMaxExplorationFactor", "V", 0x1, NULL },
    { "setMaxPathsWithInt:", "setMaxPaths", "V", 0x1, NULL },
    { "calcAlternativesWithInt:withInt:", "calcAlternatives", "Ljava.util.List;", 0x1, NULL },
    { "calcPathWithInt:withInt:", "calcPath", "Lcom.graphhopper.routing.Path;", 0x1, NULL },
    { "calcPathsWithInt:withInt:", "calcPaths", "Ljava.util.List;", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getVisitedNodes", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ALT_COMPARATOR_", NULL, 0x1a, "Ljava.util.Comparator;", &AlternativeRoute_ALT_COMPARATOR_,  },
    { "graph_", NULL, 0x12, "Lcom.graphhopper.storage.Graph;", NULL,  },
    { "flagEncoder_", NULL, 0x12, "Lcom.graphhopper.routing.util.FlagEncoder;", NULL,  },
    { "weighting_", NULL, 0x12, "Lcom.graphhopper.routing.weighting.Weighting;", NULL,  },
    { "traversalMode_", NULL, 0x12, "Lcom.graphhopper.routing.util.TraversalMode;", NULL,  },
    { "visitedNodes_", NULL, 0x2, "I", NULL,  },
    { "maxVisitedNodes_", NULL, 0x2, "I", NULL,  },
    { "maxWeightFactor_", NULL, 0x2, "D", NULL,  },
    { "maxExplorationFactor_", NULL, 0x2, "D", NULL,  },
    { "maxShareFactor_", NULL, 0x2, "D", NULL,  },
    { "minPlateauFactor_", NULL, 0x2, "D", NULL,  },
    { "maxPaths_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _AlternativeRoute = { 1, "AlternativeRoute", "com.graphhopper.routing", NULL, 0x1, 14, methods, 12, fields, 0, NULL};
  return &_AlternativeRoute;
}

@end

id<JavaUtilList> AlternativeRoute_getAltNamesWithGraph_withSPTEntry_(id<Graph> graph, SPTEntry *ee) {
  AlternativeRoute_init();
  if (ee == nil || !EdgeIterator_Edge_isValidWithInt_(ee->edge_)) return JavaUtilCollections_emptyList();
  id<EdgeIteratorState> iter = [((id<Graph>) nil_chk(graph)) getEdgeIteratorStateWithInt:((SPTEntry *) nil_chk(ee))->edge_ withInt:JavaLangInteger_MIN_VALUE];
  if (iter == nil) return JavaUtilCollections_emptyList();
  NSString *str = [((id<EdgeIteratorState>) nil_chk(iter)) getName];
  if ([((NSString *) nil_chk(str)) isEmpty]) return JavaUtilCollections_emptyList();
  return JavaUtilCollections_singletonListWithId_(str);
}

jdouble AlternativeRoute_calcSortByWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble weightInfluence, jdouble weight, jdouble shareInfluence, jdouble shareWeight, jdouble plateauInfluence, jdouble plateauWeight) {
  AlternativeRoute_init();
  return weightInfluence * weight + shareInfluence * shareWeight + plateauInfluence * plateauWeight;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AlternativeRoute)

@implementation AlternativeRoute_AlternativeInfo

- (instancetype)initWithDouble:(jdouble)sortBy
                      withPath:(Path *)path
                  withSPTEntry:(SPTEntry *)shareStart
                  withSPTEntry:(SPTEntry *)shareEnd
                    withDouble:(jdouble)shareWeight
              withJavaUtilList:(id<JavaUtilList>)altNames {
  if (self = [super init]) {
    AlternativeRoute_AlternativeInfo_set_names_(self, altNames);
    self->sortBy_ = sortBy;
    AlternativeRoute_AlternativeInfo_set_path_(self, path);
    [((Path *) nil_chk(self->path_)) setDescriptionWithJavaUtilList:names_];
    AlternativeRoute_AlternativeInfo_set_shareStart_(self, shareStart);
    AlternativeRoute_AlternativeInfo_set_shareEnd_(self, shareEnd);
    self->shareWeight_ = shareWeight;
  }
  return self;
}

- (Path *)getPath {
  return path_;
}

- (SPTEntry *)getShareStart {
  return shareStart_;
}

- (SPTEntry *)getShareEnd {
  return shareEnd_;
}

- (jdouble)getShareWeight {
  return shareWeight_;
}

- (jdouble)getSortBy {
  return sortBy_;
}

- (NSString *)description {
  return JreStrcat("@$D$D$@", names_, @", sortBy:", sortBy_, @", shareWeight:", shareWeight_, @", ", path_);
}

- (void)dealloc {
  RELEASE_(path_);
  RELEASE_(shareStart_);
  RELEASE_(shareEnd_);
  RELEASE_(names_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(AlternativeRoute_AlternativeInfo *)other {
  [super copyAllFieldsTo:other];
  other->sortBy_ = sortBy_;
  AlternativeRoute_AlternativeInfo_set_path_(other, path_);
  AlternativeRoute_AlternativeInfo_set_shareStart_(other, shareStart_);
  AlternativeRoute_AlternativeInfo_set_shareEnd_(other, shareEnd_);
  other->shareWeight_ = shareWeight_;
  AlternativeRoute_AlternativeInfo_set_names_(other, names_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withPath:withSPTEntry:withSPTEntry:withDouble:withJavaUtilList:", "AlternativeInfo", NULL, 0x1, NULL },
    { "getPath", NULL, "Lcom.graphhopper.routing.Path;", 0x1, NULL },
    { "getShareStart", NULL, "Lcom.graphhopper.storage.SPTEntry;", 0x1, NULL },
    { "getShareEnd", NULL, "Lcom.graphhopper.storage.SPTEntry;", 0x1, NULL },
    { "getShareWeight", NULL, "D", 0x1, NULL },
    { "getSortBy", NULL, "D", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sortBy_", NULL, 0x12, "D", NULL,  },
    { "path_", NULL, 0x12, "Lcom.graphhopper.routing.Path;", NULL,  },
    { "shareStart_", NULL, 0x12, "Lcom.graphhopper.storage.SPTEntry;", NULL,  },
    { "shareEnd_", NULL, 0x12, "Lcom.graphhopper.storage.SPTEntry;", NULL,  },
    { "shareWeight_", NULL, 0x12, "D", NULL,  },
    { "names_", NULL, 0x12, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _AlternativeRoute_AlternativeInfo = { 1, "AlternativeInfo", "com.graphhopper.routing", "AlternativeRoute", 0x9, 7, methods, 6, fields, 0, NULL};
  return &_AlternativeRoute_AlternativeInfo;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AlternativeRoute_AlternativeInfo)

@implementation AlternativeRoute_AlternativeBidirSearch

- (instancetype)initWithGraph:(id<Graph>)graph
withComGraphhopperRoutingWeightingWeighting:(id<ComGraphhopperRoutingWeightingWeighting>)weighting
        withTraversalModeEnum:(TraversalModeEnum *)tMode
                   withDouble:(jdouble)explorationFactor {
  if (self = [super initWithGraph:graph withComGraphhopperRoutingWeightingWeighting:weighting withTraversalModeEnum:tMode]) {
    self->explorationFactor_ = explorationFactor;
  }
  return self;
}

- (id<GnuTroveMapTIntObjectMap>)getBestWeightMapFrom {
  return bestWeightMapFrom_;
}

- (id<GnuTroveMapTIntObjectMap>)getBestWeightMapTo {
  return bestWeightMapTo_;
}

- (jboolean)finished {
  if (finishedFrom_ && finishedTo_) return YES;
  if ([self isMaxVisitedNodesExceeded]) return YES;
  if (![((PathBidirRef *) nil_chk(bestPath_)) isFound] && (finishedFrom_ || finishedTo_)) return YES;
  return ((AStar_AStarEntry *) nil_chk(currFrom_))->weight_ + ((AStar_AStarEntry *) nil_chk(currTo_))->weight_ > explorationFactor_ * [bestPath_ getWeight];
}

- (Path *)searchBestWithInt:(jint)to
                    withInt:(jint)from {
  [self createAndInitPath];
  [self initFromWithInt:to withDouble:0];
  [self initToWithInt:from withDouble:0];
  [self runAlgo];
  return [self extractPath];
}

- (id<JavaUtilList>)calcAlternativesWithInt:(jint)maxPaths
                                 withDouble:(jdouble)maxWeightFactor
                                 withDouble:(jdouble)weightInfluence
                                 withDouble:(jdouble)maxShareFactor
                                 withDouble:(jdouble)shareInfluence
                                 withDouble:(jdouble)minPlateauFactor
                                 withDouble:(jdouble)plateauInfluence {
  jdouble maxWeight = maxWeightFactor * [((PathBidirRef *) nil_chk(bestPath_)) getWeight];
  GnuTroveMapHashTIntObjectHashMap *traversalIDMap = [[[GnuTroveMapHashTIntObjectHashMap alloc] init] autorelease];
  JavaUtilConcurrentAtomicAtomicInteger *startTID = [self addToMapWithGnuTroveMapHashTIntObjectHashMap:traversalIDMap withPath:bestPath_];
  id<JavaUtilList> alternatives = [[[JavaUtilArrayList alloc] initWithInt:maxPaths] autorelease];
  jdouble bestPlateau = [bestPath_ getWeight];
  jdouble bestShare = 0;
  jdouble sortBy = AlternativeRoute_calcSortByWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(weightInfluence, [bestPath_ getWeight], shareInfluence, bestShare, plateauInfluence, bestPlateau);
  AlternativeRoute_AlternativeInfo *bestAlt = [[[AlternativeRoute_AlternativeInfo alloc] initWithDouble:sortBy withPath:bestPath_ withSPTEntry:bestPath_->sptEntry_ withSPTEntry:bestPath_->edgeTo_ withDouble:bestShare withJavaUtilList:AlternativeRoute_getAltNamesWithGraph_withSPTEntry_(graph_, bestPath_->sptEntry_)] autorelease];
  [alternatives addWithId:bestAlt];
  id<JavaUtilList> bestPathEntries = [[[JavaUtilArrayList alloc] initWithInt:2] autorelease];
  [((id<GnuTroveMapTIntObjectMap>) nil_chk(bestWeightMapFrom_)) forEachEntryWithGnuTroveProcedureTIntObjectProcedure:[[[AlternativeRoute_AlternativeBidirSearch_$1 alloc] initWithAlternativeRoute_AlternativeBidirSearch:self withDouble:maxWeight withDouble:minPlateauFactor withDouble:maxShareFactor withDouble:weightInfluence withDouble:shareInfluence withDouble:plateauInfluence withJavaUtilList:alternatives withInt:maxPaths withAlternativeRoute_AlternativeInfo:bestAlt withGnuTroveMapHashTIntObjectHashMap:traversalIDMap withJavaUtilConcurrentAtomicAtomicInteger:startTID withJavaUtilList:bestPathEntries] autorelease]];
  return alternatives;
}

- (JavaUtilConcurrentAtomicAtomicInteger *)addToMapWithGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)map
                                                                               withPath:(Path *)path {
  id<GnuTroveSetTIntSet> set = [[[GnuTroveSetHashTIntHashSet alloc] init] autorelease];
  JavaUtilConcurrentAtomicAtomicInteger *startTID = [[[JavaUtilConcurrentAtomicAtomicInteger alloc] initWithInt:-1] autorelease];
  for (id<EdgeIteratorState> __strong iterState in nil_chk([((Path *) nil_chk(path)) calcEdges])) {
    jint tid = [((TraversalModeEnum *) nil_chk(traversalMode_)) createTraversalIdWithEdgeIteratorState:iterState withBoolean:NO];
    [set addWithInt:tid];
    if ([startTID get] < 0) {
      if (![traversalMode_ isEdgeBased]) {
        tid = [((id<EdgeIteratorState>) nil_chk(iterState)) getBaseNode];
        [set addWithInt:tid];
      }
      [startTID setWithInt:tid];
    }
  }
  [((GnuTroveMapHashTIntObjectHashMap *) nil_chk(map)) putWithInt:[startTID get] withId:set];
  return startTID;
}

- (void)copyAllFieldsTo:(AlternativeRoute_AlternativeBidirSearch *)other {
  [super copyAllFieldsTo:other];
  other->explorationFactor_ = explorationFactor_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGraph:withComGraphhopperRoutingWeightingWeighting:withTraversalModeEnum:withDouble:", "AlternativeBidirSearch", NULL, 0x1, NULL },
    { "getBestWeightMapFrom", NULL, "Lgnu.trove.map.TIntObjectMap;", 0x1, NULL },
    { "getBestWeightMapTo", NULL, "Lgnu.trove.map.TIntObjectMap;", 0x1, NULL },
    { "finished", NULL, "Z", 0x1, NULL },
    { "searchBestWithInt:withInt:", "searchBest", "Lcom.graphhopper.routing.Path;", 0x1, NULL },
    { "calcAlternativesWithInt:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "calcAlternatives", "Ljava.util.List;", 0x1, NULL },
    { "addToMapWithGnuTroveMapHashTIntObjectHashMap:withPath:", "addToMap", "Ljava.util.concurrent.atomic.AtomicInteger;", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "explorationFactor_", NULL, 0x12, "D", NULL,  },
  };
  static const J2ObjcClassInfo _AlternativeRoute_AlternativeBidirSearch = { 1, "AlternativeBidirSearch", "com.graphhopper.routing", "AlternativeRoute", 0x9, 7, methods, 1, fields, 0, NULL};
  return &_AlternativeRoute_AlternativeBidirSearch;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AlternativeRoute_AlternativeBidirSearch)

@implementation AlternativeRoute_AlternativeBidirSearch_$1

- (jboolean)executeWithInt:(jint)traversalId
                    withId:(SPTEntry *)fromSPTEntry {
  SPTEntry *toSPTEntry = [((id<GnuTroveMapTIntObjectMap>) nil_chk(this$0_->bestWeightMapTo_)) getWithInt:traversalId];
  if (toSPTEntry == nil) return YES;
  if ([((TraversalModeEnum *) nil_chk(this$0_->traversalMode_)) isEdgeBased]) {
    if (((SPTEntry *) nil_chk(toSPTEntry))->parent_ != nil) toSPTEntry = toSPTEntry->parent_;
  }
  else if (((SPTEntry *) nil_chk(fromSPTEntry))->edge_ == ((SPTEntry *) nil_chk(toSPTEntry))->edge_) return YES;
  jdouble weight = [((SPTEntry *) nil_chk(fromSPTEntry)) getWeightOfVisitedPath] + [((SPTEntry *) nil_chk(toSPTEntry)) getWeightOfVisitedPath];
  if (weight > val$maxWeight_) return YES;
  if ([self isBestPathWithSPTEntry:fromSPTEntry withPath:this$0_->bestPath_]) return YES;
  SPTEntry *tmpFromEntry = [this$0_->traversalMode_ isEdgeBased] ? fromSPTEntry->parent_ : fromSPTEntry;
  if (tmpFromEntry == nil || tmpFromEntry->parent_ == nil) {
    NSAssert([this$0_->traversalMode_ isEdgeBased], @"com/graphhopper/routing/AlternativeRoute.java:360 condition failed: assert traversalMode.isEdgeBased();");
  }
  else {
    jint nextToTraversalId = [this$0_->traversalMode_ createTraversalIdWithInt:tmpFromEntry->adjNode_ withInt:tmpFromEntry->parent_->adjNode_ withInt:tmpFromEntry->edge_ withBoolean:YES];
    SPTEntry *tmpNextToSPTEntry = [this$0_->bestWeightMapTo_ getWithInt:nextToTraversalId];
    if (tmpNextToSPTEntry == nil) return YES;
    if ([this$0_->traversalMode_ isEdgeBased]) tmpNextToSPTEntry = ((SPTEntry *) nil_chk(tmpNextToSPTEntry))->parent_;
    if (fromSPTEntry->edge_ == ((SPTEntry *) nil_chk(tmpNextToSPTEntry))->edge_) return YES;
  }
  jdouble plateauWeight = 0;
  SPTEntry *prevToSPTEntry = toSPTEntry;
  while (prevToSPTEntry->parent_ != nil) {
    jint nextFromTraversalId = [this$0_->traversalMode_ createTraversalIdWithInt:prevToSPTEntry->adjNode_ withInt:((SPTEntry *) nil_chk(prevToSPTEntry->parent_))->adjNode_ withInt:prevToSPTEntry->edge_ withBoolean:NO];
    SPTEntry *nextFromSPTEntry = [((id<GnuTroveMapTIntObjectMap>) nil_chk(this$0_->bestWeightMapFrom_)) getWithInt:nextFromTraversalId];
    if (nextFromSPTEntry == nil) break;
    if (prevToSPTEntry->edge_ != ((SPTEntry *) nil_chk(nextFromSPTEntry))->edge_) break;
    plateauWeight += ([prevToSPTEntry getWeightOfVisitedPath] - [prevToSPTEntry->parent_ getWeightOfVisitedPath]);
    prevToSPTEntry = prevToSPTEntry->parent_;
  }
  if (plateauWeight <= 0 || plateauWeight / weight < val$minPlateauFactor_) return YES;
  if (fromSPTEntry->parent_ == nil) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"not implemented yet. in case of an edge based traversal the parent of fromSPTEntry could be null"] autorelease];
  SPTEntry *fromEE = [self getFirstShareEEWithSPTEntry:fromSPTEntry->parent_ withBoolean:YES];
  SPTEntry *toEE = [self getFirstShareEEWithSPTEntry:toSPTEntry->parent_ withBoolean:NO];
  jdouble shareWeight = [((SPTEntry *) nil_chk(fromEE)) getWeightOfVisitedPath] + [((SPTEntry *) nil_chk(toEE)) getWeightOfVisitedPath];
  jboolean smallShare = shareWeight / [((PathBidirRef *) nil_chk(this$0_->bestPath_)) getWeight] < val$maxShareFactor_;
  if (smallShare) {
    id<JavaUtilList> altNames = AlternativeRoute_getAltNamesWithGraph_withSPTEntry_(this$0_->graph_, fromSPTEntry);
    jdouble sortBy = AlternativeRoute_calcSortByWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(val$weightInfluence_, weight, val$shareInfluence_, shareWeight, val$plateauInfluence_, plateauWeight);
    jdouble worstSortBy = [self getWorstSortBy];
    if (sortBy < worstSortBy || [((id<JavaUtilList>) nil_chk(val$alternatives_)) size] < val$maxPaths_) {
      Path *path = [((Path *) nil_chk([((PathBidirRef *) nil_chk([((PathBidirRef *) [[[PathBidirRef alloc] initWithGraph:this$0_->graph_ withComGraphhopperRoutingWeightingWeighting:this$0_->weighting_] autorelease]) setSPTEntryToWithSPTEntry:toSPTEntry])) setSPTEntryWithSPTEntry:fromSPTEntry])) setWeightWithDouble:weight];
      [((Path *) nil_chk(path)) extract];
      [((id<JavaUtilList>) nil_chk(val$alternatives_)) addWithId:[[[AlternativeRoute_AlternativeInfo alloc] initWithDouble:sortBy withPath:path withSPTEntry:fromEE withSPTEntry:toEE withDouble:shareWeight withJavaUtilList:altNames] autorelease]];
      JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(val$alternatives_, AlternativeRoute_get_ALT_COMPARATOR_());
      if ([val$alternatives_ getWithInt:0] != val$bestAlt_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"best path should be always first entry"] autorelease];
      if ([val$alternatives_ size] > val$maxPaths_) [((id<JavaUtilList>) nil_chk([val$alternatives_ subListWithInt:val$maxPaths_ withInt:[val$alternatives_ size]])) clear];
    }
  }
  return YES;
}

- (SPTEntry *)getFirstShareEEWithSPTEntry:(SPTEntry *)startEE
                              withBoolean:(jboolean)reverse {
  while (((SPTEntry *) nil_chk(startEE))->parent_ != nil) {
    jint tid = [((TraversalModeEnum *) nil_chk(this$0_->traversalMode_)) createTraversalIdWithInt:startEE->adjNode_ withInt:((SPTEntry *) nil_chk(startEE->parent_))->adjNode_ withInt:startEE->edge_ withBoolean:reverse];
    if ([self isAlreadyExistingWithInt:tid]) return startEE;
    startEE = startEE->parent_;
  }
  return startEE;
}

- (jboolean)isAlreadyExistingWithInt:(jint)tid {
  return ![((GnuTroveMapHashTIntObjectHashMap *) nil_chk(val$traversalIDMap_)) forEachValueWithGnuTroveProcedureTObjectProcedure:[[[AlternativeRoute_AlternativeBidirSearch_$1_$1 alloc] initWithInt:tid] autorelease]];
}

- (jdouble)getWorstSortBy {
  if ([((id<JavaUtilList>) nil_chk(val$alternatives_)) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Empty alternative list cannot happen"] autorelease];
  return ((AlternativeRoute_AlternativeInfo *) nil_chk([val$alternatives_ getWithInt:[val$alternatives_ size] - 1]))->sortBy_;
}

- (jboolean)isBestPathWithSPTEntry:(SPTEntry *)fromSPTEntry
                          withPath:(Path *)bestPath {
  if ([((TraversalModeEnum *) nil_chk(this$0_->traversalMode_)) isEdgeBased]) {
    if (GHUtility_getEdgeFromEdgeKeyWithInt_([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$startTID_)) get]) == ((SPTEntry *) nil_chk(fromSPTEntry))->edge_) {
      if (fromSPTEntry->parent_ == nil) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"best path must have no parent but was non-null: ", fromSPTEntry)] autorelease];
      return YES;
    }
  }
  else if (((SPTEntry *) nil_chk(fromSPTEntry))->parent_ == nil) {
    [((id<JavaUtilList>) nil_chk(val$bestPathEntries_)) addWithId:fromSPTEntry];
    if ([val$bestPathEntries_ size] > 1) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@", @"There is only one best path but was: ", val$bestPathEntries_)] autorelease];
    if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$startTID_)) get] != fromSPTEntry->adjNode_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("$@$I", @"Start traversal ID has to be identical to root edge entry which is the plateau start of the best path but was: ", val$startTID_, @" vs. adjNode: ", fromSPTEntry->adjNode_)] autorelease];
    return YES;
  }
  return NO;
}

- (instancetype)initWithAlternativeRoute_AlternativeBidirSearch:(AlternativeRoute_AlternativeBidirSearch *)outer$
                                                     withDouble:(jdouble)capture$0
                                                     withDouble:(jdouble)capture$1
                                                     withDouble:(jdouble)capture$2
                                                     withDouble:(jdouble)capture$3
                                                     withDouble:(jdouble)capture$4
                                                     withDouble:(jdouble)capture$5
                                               withJavaUtilList:(id<JavaUtilList>)capture$6
                                                        withInt:(jint)capture$7
                           withAlternativeRoute_AlternativeInfo:(AlternativeRoute_AlternativeInfo *)capture$8
                           withGnuTroveMapHashTIntObjectHashMap:(GnuTroveMapHashTIntObjectHashMap *)capture$9
                      withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$10
                                               withJavaUtilList:(id<JavaUtilList>)capture$11 {
  AlternativeRoute_AlternativeBidirSearch_$1_set_this$0_(self, outer$);
  val$maxWeight_ = capture$0;
  val$minPlateauFactor_ = capture$1;
  val$maxShareFactor_ = capture$2;
  val$weightInfluence_ = capture$3;
  val$shareInfluence_ = capture$4;
  val$plateauInfluence_ = capture$5;
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$alternatives_(self, capture$6);
  val$maxPaths_ = capture$7;
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$bestAlt_(self, capture$8);
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$traversalIDMap_(self, capture$9);
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$startTID_(self, capture$10);
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$bestPathEntries_(self, capture$11);
  return [super init];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$alternatives_);
  RELEASE_(val$bestAlt_);
  RELEASE_(val$traversalIDMap_);
  RELEASE_(val$startTID_);
  RELEASE_(val$bestPathEntries_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(AlternativeRoute_AlternativeBidirSearch_$1 *)other {
  [super copyAllFieldsTo:other];
  AlternativeRoute_AlternativeBidirSearch_$1_set_this$0_(other, this$0_);
  other->val$maxWeight_ = val$maxWeight_;
  other->val$minPlateauFactor_ = val$minPlateauFactor_;
  other->val$maxShareFactor_ = val$maxShareFactor_;
  other->val$weightInfluence_ = val$weightInfluence_;
  other->val$shareInfluence_ = val$shareInfluence_;
  other->val$plateauInfluence_ = val$plateauInfluence_;
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$alternatives_(other, val$alternatives_);
  other->val$maxPaths_ = val$maxPaths_;
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$bestAlt_(other, val$bestAlt_);
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$traversalIDMap_(other, val$traversalIDMap_);
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$startTID_(other, val$startTID_);
  AlternativeRoute_AlternativeBidirSearch_$1_set_val$bestPathEntries_(other, val$bestPathEntries_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithInt:withSPTEntry:", "execute", "Z", 0x1, NULL },
    { "getFirstShareEEWithSPTEntry:withBoolean:", "getFirstShareEE", "Lcom.graphhopper.storage.SPTEntry;", 0x0, NULL },
    { "isAlreadyExistingWithInt:", "isAlreadyExisting", "Z", 0x0, NULL },
    { "getWorstSortBy", NULL, "D", 0x0, NULL },
    { "isBestPathWithSPTEntry:withPath:", "isBestPath", "Z", 0x0, NULL },
    { "initWithAlternativeRoute_AlternativeBidirSearch:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withJavaUtilList:withInt:withAlternativeRoute_AlternativeInfo:withGnuTroveMapHashTIntObjectHashMap:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilList:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.graphhopper.routing.AlternativeRoute$AlternativeBidirSearch;", NULL,  },
    { "val$maxWeight_", NULL, 0x1012, "D", NULL,  },
    { "val$minPlateauFactor_", NULL, 0x1012, "D", NULL,  },
    { "val$maxShareFactor_", NULL, 0x1012, "D", NULL,  },
    { "val$weightInfluence_", NULL, 0x1012, "D", NULL,  },
    { "val$shareInfluence_", NULL, 0x1012, "D", NULL,  },
    { "val$plateauInfluence_", NULL, 0x1012, "D", NULL,  },
    { "val$alternatives_", NULL, 0x1012, "Ljava.util.List;", NULL,  },
    { "val$maxPaths_", NULL, 0x1012, "I", NULL,  },
    { "val$bestAlt_", NULL, 0x1012, "Lcom.graphhopper.routing.AlternativeRoute$AlternativeInfo;", NULL,  },
    { "val$traversalIDMap_", NULL, 0x1012, "Lgnu.trove.map.hash.TIntObjectHashMap;", NULL,  },
    { "val$startTID_", NULL, 0x1012, "Ljava.util.concurrent.atomic.AtomicInteger;", NULL,  },
    { "val$bestPathEntries_", NULL, 0x1012, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _AlternativeRoute_AlternativeBidirSearch_$1 = { 1, "$1", "com.graphhopper.routing", "AlternativeRoute$AlternativeBidirSearch", 0x8000, 6, methods, 13, fields, 0, NULL};
  return &_AlternativeRoute_AlternativeBidirSearch_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AlternativeRoute_AlternativeBidirSearch_$1)

@implementation AlternativeRoute_AlternativeBidirSearch_$1_$1

- (jboolean)executeWithId:(id<GnuTroveSetTIntSet>)set {
  return ![((id<GnuTroveSetTIntSet>) nil_chk(set)) containsWithInt:val$tid_];
}

- (instancetype)initWithInt:(jint)capture$0 {
  val$tid_ = capture$0;
  return [super init];
}

- (void)copyAllFieldsTo:(AlternativeRoute_AlternativeBidirSearch_$1_$1 *)other {
  [super copyAllFieldsTo:other];
  other->val$tid_ = val$tid_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "executeWithGnuTroveSetTIntSet:", "execute", "Z", 0x1, NULL },
    { "initWithInt:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$tid_", NULL, 0x1012, "I", NULL,  },
  };
  static const J2ObjcClassInfo _AlternativeRoute_AlternativeBidirSearch_$1_$1 = { 1, "$1", "com.graphhopper.routing", "AlternativeRoute$AlternativeBidirSearch$$1", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_AlternativeRoute_AlternativeBidirSearch_$1_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AlternativeRoute_AlternativeBidirSearch_$1_$1)

@implementation AlternativeRoute_PlateauInfo

- (instancetype)initWithNSString:(NSString *)name
                withJavaUtilList:(id<JavaUtilList>)edges {
  if (self = [super init]) {
    AlternativeRoute_PlateauInfo_set_name_(self, name);
    AlternativeRoute_PlateauInfo_set_edges_(self, edges);
  }
  return self;
}

- (NSString *)description {
  return name_;
}

- (id<JavaUtilList>)getEdges {
  return edges_;
}

- (NSString *)getName {
  return name_;
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(edges_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(AlternativeRoute_PlateauInfo *)other {
  [super copyAllFieldsTo:other];
  AlternativeRoute_PlateauInfo_set_name_(other, name_);
  AlternativeRoute_PlateauInfo_set_edges_(other, edges_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withJavaUtilList:", "PlateauInfo", NULL, 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getEdges", NULL, "Ljava.util.List;", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
    { "edges_", NULL, 0x0, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _AlternativeRoute_PlateauInfo = { 1, "PlateauInfo", "com.graphhopper.routing", "AlternativeRoute", 0x9, 4, methods, 2, fields, 0, NULL};
  return &_AlternativeRoute_PlateauInfo;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AlternativeRoute_PlateauInfo)

@implementation AlternativeRoute_$1

- (jint)compareWithId:(AlternativeRoute_AlternativeInfo *)o1
               withId:(AlternativeRoute_AlternativeInfo *)o2 {
  return JavaLangDouble_compareWithDouble_withDouble_(((AlternativeRoute_AlternativeInfo *) nil_chk(o1))->sortBy_, ((AlternativeRoute_AlternativeInfo *) nil_chk(o2))->sortBy_);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithAlternativeRoute_AlternativeInfo:withAlternativeRoute_AlternativeInfo:", "compare", "I", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _AlternativeRoute_$1 = { 1, "$1", "com.graphhopper.routing", "AlternativeRoute", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_AlternativeRoute_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(AlternativeRoute_$1)
