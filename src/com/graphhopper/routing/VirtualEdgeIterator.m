//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/routing/VirtualEdgeIterator.h"
#include "com/graphhopper/routing/util/FlagEncoder.h"
#include "com/graphhopper/util/CHEdgeIteratorState.h"
#include "com/graphhopper/util/EdgeIterator.h"
#include "com/graphhopper/util/EdgeIteratorState.h"
#include "com/graphhopper/util/PointList.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface VirtualEdgeIterator () {
 @public
  id<JavaUtilList> edges_;
  jint current_;
}
@end

J2OBJC_FIELD_SETTER(VirtualEdgeIterator, edges_, id<JavaUtilList>)

@implementation VirtualEdgeIterator

- (instancetype)initWithInt:(jint)edgeCount {
  if (self = [super init]) {
    VirtualEdgeIterator_setAndConsume_edges_(self, [[JavaUtilArrayList alloc] initWithInt:edgeCount]);
    [self reset];
  }
  return self;
}

- (void)addWithEdgeIteratorState:(id<EdgeIteratorState>)edge {
  [((id<JavaUtilList>) nil_chk(edges_)) addWithId:edge];
}

- (id<EdgeIterator>)reset {
  current_ = -1;
  return self;
}

- (jint)count {
  return [((id<JavaUtilList>) nil_chk(edges_)) size];
}

- (jboolean)next {
  current_++;
  return current_ < [((id<JavaUtilList>) nil_chk(edges_)) size];
}

- (id<EdgeIteratorState>)detachWithBoolean:(jboolean)reverse {
  if (reverse) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Not yet supported"] autorelease];
  return [((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_];
}

- (jint)getEdge {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) getEdge];
}

- (jint)getBaseNode {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) getBaseNode];
}

- (jint)getAdjNode {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) getAdjNode];
}

- (PointList *)fetchWayGeometryWithInt:(jint)mode {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) fetchWayGeometryWithInt:mode];
}

- (id<EdgeIteratorState>)setWayGeometryWithPointList:(PointList *)list {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) setWayGeometryWithPointList:list];
}

- (jdouble)getDistance {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) getDistance];
}

- (id<EdgeIteratorState>)setDistanceWithDouble:(jdouble)dist {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) setDistanceWithDouble:dist];
}

- (jlong)getFlags {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) getFlags];
}

- (id<EdgeIteratorState>)setFlagsWithLong:(jlong)flags {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) setFlagsWithLong:flags];
}

- (NSString *)getName {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) getName];
}

- (id<EdgeIteratorState>)setNameWithNSString:(NSString *)name {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) setNameWithNSString:name];
}

- (jboolean)getBoolWithInt:(jint)key
               withBoolean:(jboolean)_default {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) getBoolWithInt:key withBoolean:_default];
}

- (NSString *)description {
  return [((id<JavaUtilList>) nil_chk(edges_)) description];
}

- (jint)getAdditionalField {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) getAdditionalField];
}

- (id<EdgeIteratorState>)setAdditionalFieldWithInt:(jint)value {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) setAdditionalFieldWithInt:value];
}

- (id<EdgeIteratorState>)copyPropertiesToWithEdgeIteratorState:(id<EdgeIteratorState>)edge {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) copyPropertiesToWithEdgeIteratorState:edge];
}

- (jboolean)isBackwardWithFlagEncoder:(id<FlagEncoder>)encoder {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) isBackwardWithFlagEncoder:encoder];
}

- (jboolean)isForwardWithFlagEncoder:(id<FlagEncoder>)encoder {
  return [((id<EdgeIteratorState>) nil_chk([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_])) isForwardWithFlagEncoder:encoder];
}

- (jboolean)isShortcut {
  id<EdgeIteratorState> edge = [((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_];
  return [CHEdgeIteratorState_class_() isInstance:edge] && [((id<CHEdgeIteratorState>) nil_chk(((id<CHEdgeIteratorState>) check_protocol_cast(edge, @protocol(CHEdgeIteratorState))))) isShortcut];
}

- (jdouble)getWeight {
  return [((id<CHEdgeIteratorState>) nil_chk(((id<CHEdgeIteratorState>) check_protocol_cast([((id<JavaUtilList>) nil_chk(edges_)) getWithInt:current_], @protocol(CHEdgeIteratorState))))) getWeight];
}

- (id<CHEdgeIteratorState>)setWeightWithDouble:(jdouble)weight {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (jint)getSkippedEdge1 {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (jint)getSkippedEdge2 {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (void)setSkippedEdgesWithInt:(jint)edge1
                       withInt:(jint)edge2 {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (jboolean)canBeOverwrittenWithLong:(jlong)flags {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"Not supported."] autorelease];
}

- (void)dealloc {
  RELEASE_(edges_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(VirtualEdgeIterator *)other {
  [super copyAllFieldsTo:other];
  VirtualEdgeIterator_set_edges_(other, edges_);
  other->current_ = current_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "VirtualEdgeIterator", NULL, 0x1, NULL },
    { "addWithEdgeIteratorState:", "add", "V", 0x0, NULL },
    { "reset", NULL, "Lcom.graphhopper.util.EdgeIterator;", 0x0, NULL },
    { "count", NULL, "I", 0x0, NULL },
    { "next", NULL, "Z", 0x1, NULL },
    { "detachWithBoolean:", "detach", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getEdge", NULL, "I", 0x1, NULL },
    { "getBaseNode", NULL, "I", 0x1, NULL },
    { "getAdjNode", NULL, "I", 0x1, NULL },
    { "fetchWayGeometryWithInt:", "fetchWayGeometry", "Lcom.graphhopper.util.PointList;", 0x1, NULL },
    { "setWayGeometryWithPointList:", "setWayGeometry", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getDistance", NULL, "D", 0x1, NULL },
    { "setDistanceWithDouble:", "setDistance", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getFlags", NULL, "J", 0x1, NULL },
    { "setFlagsWithLong:", "setFlags", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setNameWithNSString:", "setName", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "getBoolWithInt:withBoolean:", "getBool", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getAdditionalField", NULL, "I", 0x1, NULL },
    { "setAdditionalFieldWithInt:", "setAdditionalField", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "copyPropertiesToWithEdgeIteratorState:", "copyPropertiesTo", "Lcom.graphhopper.util.EdgeIteratorState;", 0x1, NULL },
    { "isBackwardWithFlagEncoder:", "isBackward", "Z", 0x1, NULL },
    { "isForwardWithFlagEncoder:", "isForward", "Z", 0x1, NULL },
    { "isShortcut", NULL, "Z", 0x1, NULL },
    { "getWeight", NULL, "D", 0x1, NULL },
    { "setWeightWithDouble:", "setWeight", "Lcom.graphhopper.util.CHEdgeIteratorState;", 0x1, NULL },
    { "getSkippedEdge1", NULL, "I", 0x1, NULL },
    { "getSkippedEdge2", NULL, "I", 0x1, NULL },
    { "setSkippedEdgesWithInt:withInt:", "setSkippedEdges", "V", 0x1, NULL },
    { "canBeOverwrittenWithLong:", "canBeOverwritten", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "edges_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "current_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _VirtualEdgeIterator = { 1, "VirtualEdgeIterator", "com.graphhopper.routing", NULL, 0x0, 31, methods, 2, fields, 0, NULL};
  return &_VirtualEdgeIterator;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(VirtualEdgeIterator)
