//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/PathWrapper.java
//

#ifndef _PathWrapper_H_
#define _PathWrapper_H_

@class BBox;
@class InstructionList;
@class JavaLangThrowable;
@class PointList;
@protocol JavaUtilList;

#include "J2ObjC_header.h"

/**
 @brief This class holds the data like points and instructions of a Path.
 <p>
 @author Peter Karich
 */
@interface PathWrapper : NSObject {
}

/**
 @return the description of this route alternative to make it meaningful for the user e.g. it displays one or two main roads of the route.
 */
- (id<JavaUtilList>)getDescription;

- (PathWrapper *)setDescriptionWithJavaUtilList:(id<JavaUtilList>)names;

- (PathWrapper *)addDebugInfoWithNSString:(NSString *)debugInfo;

- (NSString *)getDebugInfo;

/**
 @brief This method returns all points on the path.
 Keep in mind that calculating the distance from these points might yield different results compared to getDistance as points could have been simplified on import or after querying.
 */
- (PointList *)getPoints;

- (PathWrapper *)setPointsWithPointList:(PointList *)points;

/**
 @brief This method returns the input points snapped to the road network.
 */
- (PointList *)getWaypoints;

/**
 @brief This method initializes this path with the snapped input points.
 */
- (void)setWaypointsWithPointList:(PointList *)wpList;

/**
 @brief This method returns the distance of the path.
 Always prefer this method over getPoints().calcDistance <p>
 @return distance in meter
 */
- (jdouble)getDistance;

- (PathWrapper *)setDistanceWithDouble:(jdouble)distance;

/**
 @brief This method returns the total elevation change (going upwards) in meter.
 <p>
 @return ascend in meter
 */
- (jdouble)getAscend;

- (PathWrapper *)setAscendWithDouble:(jdouble)ascend;

/**
 @brief This method returns the total elevation change (going downwards) in meter.
 <p>
 @return decline in meter
 */
- (jdouble)getDescend;

- (PathWrapper *)setDescendWithDouble:(jdouble)descend;

/**
 @return time in millis
 */
- (jlong)getTime;

- (PathWrapper *)setTimeWithLong:(jlong)timeInMillis;

/**
 @brief This method returns a double value which is better than the time for comparison of routes but only if you know what you are doing, e.g. only to compare routes gained with the same query parameters like vehicle.
 */
- (jdouble)getRouteWeight;

- (PathWrapper *)setRouteWeightWithDouble:(jdouble)weight;

/**
 @brief Calculates the bounding box of this route response
 */
- (BBox *)calcRouteBBoxWithBBox:(BBox *)_fallback;

- (NSString *)description;

- (InstructionList *)getInstructions;

- (void)setInstructionsWithInstructionList:(InstructionList *)instructions;

/**
 @return true if this alternative response contains one or more errors
 */
- (jboolean)hasErrors;

- (id<JavaUtilList>)getErrors;

- (PathWrapper *)addErrorWithJavaLangThrowable:(JavaLangThrowable *)error;

- (PathWrapper *)addErrorsWithJavaUtilList:(id<JavaUtilList>)errors;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(PathWrapper)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

typedef PathWrapper ComGraphhopperPathWrapper;

J2OBJC_TYPE_LITERAL_HEADER(PathWrapper)

#endif // _PathWrapper_H_
