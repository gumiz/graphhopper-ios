//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/Helper.java
//

#ifndef _Helper_H_
#define _Helper_H_

@class AngleCalc;
@class BBox;
@class DistanceCalc3D;
@class DistancePlaneProjection;
@class IOSDoubleArray;
@class IOSIntArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaLangPackage;
@class JavaNioByteBuffer;
@class JavaNioCharsetCharset;
@class JavaTextDateFormat;
@class JavaUtilArrayList;
@class JavaUtilLocale;
@class JavaUtilTimeZone;
@class PointList;
@protocol DistanceCalc;
@protocol GnuTroveListTIntList;
@protocol JavaIoCloseable;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol OrgSlf4jLogger;

#include "J2ObjC_header.h"
#include "java/security/PrivilegedExceptionAction.h"

#define Helper_DEGREE_FACTOR 5368709.0f
#define Helper_ELE_FACTOR 1000.0f
#define Helper_MB 1048576LL

/**
 @brief Copy of original 'Helper.java' omitting calls to totalMemory(), freeMemory() and usage of MappedByteBuffer so j2objc is able to translate the class.
 Several utility classes which are compatible with Java6 on Android. <p>
 @author Peter Karich
 */
@interface Helper : NSObject {
}

+ (JavaUtilArrayList *)tIntListToArrayListWithGnuTroveListTIntList:(id<GnuTroveListTIntList>)from;

+ (JavaUtilLocale *)getLocaleWithNSString:(NSString *)param;

+ (NSString *)packageToPathWithJavaLangPackage:(JavaLangPackage *)pkg;

+ (jint)countBitValueWithInt:(jint)maxTurnCosts;

+ (void)loadPropertiesWithJavaUtilMap:(id<JavaUtilMap>)map
                     withJavaIoReader:(JavaIoReader *)tmpReader;

+ (void)savePropertiesWithJavaUtilMap:(id<JavaUtilMap>)map
                     withJavaIoWriter:(JavaIoWriter *)tmpWriter;

+ (id<JavaUtilList>)readFileWithNSString:(NSString *)file;

+ (id<JavaUtilList>)readFileWithJavaIoReader:(JavaIoReader *)simpleReader;

+ (NSString *)isToStringWithJavaIoInputStream:(JavaIoInputStream *)inputStream;

+ (jint)idealIntArraySizeWithInt:(jint)need;

+ (jint)idealByteArraySizeWithInt:(jint)need;

+ (jboolean)removeDirWithJavaIoFile:(JavaIoFile *)file;

+ (jlong)getTotalMB;

+ (jlong)getUsedMB;

+ (NSString *)getMemInfo;

+ (jint)getSizeOfObjectRefWithInt:(jint)factor;

+ (jint)getSizeOfLongArrayWithInt:(jint)length
                          withInt:(jint)factor;

+ (jint)getSizeOfObjectArrayWithInt:(jint)length
                            withInt:(jint)factor;

+ (void)closeWithJavaIoCloseable:(id<JavaIoCloseable>)cl;

+ (jboolean)isEmptyWithNSString:(NSString *)str;

/**
 @brief Determines if the specified ByteBuffer is one which maps to a file!
 */
+ (jint)calcIndexSizeWithBBox:(BBox *)graphBounds;

+ (NSString *)pruneFileEndWithNSString:(NSString *)file;

+ (id<JavaUtilList>)createDoubleListWithDoubleArray:(IOSDoubleArray *)values;

+ (id<GnuTroveListTIntList>)createTListWithIntArray:(IOSIntArray *)list;

+ (PointList *)createPointListWithDoubleArray:(IOSDoubleArray *)list;

+ (PointList *)createPointList3DWithDoubleArray:(IOSDoubleArray *)list;

/**
 @brief Converts into an integer to be compatible with the still limited DataAccess class (accepts only integer values).
 But this conversion also reduces memory consumption where the precision loss is accceptable. As +- 180° and +-90° are assumed as maximum values. <p>
 @return the integer of the specified degree
 */
+ (jint)degreeToIntWithDouble:(jdouble)deg;

/**
 @brief Converts back the integer value.
 <p>
 @return the degree value of the specified integer
 */
+ (jdouble)intToDegreeWithInt:(jint)storedInt;

/**
 @brief Converts elevation value (in meters) into integer for storage.
 */
+ (jint)eleToIntWithDouble:(jdouble)ele;

/**
 @brief Converts the integer value retrieved from storage into elevation (in meters).
 Do not expect more precision than meters although it currently is!
 */
+ (jdouble)intToEleWithInt:(jint)integEle;

+ (void)cleanMappedByteBufferWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer;

/**
 @brief Trying to force the release of the mapped ByteBuffer.
 See http://stackoverflow.com/q/2972986/194609 and use only if you know what you are doing.
 */
+ (void)cleanHack;

+ (NSString *)nfWithLong:(jlong)no;

+ (NSString *)firstBigWithNSString:(NSString *)sayText;

/**
 @brief This methods returns the value or min if too small or max if too big.
 */
+ (jdouble)keepInWithDouble:(jdouble)value
                 withDouble:(jdouble)min
                 withDouble:(jdouble)max;

/**
 @brief Round the value to the specified exponent
 */
+ (jdouble)roundWithDouble:(jdouble)value
                   withInt:(jint)exponent;

+ (jdouble)round6WithDouble:(jdouble)value;

+ (jdouble)round4WithDouble:(jdouble)value;

+ (jdouble)round2WithDouble:(jdouble)value;

/**
 @brief This creates a date formatter for yyyy-MM-dd'T'HH:mm:ss'Z' which is has to be identical to buildDate used in pom.xml
 */
+ (JavaTextDateFormat *)createFormatter;

/**
 @brief Creates a SimpleDateFormat with the UK locale.
 */
+ (JavaTextDateFormat *)createFormatterWithNSString:(NSString *)str;

/**
 @brief This method handles the specified (potentially negative) int as unsigned bit representation and returns the positive converted long.
 */
+ (jlong)toUnsignedLongWithInt:(jint)x;

/**
 @brief Converts the specified long back into a signed int (reverse method for toUnsignedLong)
 */
+ (jint)toSignedIntWithLong:(jlong)x;

+ (NSString *)camelCaseToUnderScoreWithNSString:(NSString *)key;

+ (NSString *)underScoreToCamelCaseWithNSString:(NSString *)key;

@end

FOUNDATION_EXPORT BOOL Helper_initialized;
J2OBJC_STATIC_INIT(Helper)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT JavaUtilArrayList *Helper_tIntListToArrayListWithGnuTroveListTIntList_(id<GnuTroveListTIntList> from);

FOUNDATION_EXPORT JavaUtilLocale *Helper_getLocaleWithNSString_(NSString *param);

FOUNDATION_EXPORT NSString *Helper_packageToPathWithJavaLangPackage_(JavaLangPackage *pkg);

FOUNDATION_EXPORT jint Helper_countBitValueWithInt_(jint maxTurnCosts);

FOUNDATION_EXPORT void Helper_loadPropertiesWithJavaUtilMap_withJavaIoReader_(id<JavaUtilMap> map, JavaIoReader *tmpReader);

FOUNDATION_EXPORT void Helper_savePropertiesWithJavaUtilMap_withJavaIoWriter_(id<JavaUtilMap> map, JavaIoWriter *tmpWriter);

FOUNDATION_EXPORT id<JavaUtilList> Helper_readFileWithNSString_(NSString *file);

FOUNDATION_EXPORT id<JavaUtilList> Helper_readFileWithJavaIoReader_(JavaIoReader *simpleReader);

FOUNDATION_EXPORT NSString *Helper_isToStringWithJavaIoInputStream_(JavaIoInputStream *inputStream);

FOUNDATION_EXPORT jint Helper_idealIntArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jint Helper_idealByteArraySizeWithInt_(jint need);

FOUNDATION_EXPORT jboolean Helper_removeDirWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT jlong Helper_getTotalMB();

FOUNDATION_EXPORT jlong Helper_getUsedMB();

FOUNDATION_EXPORT NSString *Helper_getMemInfo();

FOUNDATION_EXPORT jint Helper_getSizeOfObjectRefWithInt_(jint factor);

FOUNDATION_EXPORT jint Helper_getSizeOfLongArrayWithInt_withInt_(jint length, jint factor);

FOUNDATION_EXPORT jint Helper_getSizeOfObjectArrayWithInt_withInt_(jint length, jint factor);

FOUNDATION_EXPORT void Helper_closeWithJavaIoCloseable_(id<JavaIoCloseable> cl);

FOUNDATION_EXPORT jboolean Helper_isEmptyWithNSString_(NSString *str);

FOUNDATION_EXPORT jint Helper_calcIndexSizeWithBBox_(BBox *graphBounds);

FOUNDATION_EXPORT NSString *Helper_pruneFileEndWithNSString_(NSString *file);

FOUNDATION_EXPORT id<JavaUtilList> Helper_createDoubleListWithDoubleArray_(IOSDoubleArray *values);

FOUNDATION_EXPORT id<GnuTroveListTIntList> Helper_createTListWithIntArray_(IOSIntArray *list);

FOUNDATION_EXPORT PointList *Helper_createPointListWithDoubleArray_(IOSDoubleArray *list);

FOUNDATION_EXPORT PointList *Helper_createPointList3DWithDoubleArray_(IOSDoubleArray *list);

FOUNDATION_EXPORT jint Helper_degreeToIntWithDouble_(jdouble deg);

FOUNDATION_EXPORT jdouble Helper_intToDegreeWithInt_(jint storedInt);

FOUNDATION_EXPORT jint Helper_eleToIntWithDouble_(jdouble ele);

FOUNDATION_EXPORT jdouble Helper_intToEleWithInt_(jint integEle);

FOUNDATION_EXPORT void Helper_cleanMappedByteBufferWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer);

FOUNDATION_EXPORT void Helper_cleanHack();

FOUNDATION_EXPORT NSString *Helper_nfWithLong_(jlong no);

FOUNDATION_EXPORT NSString *Helper_firstBigWithNSString_(NSString *sayText);

FOUNDATION_EXPORT jdouble Helper_keepInWithDouble_withDouble_withDouble_(jdouble value, jdouble min, jdouble max);

FOUNDATION_EXPORT jdouble Helper_roundWithDouble_withInt_(jdouble value, jint exponent);

FOUNDATION_EXPORT jdouble Helper_round6WithDouble_(jdouble value);

FOUNDATION_EXPORT jdouble Helper_round4WithDouble_(jdouble value);

FOUNDATION_EXPORT jdouble Helper_round2WithDouble_(jdouble value);

FOUNDATION_EXPORT JavaTextDateFormat *Helper_createFormatter();

FOUNDATION_EXPORT JavaTextDateFormat *Helper_createFormatterWithNSString_(NSString *str);

FOUNDATION_EXPORT jlong Helper_toUnsignedLongWithInt_(jint x);

FOUNDATION_EXPORT jint Helper_toSignedIntWithLong_(jlong x);

FOUNDATION_EXPORT NSString *Helper_camelCaseToUnderScoreWithNSString_(NSString *key);

FOUNDATION_EXPORT NSString *Helper_underScoreToCamelCaseWithNSString_(NSString *key);

FOUNDATION_EXPORT id<DistanceCalc> Helper_DIST_EARTH_;
J2OBJC_STATIC_FIELD_GETTER(Helper, DIST_EARTH_, id<DistanceCalc>)

FOUNDATION_EXPORT DistanceCalc3D *Helper_DIST_3D_;
J2OBJC_STATIC_FIELD_GETTER(Helper, DIST_3D_, DistanceCalc3D *)

FOUNDATION_EXPORT DistancePlaneProjection *Helper_DIST_PLANE_;
J2OBJC_STATIC_FIELD_GETTER(Helper, DIST_PLANE_, DistancePlaneProjection *)

FOUNDATION_EXPORT AngleCalc *Helper_ANGLE_CALC_;
J2OBJC_STATIC_FIELD_GETTER(Helper, ANGLE_CALC_, AngleCalc *)

FOUNDATION_EXPORT JavaNioCharsetCharset *Helper_UTF_CS_;
J2OBJC_STATIC_FIELD_GETTER(Helper, UTF_CS_, JavaNioCharsetCharset *)

FOUNDATION_EXPORT JavaUtilTimeZone *Helper_UTC_;
J2OBJC_STATIC_FIELD_GETTER(Helper, UTC_, JavaUtilTimeZone *)

J2OBJC_STATIC_FIELD_GETTER(Helper, MB, jlong)

FOUNDATION_EXPORT id<OrgSlf4jLogger> Helper_LOGGER_;
J2OBJC_STATIC_FIELD_GETTER(Helper, LOGGER_, id<OrgSlf4jLogger>)

J2OBJC_STATIC_FIELD_GETTER(Helper, DEGREE_FACTOR, jfloat)

J2OBJC_STATIC_FIELD_GETTER(Helper, ELE_FACTOR, jfloat)
CF_EXTERN_C_END

typedef Helper ComGraphhopperUtilHelper;

J2OBJC_TYPE_LITERAL_HEADER(Helper)

@interface Helper_$1 : NSObject < JavaSecurityPrivilegedExceptionAction > {
}

- (id)run;

- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(Helper_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(Helper_$1)

#endif // _Helper_H_
