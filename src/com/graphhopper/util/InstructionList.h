//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/InstructionList.java
//

#ifndef _InstructionList_H_
#define _InstructionList_H_

@class Instruction;
@class JavaLangStringBuilder;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol Translation;

#include "J2ObjC_header.h"
#include "java/lang/Iterable.h"

/**
 @brief List of instructions.
 */
@interface InstructionList : NSObject < JavaLangIterable > {
}

- (instancetype)initWithTranslation:(id<Translation>)tr;

- (instancetype)initWithInt:(jint)cap
            withTranslation:(id<Translation>)tr;

+ (NSString *)simpleXMLEscapeWithNSString:(NSString *)str;

- (void)replaceLastWithInstruction:(Instruction *)instr;

- (void)addWithInstruction:(Instruction *)instr;

- (jint)getSize;

- (jint)size;

- (id<JavaUtilList>)createJson;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (Instruction *)getWithInt:(jint)index;

- (NSString *)description;

/**
 @return This method returns a list of gpx entries where the time (in millis) is relative to the first which is 0. <p>
 */
- (id<JavaUtilList>)createGPXList;

/**
 @brief Creates the standard GPX string out of the points according to the schema found here: https://graphhopper.com/public/schema/gpx-1.1.xsd <p>
 @return string to be stored as gpx file
 */
- (NSString *)createGPX;

- (NSString *)createGPXWithNSString:(NSString *)trackName
                           withLong:(jlong)startTimeMillis;

- (NSString *)createGPXWithNSString:(NSString *)trackName
                           withLong:(jlong)startTimeMillis
                        withBoolean:(jboolean)includeElevation
                        withBoolean:(jboolean)withRoute
                        withBoolean:(jboolean)withTrack
                        withBoolean:(jboolean)withWayPoints;

- (void)createRteptBlockWithJavaLangStringBuilder:(JavaLangStringBuilder *)output
                                  withInstruction:(Instruction *)instruction
                                  withInstruction:(Instruction *)nextI;

/**
 @return list of lat lon
 */
- (id<JavaUtilList>)createStartPoints;

/**
 @brief This method is useful for navigation devices to find the next instruction for the specified coordinate (e.g. the current position).
 <p>
 @param maxDistance the maximum acceptable distance to the instruction (in meter)
 @return the next Instruction or null if too far away.
 */
- (Instruction *)findWithDouble:(jdouble)lat
                     withDouble:(jdouble)lon
                     withDouble:(jdouble)maxDistance;


@end

FOUNDATION_EXPORT BOOL InstructionList_initialized;
J2OBJC_STATIC_INIT(InstructionList)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT NSString *InstructionList_simpleXMLEscapeWithNSString_(NSString *str);

FOUNDATION_EXPORT InstructionList *InstructionList_EMPTY_;
J2OBJC_STATIC_FIELD_GETTER(InstructionList, EMPTY_, InstructionList *)
CF_EXTERN_C_END

typedef InstructionList ComGraphhopperUtilInstructionList;

J2OBJC_TYPE_LITERAL_HEADER(InstructionList)

#endif // _InstructionList_H_
