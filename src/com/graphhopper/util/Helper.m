//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/Helper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/util/AngleCalc.h"
#include "com/graphhopper/util/DistanceCalc.h"
#include "com/graphhopper/util/DistanceCalc3D.h"
#include "com/graphhopper/util/DistanceCalcEarth.h"
#include "com/graphhopper/util/DistancePlaneProjection.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/PointList.h"
#include "com/graphhopper/util/shapes/BBox.h"
#include "gnu/trove/list/TIntList.h"
#include "gnu/trove/list/array/TIntArrayList.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedReader.h"
#include "java/io/BufferedWriter.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/Closeable.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Package.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Method.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedActionException.h"
#include "java/text/DateFormat.h"
#include "java/text/NumberFormat.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface Helper () {
}
- (instancetype)init;
@end

@interface Helper_$1 () {
 @public
  JavaNioByteBuffer *val$buffer_;
}
@end

J2OBJC_FIELD_SETTER(Helper_$1, val$buffer_, JavaNioByteBuffer *)

BOOL Helper_initialized = NO;

@implementation Helper

id<DistanceCalc> Helper_DIST_EARTH_;
DistanceCalc3D * Helper_DIST_3D_;
DistancePlaneProjection * Helper_DIST_PLANE_;
AngleCalc * Helper_ANGLE_CALC_;
JavaNioCharsetCharset * Helper_UTF_CS_;
JavaUtilTimeZone * Helper_UTC_;
id<OrgSlf4jLogger> Helper_LOGGER_;

- (instancetype)init {
  return [super init];
}

+ (JavaUtilArrayList *)tIntListToArrayListWithGnuTroveListTIntList:(id<GnuTroveListTIntList>)from {
  return Helper_tIntListToArrayListWithGnuTroveListTIntList_(from);
}

+ (JavaUtilLocale *)getLocaleWithNSString:(NSString *)param {
  return Helper_getLocaleWithNSString_(param);
}

+ (NSString *)packageToPathWithJavaLangPackage:(JavaLangPackage *)pkg {
  return Helper_packageToPathWithJavaLangPackage_(pkg);
}

+ (jint)countBitValueWithInt:(jint)maxTurnCosts {
  return Helper_countBitValueWithInt_(maxTurnCosts);
}

+ (void)loadPropertiesWithJavaUtilMap:(id<JavaUtilMap>)map
                     withJavaIoReader:(JavaIoReader *)tmpReader {
  Helper_loadPropertiesWithJavaUtilMap_withJavaIoReader_(map, tmpReader);
}

+ (void)savePropertiesWithJavaUtilMap:(id<JavaUtilMap>)map
                     withJavaIoWriter:(JavaIoWriter *)tmpWriter {
  Helper_savePropertiesWithJavaUtilMap_withJavaIoWriter_(map, tmpWriter);
}

+ (id<JavaUtilList>)readFileWithNSString:(NSString *)file {
  return Helper_readFileWithNSString_(file);
}

+ (id<JavaUtilList>)readFileWithJavaIoReader:(JavaIoReader *)simpleReader {
  return Helper_readFileWithJavaIoReader_(simpleReader);
}

+ (NSString *)isToStringWithJavaIoInputStream:(JavaIoInputStream *)inputStream {
  return Helper_isToStringWithJavaIoInputStream_(inputStream);
}

+ (jint)idealIntArraySizeWithInt:(jint)need {
  return Helper_idealIntArraySizeWithInt_(need);
}

+ (jint)idealByteArraySizeWithInt:(jint)need {
  return Helper_idealByteArraySizeWithInt_(need);
}

+ (jboolean)removeDirWithJavaIoFile:(JavaIoFile *)file {
  return Helper_removeDirWithJavaIoFile_(file);
}

+ (jlong)getTotalMB {
  return Helper_getTotalMB();
}

+ (jlong)getUsedMB {
  return Helper_getUsedMB();
}

+ (NSString *)getMemInfo {
  return Helper_getMemInfo();
}

+ (jint)getSizeOfObjectRefWithInt:(jint)factor {
  return Helper_getSizeOfObjectRefWithInt_(factor);
}

+ (jint)getSizeOfLongArrayWithInt:(jint)length
                          withInt:(jint)factor {
  return Helper_getSizeOfLongArrayWithInt_withInt_(length, factor);
}

+ (jint)getSizeOfObjectArrayWithInt:(jint)length
                            withInt:(jint)factor {
  return Helper_getSizeOfObjectArrayWithInt_withInt_(length, factor);
}

+ (void)closeWithJavaIoCloseable:(id<JavaIoCloseable>)cl {
  Helper_closeWithJavaIoCloseable_(cl);
}

+ (jboolean)isEmptyWithNSString:(NSString *)str {
  return Helper_isEmptyWithNSString_(str);
}

+ (jint)calcIndexSizeWithBBox:(BBox *)graphBounds {
  return Helper_calcIndexSizeWithBBox_(graphBounds);
}

+ (NSString *)pruneFileEndWithNSString:(NSString *)file {
  return Helper_pruneFileEndWithNSString_(file);
}

+ (id<JavaUtilList>)createDoubleListWithDoubleArray:(IOSDoubleArray *)values {
  return Helper_createDoubleListWithDoubleArray_(values);
}

+ (id<GnuTroveListTIntList>)createTListWithIntArray:(IOSIntArray *)list {
  return Helper_createTListWithIntArray_(list);
}

+ (PointList *)createPointListWithDoubleArray:(IOSDoubleArray *)list {
  return Helper_createPointListWithDoubleArray_(list);
}

+ (PointList *)createPointList3DWithDoubleArray:(IOSDoubleArray *)list {
  return Helper_createPointList3DWithDoubleArray_(list);
}

+ (jint)degreeToIntWithDouble:(jdouble)deg {
  return Helper_degreeToIntWithDouble_(deg);
}

+ (jdouble)intToDegreeWithInt:(jint)storedInt {
  return Helper_intToDegreeWithInt_(storedInt);
}

+ (jint)eleToIntWithDouble:(jdouble)ele {
  return Helper_eleToIntWithDouble_(ele);
}

+ (jdouble)intToEleWithInt:(jint)integEle {
  return Helper_intToEleWithInt_(integEle);
}

+ (void)cleanMappedByteBufferWithJavaNioByteBuffer:(JavaNioByteBuffer *)buffer {
  Helper_cleanMappedByteBufferWithJavaNioByteBuffer_(buffer);
}

+ (void)cleanHack {
  Helper_cleanHack();
}

+ (NSString *)nfWithLong:(jlong)no {
  return Helper_nfWithLong_(no);
}

+ (NSString *)firstBigWithNSString:(NSString *)sayText {
  return Helper_firstBigWithNSString_(sayText);
}

+ (jdouble)keepInWithDouble:(jdouble)value
                 withDouble:(jdouble)min
                 withDouble:(jdouble)max {
  return Helper_keepInWithDouble_withDouble_withDouble_(value, min, max);
}

+ (jdouble)roundWithDouble:(jdouble)value
                   withInt:(jint)exponent {
  return Helper_roundWithDouble_withInt_(value, exponent);
}

+ (jdouble)round6WithDouble:(jdouble)value {
  return Helper_round6WithDouble_(value);
}

+ (jdouble)round4WithDouble:(jdouble)value {
  return Helper_round4WithDouble_(value);
}

+ (jdouble)round2WithDouble:(jdouble)value {
  return Helper_round2WithDouble_(value);
}

+ (JavaTextDateFormat *)createFormatter {
  return Helper_createFormatter();
}

+ (JavaTextDateFormat *)createFormatterWithNSString:(NSString *)str {
  return Helper_createFormatterWithNSString_(str);
}

+ (jlong)toUnsignedLongWithInt:(jint)x {
  return Helper_toUnsignedLongWithInt_(x);
}

+ (jint)toSignedIntWithLong:(jlong)x {
  return Helper_toSignedIntWithLong_(x);
}

+ (NSString *)camelCaseToUnderScoreWithNSString:(NSString *)key {
  return Helper_camelCaseToUnderScoreWithNSString_(key);
}

+ (NSString *)underScoreToCamelCaseWithNSString:(NSString *)key {
  return Helper_underScoreToCamelCaseWithNSString_(key);
}

+ (void)initialize {
  if (self == [Helper class]) {
    JreStrongAssignAndConsume(&Helper_DIST_EARTH_, nil, [[DistanceCalcEarth alloc] init]);
    JreStrongAssignAndConsume(&Helper_DIST_3D_, nil, [[DistanceCalc3D alloc] init]);
    JreStrongAssignAndConsume(&Helper_DIST_PLANE_, nil, [[DistancePlaneProjection alloc] init]);
    JreStrongAssignAndConsume(&Helper_ANGLE_CALC_, nil, [[AngleCalc alloc] init]);
    JreStrongAssign(&Helper_UTF_CS_, nil, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8"));
    JreStrongAssign(&Helper_UTC_, nil, JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC"));
    JreStrongAssign(&Helper_LOGGER_, nil, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(Helper_class_()));
    J2OBJC_SET_INITIALIZED(Helper)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Helper", NULL, 0x2, NULL },
    { "tIntListToArrayListWithGnuTroveListTIntList:", "tIntListToArrayList", "Ljava.util.ArrayList;", 0x9, NULL },
    { "getLocaleWithNSString:", "getLocale", "Ljava.util.Locale;", 0x9, NULL },
    { "packageToPathWithJavaLangPackage:", "packageToPath", "Ljava.lang.String;", 0x8, NULL },
    { "countBitValueWithInt:", "countBitValue", "I", 0x9, NULL },
    { "loadPropertiesWithJavaUtilMap:withJavaIoReader:", "loadProperties", "V", 0x9, "Ljava.io.IOException;" },
    { "savePropertiesWithJavaUtilMap:withJavaIoWriter:", "saveProperties", "V", 0x9, "Ljava.io.IOException;" },
    { "readFileWithNSString:", "readFile", "Ljava.util.List;", 0x9, "Ljava.io.IOException;" },
    { "readFileWithJavaIoReader:", "readFile", "Ljava.util.List;", 0x9, "Ljava.io.IOException;" },
    { "isToStringWithJavaIoInputStream:", "isToString", "Ljava.lang.String;", 0x9, "Ljava.io.IOException;" },
    { "idealIntArraySizeWithInt:", "idealIntArraySize", "I", 0x9, NULL },
    { "idealByteArraySizeWithInt:", "idealByteArraySize", "I", 0x9, NULL },
    { "removeDirWithJavaIoFile:", "removeDir", "Z", 0x9, NULL },
    { "getTotalMB", NULL, "J", 0x9, NULL },
    { "getUsedMB", NULL, "J", 0x9, NULL },
    { "getMemInfo", NULL, "Ljava.lang.String;", 0x9, NULL },
    { "getSizeOfObjectRefWithInt:", "getSizeOfObjectRef", "I", 0x9, NULL },
    { "getSizeOfLongArrayWithInt:withInt:", "getSizeOfLongArray", "I", 0x9, NULL },
    { "getSizeOfObjectArrayWithInt:withInt:", "getSizeOfObjectArray", "I", 0x9, NULL },
    { "closeWithJavaIoCloseable:", "close", "V", 0x9, NULL },
    { "isEmptyWithNSString:", "isEmpty", "Z", 0x9, NULL },
    { "calcIndexSizeWithBBox:", "calcIndexSize", "I", 0x9, NULL },
    { "pruneFileEndWithNSString:", "pruneFileEnd", "Ljava.lang.String;", 0x9, NULL },
    { "createDoubleListWithDoubleArray:", "createDoubleList", "Ljava.util.List;", 0x9, NULL },
    { "createTListWithIntArray:", "createTList", "Lgnu.trove.list.TIntList;", 0x89, NULL },
    { "createPointListWithDoubleArray:", "createPointList", "Lcom.graphhopper.util.PointList;", 0x89, NULL },
    { "createPointList3DWithDoubleArray:", "createPointList3D", "Lcom.graphhopper.util.PointList;", 0x89, NULL },
    { "degreeToIntWithDouble:", "degreeToInt", "I", 0x19, NULL },
    { "intToDegreeWithInt:", "intToDegree", "D", 0x19, NULL },
    { "eleToIntWithDouble:", "eleToInt", "I", 0x19, NULL },
    { "intToEleWithInt:", "intToEle", "D", 0x19, NULL },
    { "cleanMappedByteBufferWithJavaNioByteBuffer:", "cleanMappedByteBuffer", "V", 0x9, NULL },
    { "cleanHack", NULL, "V", 0x9, NULL },
    { "nfWithLong:", "nf", "Ljava.lang.String;", 0x9, NULL },
    { "firstBigWithNSString:", "firstBig", "Ljava.lang.String;", 0x9, NULL },
    { "keepInWithDouble:withDouble:withDouble:", "keepIn", "D", 0x19, NULL },
    { "roundWithDouble:withInt:", "round", "D", 0x9, NULL },
    { "round6WithDouble:", "round6", "D", 0x19, NULL },
    { "round4WithDouble:", "round4", "D", 0x19, NULL },
    { "round2WithDouble:", "round2", "D", 0x19, NULL },
    { "createFormatter", NULL, "Ljava.text.DateFormat;", 0x9, NULL },
    { "createFormatterWithNSString:", "createFormatter", "Ljava.text.DateFormat;", 0x9, NULL },
    { "toUnsignedLongWithInt:", "toUnsignedLong", "J", 0x19, NULL },
    { "toSignedIntWithLong:", "toSignedInt", "I", 0x19, NULL },
    { "camelCaseToUnderScoreWithNSString:", "camelCaseToUnderScore", "Ljava.lang.String;", 0x19, NULL },
    { "underScoreToCamelCaseWithNSString:", "underScoreToCamelCase", "Ljava.lang.String;", 0x19, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DIST_EARTH_", NULL, 0x19, "Lcom.graphhopper.util.DistanceCalc;", &Helper_DIST_EARTH_,  },
    { "DIST_3D_", NULL, 0x19, "Lcom.graphhopper.util.DistanceCalc3D;", &Helper_DIST_3D_,  },
    { "DIST_PLANE_", NULL, 0x19, "Lcom.graphhopper.util.DistancePlaneProjection;", &Helper_DIST_PLANE_,  },
    { "ANGLE_CALC_", NULL, 0x19, "Lcom.graphhopper.util.AngleCalc;", &Helper_ANGLE_CALC_,  },
    { "UTF_CS_", NULL, 0x19, "Ljava.nio.charset.Charset;", &Helper_UTF_CS_,  },
    { "UTC_", NULL, 0x19, "Ljava.util.TimeZone;", &Helper_UTC_,  },
    { "MB_", NULL, 0x19, "J", NULL, .constantValue.asLong = Helper_MB },
    { "LOGGER_", NULL, 0x1a, "Lorg.slf4j.Logger;", &Helper_LOGGER_,  },
    { "DEGREE_FACTOR_", NULL, 0x1a, "F", NULL, .constantValue.asFloat = Helper_DEGREE_FACTOR },
    { "ELE_FACTOR_", NULL, 0x1a, "F", NULL, .constantValue.asFloat = Helper_ELE_FACTOR },
  };
  static const J2ObjcClassInfo _Helper = { 1, "Helper", "com.graphhopper.util", NULL, 0x1, 46, methods, 10, fields, 0, NULL};
  return &_Helper;
}

@end

JavaUtilArrayList *Helper_tIntListToArrayListWithGnuTroveListTIntList_(id<GnuTroveListTIntList> from) {
  Helper_init();
  jint len = [((id<GnuTroveListTIntList>) nil_chk(from)) size];
  JavaUtilArrayList *list = [[[JavaUtilArrayList alloc] initWithInt:len] autorelease];
  for (jint i = 0; i < len; i++) {
    [list addWithId:JavaLangInteger_valueOfWithInt_([from getWithInt:i])];
  }
  return list;
}

JavaUtilLocale *Helper_getLocaleWithNSString_(NSString *param) {
  Helper_init();
  jint pointIndex = [((NSString *) nil_chk(param)) indexOf:'.'];
  if (pointIndex > 0) param = [param substring:0 endIndex:pointIndex];
  param = [((NSString *) nil_chk(param)) replace:@"-" withSequence:@"_"];
  jint index = [((NSString *) nil_chk(param)) indexOfString:@"_"];
  if (index < 0) {
    return [[[JavaUtilLocale alloc] initWithNSString:param] autorelease];
  }
  return [[[JavaUtilLocale alloc] initWithNSString:[param substring:0 endIndex:index] withNSString:[param substring:index + 1]] autorelease];
}

NSString *Helper_packageToPathWithJavaLangPackage_(JavaLangPackage *pkg) {
  Helper_init();
  return [((NSString *) nil_chk([((JavaLangPackage *) nil_chk(pkg)) getName])) replaceAll:@"\\." withReplacement:JavaIoFile_get_separator_()];
}

jint Helper_countBitValueWithInt_(jint maxTurnCosts) {
  Helper_init();
  if (maxTurnCosts < 0) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"maxTurnCosts cannot be negative ", maxTurnCosts)] autorelease];
  jint counter = 0;
  while (maxTurnCosts > 0) {
    RShiftAssignInt(&maxTurnCosts, 1);
    counter++;
  }
  return counter++;
}

void Helper_loadPropertiesWithJavaUtilMap_withJavaIoReader_(id<JavaUtilMap> map, JavaIoReader *tmpReader) {
  Helper_init();
  JavaIoBufferedReader *reader = [[[JavaIoBufferedReader alloc] initWithJavaIoReader:tmpReader] autorelease];
  NSString *line;
  @try {
    while ((line = [reader readLine]) != nil) {
      if ([((NSString *) nil_chk(line)) hasPrefix:@"//"] || [line hasPrefix:@"#"]) {
        continue;
      }
      if (Helper_isEmptyWithNSString_(line)) {
        continue;
      }
      jint index = [line indexOfString:@"="];
      if (index < 0) {
        [((id<OrgSlf4jLogger>) nil_chk(Helper_LOGGER_)) warnWithNSString:JreStrcat("$$", @"Skipping configuration at line:", line)];
        continue;
      }
      NSString *field = [line substring:0 endIndex:index];
      NSString *value = [line substring:index + 1];
      [((id<JavaUtilMap>) nil_chk(map)) putWithId:[((NSString *) nil_chk(field)) trim] withId:[((NSString *) nil_chk(value)) trim]];
    }
  }
  @finally {
    [reader close];
  }
}

void Helper_savePropertiesWithJavaUtilMap_withJavaIoWriter_(id<JavaUtilMap> map, JavaIoWriter *tmpWriter) {
  Helper_init();
  JavaIoBufferedWriter *writer = [[[JavaIoBufferedWriter alloc] initWithJavaIoWriter:tmpWriter] autorelease];
  @try {
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) {
      [writer appendWithJavaLangCharSequence:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]];
      [writer appendWithChar:'='];
      [writer appendWithJavaLangCharSequence:[e getValue]];
      [writer appendWithChar:0x000a];
    }
  }
  @finally {
    [writer close];
  }
}

id<JavaUtilList> Helper_readFileWithNSString_(NSString *file) {
  Helper_init();
  return Helper_readFileWithJavaIoReader_([[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[[[JavaIoFileInputStream alloc] initWithNSString:file] autorelease] withJavaNioCharsetCharset:Helper_UTF_CS_] autorelease]);
}

id<JavaUtilList> Helper_readFileWithJavaIoReader_(JavaIoReader *simpleReader) {
  Helper_init();
  JavaIoBufferedReader *reader = [[[JavaIoBufferedReader alloc] initWithJavaIoReader:simpleReader] autorelease];
  @try {
    id<JavaUtilList> res = [[[JavaUtilArrayList alloc] init] autorelease];
    NSString *line;
    while ((line = [reader readLine]) != nil) {
      [res addWithId:line];
    }
    return res;
  }
  @finally {
    [reader close];
  }
}

NSString *Helper_isToStringWithJavaIoInputStream_(JavaIoInputStream *inputStream) {
  Helper_init();
  jint size = 1024 * 8;
  NSString *encoding = @"UTF-8";
  JavaIoInputStream *in = [[[JavaIoBufferedInputStream alloc] initWithJavaIoInputStream:inputStream withInt:size] autorelease];
  @try {
    IOSByteArray *buffer = [IOSByteArray arrayWithLength:size];
    JavaIoByteArrayOutputStream *output = [[[JavaIoByteArrayOutputStream alloc] init] autorelease];
    jint numRead;
    while ((numRead = [in readWithByteArray:buffer]) != -1) {
      [output writeWithByteArray:buffer withInt:0 withInt:numRead];
    }
    return [output toStringWithNSString:encoding];
  }
  @finally {
    [in close];
  }
}

jint Helper_idealIntArraySizeWithInt_(jint need) {
  Helper_init();
  return Helper_idealByteArraySizeWithInt_(need * 4) / 4;
}

jint Helper_idealByteArraySizeWithInt_(jint need) {
  Helper_init();
  for (jint i = 4; i < 32; i++) {
    if (need <= (LShift32(1, i)) - 12) {
      return (LShift32(1, i)) - 12;
    }
  }
  return need;
}

jboolean Helper_removeDirWithJavaIoFile_(JavaIoFile *file) {
  Helper_init();
  if (![((JavaIoFile *) nil_chk(file)) exists]) {
    return YES;
  }
  if ([file isDirectory]) {
    {
      IOSObjectArray *a__ = [file listFiles];
      JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *f = *b__++;
        Helper_removeDirWithJavaIoFile_(f);
      }
    }
  }
  return [file delete__];
}

jlong Helper_getTotalMB() {
  Helper_init();
  return 0;
}

jlong Helper_getUsedMB() {
  Helper_init();
  return 0;
}

NSString *Helper_getMemInfo() {
  Helper_init();
  return @"n/a";
}

jint Helper_getSizeOfObjectRefWithInt_(jint factor) {
  Helper_init();
  return factor * (4 + 4 + 4);
}

jint Helper_getSizeOfLongArrayWithInt_withInt_(jint length, jint factor) {
  Helper_init();
  return factor * (4 + 4 + 4 + 4) + 8 * length;
}

jint Helper_getSizeOfObjectArrayWithInt_withInt_(jint length, jint factor) {
  Helper_init();
  return factor * (4 + 4 + 4 + 4) + 4 * length;
}

void Helper_closeWithJavaIoCloseable_(id<JavaIoCloseable> cl) {
  Helper_init();
  @try {
    if (cl != nil) [cl close];
  }
  @catch (JavaIoIOException *ex) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"Couldn't close resource" withJavaLangThrowable:ex] autorelease];
  }
}

jboolean Helper_isEmptyWithNSString_(NSString *str) {
  Helper_init();
  return str == nil || ((jint) [((NSString *) nil_chk([str trim])) length]) == 0;
}

jint Helper_calcIndexSizeWithBBox_(BBox *graphBounds) {
  Helper_init();
  if (![((BBox *) nil_chk(graphBounds)) isValid]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@", @"Bounding box is not valid to calculate index size: ", graphBounds)] autorelease];
  jdouble dist = [((id<DistanceCalc>) nil_chk(Helper_DIST_EARTH_)) calcDistWithDouble:graphBounds->maxLat_ withDouble:graphBounds->minLon_ withDouble:graphBounds->minLat_ withDouble:graphBounds->maxLon_];
  dist = JavaLangMath_minWithDouble_withDouble_(dist / 1000, 50000);
  return JavaLangMath_maxWithInt_withInt_(2000, J2ObjCFpToInt((dist * dist)));
}

NSString *Helper_pruneFileEndWithNSString_(NSString *file) {
  Helper_init();
  jint index = [((NSString *) nil_chk(file)) lastIndexOfString:@"."];
  if (index < 0) return file;
  return [file substring:0 endIndex:index];
}

id<JavaUtilList> Helper_createDoubleListWithDoubleArray_(IOSDoubleArray *values) {
  Helper_init();
  id<JavaUtilList> list = [[[JavaUtilArrayList alloc] init] autorelease];
  {
    IOSDoubleArray *a__ = values;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble v = *b__++;
      [list addWithId:JavaLangDouble_valueOfWithDouble_(v)];
    }
  }
  return list;
}

id<GnuTroveListTIntList> Helper_createTListWithIntArray_(IOSIntArray *list) {
  Helper_init();
  id<GnuTroveListTIntList> res = [[[GnuTroveListArrayTIntArrayList alloc] initWithInt:((IOSIntArray *) nil_chk(list))->size_] autorelease];
  {
    IOSIntArray *a__ = list;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint val = *b__++;
      [res addWithInt:val];
    }
  }
  return res;
}

PointList *Helper_createPointListWithDoubleArray_(IOSDoubleArray *list) {
  Helper_init();
  if (((IOSDoubleArray *) nil_chk(list))->size_ % 2 != 0) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"list should consist of lat,lon pairs!"] autorelease];
  jint max = list->size_ / 2;
  PointList *res = [[[PointList alloc] initWithInt:max withBoolean:NO] autorelease];
  for (jint i = 0; i < max; i++) {
    [res addWithDouble:IOSDoubleArray_Get(list, 2 * i) withDouble:IOSDoubleArray_Get(list, 2 * i + 1) withDouble:JavaLangDouble_NaN];
  }
  return res;
}

PointList *Helper_createPointList3DWithDoubleArray_(IOSDoubleArray *list) {
  Helper_init();
  if (((IOSDoubleArray *) nil_chk(list))->size_ % 3 != 0) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"list should consist of lat,lon,ele tuples!"] autorelease];
  jint max = list->size_ / 3;
  PointList *res = [[[PointList alloc] initWithInt:max withBoolean:YES] autorelease];
  for (jint i = 0; i < max; i++) {
    [res addWithDouble:IOSDoubleArray_Get(list, 3 * i) withDouble:IOSDoubleArray_Get(list, 3 * i + 1) withDouble:IOSDoubleArray_Get(list, 3 * i + 2)];
  }
  return res;
}

jint Helper_degreeToIntWithDouble_(jdouble deg) {
  Helper_init();
  if (deg >= JavaLangDouble_MAX_VALUE) return JavaLangInteger_MAX_VALUE;
  if (deg <= -JavaLangDouble_MAX_VALUE) return -JavaLangInteger_MAX_VALUE;
  return J2ObjCFpToInt((deg * Helper_DEGREE_FACTOR));
}

jdouble Helper_intToDegreeWithInt_(jint storedInt) {
  Helper_init();
  if (storedInt == JavaLangInteger_MAX_VALUE) return JavaLangDouble_MAX_VALUE;
  if (storedInt == -JavaLangInteger_MAX_VALUE) return -JavaLangDouble_MAX_VALUE;
  return (jdouble) storedInt / Helper_DEGREE_FACTOR;
}

jint Helper_eleToIntWithDouble_(jdouble ele) {
  Helper_init();
  if (ele >= JavaLangInteger_MAX_VALUE) return JavaLangInteger_MAX_VALUE;
  return J2ObjCFpToInt((ele * Helper_ELE_FACTOR));
}

jdouble Helper_intToEleWithInt_(jint integEle) {
  Helper_init();
  if (integEle == JavaLangInteger_MAX_VALUE) return JavaLangDouble_MAX_VALUE;
  return integEle / Helper_ELE_FACTOR;
}

void Helper_cleanMappedByteBufferWithJavaNioByteBuffer_(JavaNioByteBuffer *buffer) {
  Helper_init();
  @try {
    JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedExceptionAction_([[[Helper_$1 alloc] initWithJavaNioByteBuffer:buffer] autorelease]);
  }
  @catch (JavaSecurityPrivilegedActionException *e) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"unable to unmap the mapped buffer" withJavaLangThrowable:e] autorelease];
  }
}

void Helper_cleanHack() {
  Helper_init();
}

NSString *Helper_nfWithLong_(jlong no) {
  Helper_init();
  return [((JavaTextNumberFormat *) nil_chk(JavaTextNumberFormat_getInstanceWithJavaUtilLocale_(JavaUtilLocale_get_FRANCE_()))) formatWithLong:no];
}

NSString *Helper_firstBigWithNSString_(NSString *sayText) {
  Helper_init();
  if (sayText == nil || ((jint) [sayText length]) <= 0) {
    return sayText;
  }
  return JreStrcat("C$", JavaLangCharacter_toUpperCaseWithChar_([((NSString *) nil_chk(sayText)) charAtWithInt:0]), [sayText substring:1]);
}

jdouble Helper_keepInWithDouble_withDouble_withDouble_(jdouble value, jdouble min, jdouble max) {
  Helper_init();
  return JavaLangMath_maxWithDouble_withDouble_(min, JavaLangMath_minWithDouble_withDouble_(value, max));
}

jdouble Helper_roundWithDouble_withInt_(jdouble value, jint exponent) {
  Helper_init();
  jdouble factor = JavaLangMath_powWithDouble_withDouble_(10, exponent);
  return JavaLangMath_roundWithDouble_(value * factor) / factor;
}

jdouble Helper_round6WithDouble_(jdouble value) {
  Helper_init();
  return JavaLangMath_roundWithDouble_(value * 1e6) / 1e6;
}

jdouble Helper_round4WithDouble_(jdouble value) {
  Helper_init();
  return JavaLangMath_roundWithDouble_(value * 1e4) / 1e4;
}

jdouble Helper_round2WithDouble_(jdouble value) {
  Helper_init();
  return JavaLangMath_roundWithDouble_(value * 100) / 100.0;
}

JavaTextDateFormat *Helper_createFormatter() {
  Helper_init();
  return Helper_createFormatterWithNSString_(@"yyyy-MM-dd'T'HH:mm:ss'Z'");
}

JavaTextDateFormat *Helper_createFormatterWithNSString_(NSString *str) {
  Helper_init();
  JavaTextDateFormat *df = [[[JavaTextSimpleDateFormat alloc] initWithNSString:str withJavaUtilLocale:JavaUtilLocale_get_UK_()] autorelease];
  [df setTimeZoneWithJavaUtilTimeZone:Helper_UTC_];
  return df;
}

jlong Helper_toUnsignedLongWithInt_(jint x) {
  Helper_init();
  return ((jlong) x) & (jlong) 0xFFFFffffLL;
}

jint Helper_toSignedIntWithLong_(jlong x) {
  Helper_init();
  return (jint) x;
}

NSString *Helper_camelCaseToUnderScoreWithNSString_(NSString *key) {
  Helper_init();
  if ([((NSString *) nil_chk(key)) isEmpty]) return key;
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:((jint) [key length])] autorelease];
  for (jint i = 0; i < ((jint) [key length]); i++) {
    jchar c = [key charAtWithInt:i];
    if (JavaLangCharacter_isUpperCaseWithChar_(c)) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"_"])) appendWithChar:JavaLangCharacter_toLowerCaseWithChar_(c)];
    else [sb appendWithChar:c];
  }
  return [sb description];
}

NSString *Helper_underScoreToCamelCaseWithNSString_(NSString *key) {
  Helper_init();
  if ([((NSString *) nil_chk(key)) isEmpty]) return key;
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:((jint) [key length])] autorelease];
  for (jint i = 0; i < ((jint) [key length]); i++) {
    jchar c = [key charAtWithInt:i];
    if (c == '_') {
      i++;
      if (i < ((jint) [key length])) [sb appendWithChar:JavaLangCharacter_toUpperCaseWithChar_([key charAtWithInt:i])];
      else [sb appendWithChar:c];
    }
    else [sb appendWithChar:c];
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Helper)

@implementation Helper_$1

- (id)run {
  @try {
    JavaLangReflectMethod *getCleanerMethod = [[((JavaNioByteBuffer *) nil_chk(val$buffer_)) getClass] getMethod:@"cleaner" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
    [((JavaLangReflectMethod *) nil_chk(getCleanerMethod)) setAccessibleWithBoolean:YES];
    id cleaner = [getCleanerMethod invokeWithId:val$buffer_ withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
    if (cleaner != nil) [((JavaLangReflectMethod *) nil_chk([[cleaner getClass] getMethod:@"clean" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]])) invokeWithId:cleaner withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
  }
  return nil;
}

- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0 {
  Helper_$1_set_val$buffer_(self, capture$0);
  return [super init];
}

- (void)dealloc {
  RELEASE_(val$buffer_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(Helper_$1 *)other {
  [super copyAllFieldsTo:other];
  Helper_$1_set_val$buffer_(other, val$buffer_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "run", NULL, "Ljava.lang.Object;", 0x1, "Ljava.lang.Exception;" },
    { "initWithJavaNioByteBuffer:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$buffer_", NULL, 0x1012, "Ljava.nio.ByteBuffer;", NULL,  },
  };
  static const J2ObjcClassInfo _Helper_$1 = { 1, "$1", "com.graphhopper.util", "Helper", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_Helper_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Helper_$1)
