//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/PointList.java
//

#ifndef _PointList_H_
#define _PointList_H_

@class DistanceCalc3D;
@class GHPoint3D;
@class GHPoint;
@class IOSDoubleArray;
@protocol DistanceCalc;
@protocol JavaUtilList;

#include "J2ObjC_header.h"
#include "com/graphhopper/util/PointAccess.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"

/**
 @brief Slim list to store several points (without the need for a point object).
 <p>
 @author Peter Karich
 */
@interface PointList : NSObject < JavaLangIterable, PointAccess > {
 @public
  jint size__;
  jboolean is3D__;
}

- (instancetype)init;

- (instancetype)initWithInt:(jint)cap
                withBoolean:(jboolean)is3D;

- (jboolean)is3D;

- (jint)getDimension;

- (void)ensureNodeWithInt:(jint)nodeId;

- (void)setNodeWithInt:(jint)nodeId
            withDouble:(jdouble)lat
            withDouble:(jdouble)lon;

- (void)setNodeWithInt:(jint)nodeId
            withDouble:(jdouble)lat
            withDouble:(jdouble)lon
            withDouble:(jdouble)ele;

- (void)setWithInt:(jint)index
        withDouble:(jdouble)lat
        withDouble:(jdouble)lon
        withDouble:(jdouble)ele;

- (void)addWithDouble:(jdouble)lat
           withDouble:(jdouble)lon;

- (void)addWithDouble:(jdouble)lat
           withDouble:(jdouble)lon
           withDouble:(jdouble)ele;

- (void)addWithPointAccess:(id<PointAccess>)nodeAccess
                   withInt:(jint)index;

- (void)addWithGHPoint:(GHPoint *)point;

- (void)addWithPointList:(PointList *)points;

- (jint)size;

- (jint)getSize;

- (jboolean)isEmpty;

- (jdouble)getLatWithInt:(jint)index;

- (jdouble)getLatitudeWithInt:(jint)index;

- (jdouble)getLonWithInt:(jint)index;

- (jdouble)getLongitudeWithInt:(jint)index;

- (jdouble)getElevationWithInt:(jint)index;

- (jdouble)getEleWithInt:(jint)index;

- (void)reverse;

- (void)clear;

- (void)trimToSizeWithInt:(jint)newSize;

- (NSString *)description;

/**
 @brief Attention: geoJson is LON,LAT or LON,LAT,ELE
 */
- (id<JavaUtilList>)toGeoJson;

- (id<JavaUtilList>)toGeoJsonWithBoolean:(jboolean)includeElevation;

- (jboolean)isEqual:(id)obj;

- (PointList *)cloneWithBoolean:(jboolean)reverse;

- (PointList *)copy__WithInt:(jint)from
                     withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

- (NSUInteger)hash;

- (jdouble)calcDistanceWithDistanceCalc:(id<DistanceCalc>)calc;

/**
 @brief Takes the string from a json array ala [lon1,lat1], [lon2,lat2], ... and fills the list from it.
 */
- (void)parse2DJSONWithNSString:(NSString *)str;

- (GHPoint3D *)toGHPointWithInt:(jint)index;

- (jint)getCapacity;

- (id<JavaUtilIterator>)iterator;


@end

FOUNDATION_EXPORT BOOL PointList_initialized;
J2OBJC_STATIC_INIT(PointList)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT PointList *PointList_EMPTY_;
J2OBJC_STATIC_FIELD_GETTER(PointList, EMPTY_, PointList *)

FOUNDATION_EXPORT DistanceCalc3D *PointList_distCalc3D_;
J2OBJC_STATIC_FIELD_GETTER(PointList, distCalc3D_, DistanceCalc3D *)

FOUNDATION_EXPORT NSString *PointList_ERR_MSG_;
J2OBJC_STATIC_FIELD_GETTER(PointList, ERR_MSG_, NSString *)
J2OBJC_STATIC_FIELD_SETTER(PointList, ERR_MSG_, NSString *)
CF_EXTERN_C_END

typedef PointList ComGraphhopperUtilPointList;

J2OBJC_TYPE_LITERAL_HEADER(PointList)

@interface PointList_$1 : PointList {
}

- (void)setWithInt:(jint)index
        withDouble:(jdouble)lat
        withDouble:(jdouble)lon
        withDouble:(jdouble)ele;

- (void)addWithDouble:(jdouble)lat
           withDouble:(jdouble)lon
           withDouble:(jdouble)ele;

- (jdouble)getLatitudeWithInt:(jint)index;

- (jdouble)getLongitudeWithInt:(jint)index;

- (jboolean)isEmpty;

- (void)clear;

- (void)trimToSizeWithInt:(jint)newSize;

- (void)parse2DJSONWithNSString:(NSString *)str;

- (jdouble)calcDistanceWithDistanceCalc:(id<DistanceCalc>)calc;

- (PointList *)copy__WithInt:(jint)from
                     withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

- (PointList *)cloneWithBoolean:(jboolean)reverse;

- (jdouble)getElevationWithInt:(jint)index;

- (jdouble)getLatWithInt:(jint)index;

- (jdouble)getLonWithInt:(jint)index;

- (jdouble)getEleWithInt:(jint)index;

- (id<JavaUtilList>)toGeoJson;

- (void)reverse;

- (jint)getSize;

- (jint)size;

- (GHPoint3D *)toGHPointWithInt:(jint)index;

- (jboolean)is3D;

- (instancetype)initWithInt:(jint)arg$0
                withBoolean:(jboolean)arg$1;


@end

J2OBJC_EMPTY_STATIC_INIT(PointList_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(PointList_$1)

@interface PointList_$2 : NSObject < JavaUtilIterator > {
 @public
  jint counter_;
}

- (jboolean)hasNext;

- (GHPoint3D *)next;

- (void)remove;

- (instancetype)initWithPointList:(PointList *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(PointList_$2)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(PointList_$2)

#endif // _PointList_H_
