//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/Instruction.java
//

#ifndef _Instruction_H_
#define _Instruction_H_

@class AngleCalc;
@class InstructionAnnotation;
@class PointList;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol Translation;

#include "J2ObjC_header.h"

#define Instruction_CONTINUE_ON_STREET 0
#define Instruction_FINISH 4
#define Instruction_LEAVE_ROUNDABOUT -6
#define Instruction_REACHED_VIA 5
#define Instruction_TURN_LEFT -2
#define Instruction_TURN_RIGHT 2
#define Instruction_TURN_SHARP_LEFT -3
#define Instruction_TURN_SHARP_RIGHT 3
#define Instruction_TURN_SLIGHT_LEFT -1
#define Instruction_TURN_SLIGHT_RIGHT 1
#define Instruction_USE_ROUNDABOUT 6

@interface Instruction : NSObject {
 @public
  PointList *points_;
  InstructionAnnotation *annotation_;
  jboolean rawName_;
  jint sign_;
  NSString *name_;
  jdouble distance_;
  jlong time_;
}

/**
 @brief The points, distances and times have exactly the same count.
 The last point of this instruction is not duplicated here and should be in the next one.
 */
- (instancetype)initWithInt:(jint)sign
               withNSString:(NSString *)name
  withInstructionAnnotation:(InstructionAnnotation *)ia
              withPointList:(PointList *)pl;

/**
 @brief This method does not perform translation or combination with the sign - it just uses the provided name as instruction.
 */
- (void)setUseRawName;

- (InstructionAnnotation *)getAnnotation;

/**
 @brief The instruction for the person/driver to execute.
 */
- (jint)getSign;

- (NSString *)getName;

- (void)setNameWithNSString:(NSString *)name;

- (id<JavaUtilMap>)getExtraInfoJSON;

- (void)setExtraInfoWithNSString:(NSString *)key
                          withId:(id)value;

/**
 @brief Distance in meter until no new instruction
 */
- (jdouble)getDistance;

- (Instruction *)setDistanceWithDouble:(jdouble)distance;

/**
 @brief Time in time until no new instruction
 */
- (jlong)getTime;

- (Instruction *)setTimeWithLong:(jlong)time;

/**
 @brief Latitude of the location where this instruction should take place.
 */
- (jdouble)getFirstLat;

/**
 @brief Longitude of the location where this instruction should take place.
 */
- (jdouble)getFirstLon;

- (jdouble)getFirstEle;

- (PointList *)getPoints;

/**
 @brief This method returns a list of gpx entries where the time (in time) is relative to the first which is 0.
 It does NOT contain the last point which is the first of the next instruction. <p>
 @return the time offset to add for the next instruction
 */
- (jlong)fillGPXListWithJavaUtilList:(id<JavaUtilList>)list
                            withLong:(jlong)time
                     withInstruction:(Instruction *)prevInstr
                     withInstruction:(Instruction *)nextInstr
                         withBoolean:(jboolean)firstInstr;

- (NSString *)description;

/**
 @brief Return the direction like 'NE' based on the first tracksegment of the instruction.
 If Instruction does not contain enough coordinate points, an empty string will be returned.
 */
- (NSString *)calcDirectionWithInstruction:(Instruction *)nextI;

/**
 @brief Return the azimuth in degree based on the first tracksegment of this instruction.
 If this instruction contains less than 2 points then NaN will be returned or the specified instruction will be used if that is the finish instruction.
 */
- (jdouble)calcAzimuthWithInstruction:(Instruction *)nextI;

- (void)checkOne;

- (NSString *)getTurnDescriptionWithTranslation:(id<Translation>)tr;

@end

FOUNDATION_EXPORT BOOL Instruction_initialized;
J2OBJC_STATIC_INIT(Instruction)

J2OBJC_FIELD_SETTER(Instruction, points_, PointList *)
J2OBJC_FIELD_SETTER(Instruction, annotation_, InstructionAnnotation *)
J2OBJC_FIELD_SETTER(Instruction, name_, NSString *)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(Instruction, LEAVE_ROUNDABOUT, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, TURN_SHARP_LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, TURN_LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, TURN_SLIGHT_LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, CONTINUE_ON_STREET, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, TURN_SLIGHT_RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, TURN_RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, TURN_SHARP_RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, FINISH, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, REACHED_VIA, jint)

J2OBJC_STATIC_FIELD_GETTER(Instruction, USE_ROUNDABOUT, jint)

FOUNDATION_EXPORT AngleCalc *Instruction_AC_;
J2OBJC_STATIC_FIELD_GETTER(Instruction, AC_, AngleCalc *)
CF_EXTERN_C_END

typedef Instruction ComGraphhopperUtilInstruction;

J2OBJC_TYPE_LITERAL_HEADER(Instruction)

#endif // _Instruction_H_
