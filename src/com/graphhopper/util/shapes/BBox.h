//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/shapes/BBox.java
//

#ifndef _BBox_H_
#define _BBox_H_

@class Circle;
@protocol JavaUtilList;

#include "J2ObjC_header.h"
#include "com/graphhopper/util/shapes/Shape.h"

/**
 @brief A simple bounding box defined as follows: minLon, maxLon followed by minLat which is south(!)
 and maxLat. Equally to EX_GeographicBoundingBox in the ISO 19115 standard see http://osgeo-org.1560.n6.nabble.com/Boundingbox-issue-for-discussion-td3875533.html <p> Nice German overview: http://www.geoinf.uni-jena.de/fileadmin/Geoinformatik/Lehre/Diplomarbeiten/DA_Andres.pdf <p>
 @author Peter Karich
 */
@interface BBox : NSObject < Shape, NSCopying > {
 @public
  jdouble minLon_;
  jdouble maxLon_;
  jdouble minLat_;
  jdouble maxLat_;
  jdouble minEle_;
  jdouble maxEle_;
}

- (instancetype)initWithDouble:(jdouble)minLon
                    withDouble:(jdouble)maxLon
                    withDouble:(jdouble)minLat
                    withDouble:(jdouble)maxLat;

- (instancetype)initWithDouble:(jdouble)minLon
                    withDouble:(jdouble)maxLon
                    withDouble:(jdouble)minLat
                    withDouble:(jdouble)maxLat
                    withDouble:(jdouble)minEle
                    withDouble:(jdouble)maxEle;

- (instancetype)initWithDouble:(jdouble)minLon
                    withDouble:(jdouble)maxLon
                    withDouble:(jdouble)minLat
                    withDouble:(jdouble)maxLat
                    withDouble:(jdouble)minEle
                    withDouble:(jdouble)maxEle
                   withBoolean:(jboolean)elevation;

/**
 @brief Prefills BBox with minimum values so that it can increase.
 */
+ (BBox *)createInverseWithBoolean:(jboolean)elevation;

- (jboolean)hasElevation;

- (void)updateWithDouble:(jdouble)lat
              withDouble:(jdouble)lon;

- (void)updateWithDouble:(jdouble)lat
              withDouble:(jdouble)lon
              withDouble:(jdouble)elev;

- (BBox *)clone;

- (jboolean)intersectWithShape:(id<Shape>)s;

- (jboolean)containsWithShape:(id<Shape>)s;

- (jboolean)intersectWithCircle:(Circle *)s;

- (jboolean)intersectWithBBox:(BBox *)o;

- (jboolean)containsWithDouble:(jdouble)lat
                    withDouble:(jdouble)lon;

- (jboolean)containsWithBBox:(BBox *)b;

- (jboolean)containsWithCircle:(Circle *)c;

- (NSString *)description;

- (NSString *)toLessPrecisionString;

- (BBox *)getBounds;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

- (jboolean)isValid;

/**
 @return array containing this bounding box. Attention: GeoJson is lon,lat! If 3D is gets even worse: lon,lat,ele
 */
- (id<JavaUtilList>)toGeoJson;

@end

J2OBJC_EMPTY_STATIC_INIT(BBox)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT BBox *BBox_createInverseWithBoolean_(jboolean elevation);
CF_EXTERN_C_END

typedef BBox ComGraphhopperUtilShapesBBox;

J2OBJC_TYPE_LITERAL_HEADER(BBox)

#endif // _BBox_H_
