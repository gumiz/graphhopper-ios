//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/CmdArgs.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/util/CmdArgs.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/PMap.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"

@implementation CmdArgs

- (instancetype)init {
  return [super init];
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  return [super initWithJavaUtilMap:map];
}

+ (CmdArgs *)readFromConfigWithNSString:(NSString *)fileStr
                           withNSString:(NSString *)systemProperty {
  return CmdArgs_readFromConfigWithNSString_withNSString_(fileStr, systemProperty);
}

+ (CmdArgs *)readWithNSStringArray:(IOSObjectArray *)args {
  return CmdArgs_readWithNSStringArray_(args);
}

+ (CmdArgs *)readFromConfigAndMergeWithCmdArgs:(CmdArgs *)args
                                  withNSString:(NSString *)configKey
                                  withNSString:(NSString *)configSysAttr {
  return CmdArgs_readFromConfigAndMergeWithCmdArgs_withNSString_withNSString_(args, configKey, configSysAttr);
}

- (CmdArgs *)putWithNSString:(NSString *)key
                      withId:(id)str {
  [super putWithNSString:key withId:str];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CmdArgs", NULL, 0x1, NULL },
    { "initWithJavaUtilMap:", "CmdArgs", NULL, 0x1, NULL },
    { "readFromConfigWithNSString:withNSString:", "readFromConfig", "Lcom.graphhopper.util.CmdArgs;", 0x9, "Ljava.io.IOException;" },
    { "readWithNSStringArray:", "read", "Lcom.graphhopper.util.CmdArgs;", 0x9, NULL },
    { "readFromConfigAndMergeWithCmdArgs:withNSString:withNSString:", "readFromConfigAndMerge", "Lcom.graphhopper.util.CmdArgs;", 0x9, NULL },
    { "putWithNSString:withId:", "put", "Lcom.graphhopper.util.CmdArgs;", 0x1, NULL },
  };
  static const J2ObjcClassInfo _CmdArgs = { 1, "CmdArgs", "com.graphhopper.util", NULL, 0x1, 6, methods, 0, NULL, 0, NULL};
  return &_CmdArgs;
}

@end

CmdArgs *CmdArgs_readFromConfigWithNSString_withNSString_(NSString *fileStr, NSString *systemProperty) {
  CmdArgs_init();
  if ([((NSString *) nil_chk(systemProperty)) hasPrefix:@"-D"]) systemProperty = [systemProperty substring:2];
  NSString *configLocation = JavaLangSystem_getPropertyWithNSString_(systemProperty);
  if (Helper_isEmptyWithNSString_(configLocation)) configLocation = fileStr;
  id<JavaUtilMap> map = [[[JavaUtilLinkedHashMap alloc] init] autorelease];
  Helper_loadPropertiesWithJavaUtilMap_withJavaIoReader_(map, [[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[[[JavaIoFileInputStream alloc] initWithJavaIoFile:[((JavaIoFile *) [[[JavaIoFile alloc] initWithNSString:configLocation] autorelease]) getAbsoluteFile]] autorelease] withJavaNioCharsetCharset:Helper_get_UTF_CS_()] autorelease]);
  CmdArgs *args = [[[CmdArgs alloc] init] autorelease];
  [args mergeWithJavaUtilMap:map];
  JavaUtilProperties *props = JavaLangSystem_getProperties();
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilProperties *) nil_chk(props)) entrySet])) {
    NSString *k = ((NSString *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [NSString class]));
    NSString *v = ((NSString *) check_class_cast([e getValue], [NSString class]));
    if ([((NSString *) nil_chk(k)) hasPrefix:@"graphhopper."]) {
      k = [k substring:((jint) [@"graphhopper." length])];
      [args putWithNSString:k withId:v];
    }
  }
  return args;
}

CmdArgs *CmdArgs_readWithNSStringArray_(IOSObjectArray *args) {
  CmdArgs_init();
  id<JavaUtilMap> map = [[[JavaUtilLinkedHashMap alloc] init] autorelease];
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      jint index = [((NSString *) nil_chk(arg)) indexOfString:@"="];
      if (index <= 0) {
        continue;
      }
      NSString *key = [arg substring:0 endIndex:index];
      if ([((NSString *) nil_chk(key)) hasPrefix:@"-"]) {
        key = [key substring:1];
      }
      if ([((NSString *) nil_chk(key)) hasPrefix:@"-"]) {
        key = [key substring:1];
      }
      NSString *value = [arg substring:index + 1];
      [map putWithId:[((NSString *) nil_chk(key)) lowercaseString] withId:value];
    }
  }
  return [[[CmdArgs alloc] initWithJavaUtilMap:map] autorelease];
}

CmdArgs *CmdArgs_readFromConfigAndMergeWithCmdArgs_withNSString_withNSString_(CmdArgs *args, NSString *configKey, NSString *configSysAttr) {
  CmdArgs_init();
  NSString *configVal = [((CmdArgs *) nil_chk(args)) getWithNSString:configKey withNSString:@""];
  if (!Helper_isEmptyWithNSString_(configVal)) {
    @try {
      CmdArgs *tmp = CmdArgs_readFromConfigWithNSString_withNSString_(configVal, configSysAttr);
      [((CmdArgs *) nil_chk(tmp)) mergeWithPMap:args];
      return tmp;
    }
    @catch (JavaLangException *ex) {
      @throw [[[JavaLangRuntimeException alloc] initWithJavaLangThrowable:ex] autorelease];
    }
  }
  return args;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CmdArgs)
