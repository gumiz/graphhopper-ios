//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/DistanceCalcEarth.java
//

#ifndef _DistanceCalcEarth_H_
#define _DistanceCalcEarth_H_

@class BBox;
@class GHPoint;

#include "J2ObjC_header.h"
#include "com/graphhopper/util/DistanceCalc.h"

#define DistanceCalcEarth_C 4.003017359204114E7
#define DistanceCalcEarth_KM_MILE 1.609344
#define DistanceCalcEarth_R 6371000.0
#define DistanceCalcEarth_R_EQ 6378137.0

/**
 @author Peter Karich
 */
@interface DistanceCalcEarth : NSObject < DistanceCalc > {
}

/**
 @brief Calculates distance of (from, to) in meter.
 <p> http://en.wikipedia.org/wiki/Haversine_formula a = sin²(Δlat/2) + cos(lat1).cos(lat2).sin²(Δlong/2) c = 2.atan2(√a, √(1−a)) d = R.c
 */
- (jdouble)calcDistWithDouble:(jdouble)fromLat
                   withDouble:(jdouble)fromLon
                   withDouble:(jdouble)toLat
                   withDouble:(jdouble)toLon;

- (jdouble)calcDenormalizedDistWithDouble:(jdouble)normedDist;

/**
 @brief Returns the specified length in normalized meter.
 */
- (jdouble)calcNormalizedDistWithDouble:(jdouble)dist;

- (jdouble)calcNormalizedDistWithDouble:(jdouble)fromLat
                             withDouble:(jdouble)fromLon
                             withDouble:(jdouble)toLat
                             withDouble:(jdouble)toLon;

/**
 @brief Circumference of the earth at different latitudes (breitengrad)
 */
- (jdouble)calcCircumferenceWithDouble:(jdouble)lat;

- (jboolean)isDateLineCrossOverWithDouble:(jdouble)lon1
                               withDouble:(jdouble)lon2;

- (BBox *)createBBoxWithDouble:(jdouble)lat
                    withDouble:(jdouble)lon
                    withDouble:(jdouble)radiusInMeter;

- (jdouble)calcNormalizedEdgeDistanceWithDouble:(jdouble)r_lat_deg
                                     withDouble:(jdouble)r_lon_deg
                                     withDouble:(jdouble)a_lat_deg
                                     withDouble:(jdouble)a_lon_deg
                                     withDouble:(jdouble)b_lat_deg
                                     withDouble:(jdouble)b_lon_deg;

/**
 @brief New edge distance calculation where no validEdgeDistance check would be necessary <p>
 @return the normalized distance of the query point "r" to the project point "c" onto the line segment a-b
 */
- (jdouble)calcNormalizedEdgeDistanceNewWithDouble:(jdouble)r_lat_deg
                                        withDouble:(jdouble)r_lon_deg
                                        withDouble:(jdouble)a_lat_deg
                                        withDouble:(jdouble)a_lon_deg
                                        withDouble:(jdouble)b_lat_deg
                                        withDouble:(jdouble)b_lon_deg
                                       withBoolean:(jboolean)reduceToSegment;

- (GHPoint *)calcCrossingPointToEdgeWithDouble:(jdouble)r_lat_deg
                                    withDouble:(jdouble)r_lon_deg
                                    withDouble:(jdouble)a_lat_deg
                                    withDouble:(jdouble)a_lon_deg
                                    withDouble:(jdouble)b_lat_deg
                                    withDouble:(jdouble)b_lon_deg;

- (jboolean)validEdgeDistanceWithDouble:(jdouble)r_lat_deg
                             withDouble:(jdouble)r_lon_deg
                             withDouble:(jdouble)a_lat_deg
                             withDouble:(jdouble)a_lon_deg
                             withDouble:(jdouble)b_lat_deg
                             withDouble:(jdouble)b_lon_deg;

- (GHPoint *)projectCoordinateWithDouble:(jdouble)latInDeg
                              withDouble:(jdouble)lonInDeg
                              withDouble:(jdouble)distanceInMeter
                              withDouble:(jdouble)headingClockwiseFromNorth;

- (jboolean)isCrossBoundaryWithDouble:(jdouble)lon1
                           withDouble:(jdouble)lon2;

- (NSString *)description;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(DistanceCalcEarth)

CF_EXTERN_C_BEGIN

J2OBJC_STATIC_FIELD_GETTER(DistanceCalcEarth, R, jdouble)

J2OBJC_STATIC_FIELD_GETTER(DistanceCalcEarth, R_EQ, jdouble)

J2OBJC_STATIC_FIELD_GETTER(DistanceCalcEarth, C, jdouble)

J2OBJC_STATIC_FIELD_GETTER(DistanceCalcEarth, KM_MILE, jdouble)
CF_EXTERN_C_END

typedef DistanceCalcEarth ComGraphhopperUtilDistanceCalcEarth;

J2OBJC_TYPE_LITERAL_HEADER(DistanceCalcEarth)

#endif // _DistanceCalcEarth_H_
