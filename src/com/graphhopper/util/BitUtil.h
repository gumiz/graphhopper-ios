//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/BitUtil.java
//

#ifndef _BitUtil_H_
#define _BitUtil_H_

@class IOSByteArray;
@class JavaNioByteOrder;

#include "J2ObjC_header.h"

/**
 @brief Examples for BIG endianess (default for Java and computer network).
 <pre> 0=&gt;0100 0001 1=&gt;1110 1011 2=&gt;... </pre> LITTLE endianess is default for GraphHopper and most microprocessors.
 @author Peter Karich
 */
@interface BitUtil : NSObject {
}

+ (BitUtil *)getWithJavaNioByteOrder:(JavaNioByteOrder *)order;

- (jdouble)toDoubleWithByteArray:(IOSByteArray *)bytes;

- (jdouble)toDoubleWithByteArray:(IOSByteArray *)bytes
                         withInt:(jint)offset;

- (IOSByteArray *)fromDoubleWithDouble:(jdouble)value;

- (void)fromDoubleWithByteArray:(IOSByteArray *)bytes
                     withDouble:(jdouble)value;

- (void)fromDoubleWithByteArray:(IOSByteArray *)bytes
                     withDouble:(jdouble)value
                        withInt:(jint)offset;

- (jfloat)toFloatWithByteArray:(IOSByteArray *)bytes;

- (jfloat)toFloatWithByteArray:(IOSByteArray *)bytes
                       withInt:(jint)offset;

- (IOSByteArray *)fromFloatWithFloat:(jfloat)value;

- (void)fromFloatWithByteArray:(IOSByteArray *)bytes
                     withFloat:(jfloat)value;

- (void)fromFloatWithByteArray:(IOSByteArray *)bytes
                     withFloat:(jfloat)value
                       withInt:(jint)offset;

- (jshort)toShortWithByteArray:(IOSByteArray *)b;

- (jshort)toShortWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset;

- (jint)toIntWithByteArray:(IOSByteArray *)b;

- (jint)toIntWithByteArray:(IOSByteArray *)b
                   withInt:(jint)offset;

- (IOSByteArray *)fromIntWithInt:(jint)value;

- (void)fromIntWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)value;

- (IOSByteArray *)fromShortWithShort:(jshort)value;

- (void)fromShortWithByteArray:(IOSByteArray *)bytes
                     withShort:(jshort)value;

- (void)fromShortWithByteArray:(IOSByteArray *)bytes
                     withShort:(jshort)value
                       withInt:(jint)offset;

- (void)fromIntWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)value
                     withInt:(jint)offset;

- (jlong)toLongWithByteArray:(IOSByteArray *)b;

- (jlong)toLongWithInt:(jint)high
               withInt:(jint)low;

- (jlong)toLongWithByteArray:(IOSByteArray *)b
                     withInt:(jint)offset;

- (IOSByteArray *)fromLongWithLong:(jlong)value;

- (void)fromLongWithByteArray:(IOSByteArray *)bytes
                     withLong:(jlong)value;

- (void)fromLongWithByteArray:(IOSByteArray *)bytes
                     withLong:(jlong)value
                      withInt:(jint)offset;

/**
 @brief The only purpose of this method is to test 'reverse'. toBitString is the reverse and both are indepentent of the endianness.
 */
- (jlong)fromBitString2LongWithNSString:(NSString *)str;

- (IOSByteArray *)fromBitStringWithNSString:(NSString *)str;

/**
 @brief Similar to Long.toBinaryString
 */
- (NSString *)toBitStringWithLong:(jlong)value;

- (NSString *)toLastBitStringWithLong:(jlong)value
                              withInt:(jint)bits;

/**
 @brief Higher order bits comes first in the returned string.
 <p>
 @param bits how many bits should be returned.
 */
- (NSString *)toBitStringWithLong:(jlong)value
                          withInt:(jint)bits;

/**
 @brief Higher order bits comes first in the returned string.
 */
- (NSString *)toBitStringWithByteArray:(IOSByteArray *)bytes;

/**
 @brief Reverses the bits in the specified long value and it removes the remaining higher bits.
 See also http://graphics.stanford.edu/~seander/bithacks.html#BitReverseObvious <p>
 @param maxBits the maximum number of recognized bits for reversal
 */
- (jlong)reverseWithLong:(jlong)value
                 withInt:(jint)maxBits;

- (jint)getIntLowWithLong:(jlong)longValue;

- (jint)getIntHighWithLong:(jlong)longValue;

- (jlong)combineIntsToLongWithInt:(jint)intLow
                          withInt:(jint)intHigh;

- (jlong)reverseLeftWithLong:(jlong)value
                     withInt:(jint)maxBits;

- (instancetype)init;

@end

FOUNDATION_EXPORT BOOL BitUtil_initialized;
J2OBJC_STATIC_INIT(BitUtil)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT BitUtil *BitUtil_getWithJavaNioByteOrder_(JavaNioByteOrder *order);

FOUNDATION_EXPORT BitUtil *BitUtil_LITTLE_;
J2OBJC_STATIC_FIELD_GETTER(BitUtil, LITTLE_, BitUtil *)

FOUNDATION_EXPORT BitUtil *BitUtil_BIG_;
J2OBJC_STATIC_FIELD_GETTER(BitUtil, BIG_, BitUtil *)
CF_EXTERN_C_END

typedef BitUtil ComGraphhopperUtilBitUtil;

J2OBJC_TYPE_LITERAL_HEADER(BitUtil)

#endif // _BitUtil_H_
