//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/Downloader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/util/Downloader.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/ProgressListener.h"
#include "com/graphhopper/util/Unzipper.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/net/HttpURLConnection.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/zip/GZIPInputStream.h"
#include "java/util/zip/Inflater.h"
#include "java/util/zip/InflaterInputStream.h"

@interface Downloader () {
 @public
  NSString *userAgent_;
  NSString *referrer_;
  NSString *acceptEncoding_;
  jint timeout_;
}
@end

J2OBJC_FIELD_SETTER(Downloader, userAgent_, NSString *)
J2OBJC_FIELD_SETTER(Downloader, referrer_, NSString *)
J2OBJC_FIELD_SETTER(Downloader, acceptEncoding_, NSString *)

@interface Downloader_$2 () {
 @public
  id<ProgressListener> val$progressListener_;
  jint val$length_;
}
@end

J2OBJC_FIELD_SETTER(Downloader_$2, val$progressListener_, id<ProgressListener>)

@implementation Downloader

- (instancetype)initWithNSString:(NSString *)userAgent {
  if (self = [super init]) {
    Downloader_set_referrer_(self, @"http://graphhopper.com");
    Downloader_set_acceptEncoding_(self, @"gzip, deflate");
    timeout_ = 4000;
    Downloader_set_userAgent_(self, userAgent);
  }
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  Downloader_mainWithNSStringArray_(args);
}

- (Downloader *)setTimeoutWithInt:(jint)timeout {
  self->timeout_ = timeout;
  return self;
}

- (Downloader *)setReferrerWithNSString:(NSString *)referrer {
  Downloader_set_referrer_(self, referrer);
  return self;
}

- (JavaIoInputStream *)fetchWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *)connection
                                             withBoolean:(jboolean)readErrorStreamNoException {
  [((JavaNetHttpURLConnection *) nil_chk(connection)) connect];
  JavaIoInputStream *is;
  if (readErrorStreamNoException && [connection getResponseCode] >= 400 && [connection getErrorStream] != nil) is = [connection getErrorStream];
  else is = [connection getInputStream];
  if (is == nil) @throw [[[JavaIoIOException alloc] initWithNSString:JreStrcat("$$", @"Stream is null. Message:", [connection getResponseMessage])] autorelease];
  @try {
    NSString *encoding = [connection getContentEncoding];
    if (encoding != nil && [encoding equalsIgnoreCase:@"gzip"]) is = [[[JavaUtilZipGZIPInputStream alloc] initWithJavaIoInputStream:is] autorelease];
    else if (encoding != nil && [encoding equalsIgnoreCase:@"deflate"]) is = [[[JavaUtilZipInflaterInputStream alloc] initWithJavaIoInputStream:is withJavaUtilZipInflater:[[[JavaUtilZipInflater alloc] initWithBoolean:YES] autorelease]] autorelease];
  }
  @catch (JavaIoIOException *ex) {
  }
  return is;
}

- (JavaIoInputStream *)fetchWithNSString:(NSString *)url {
  return [self fetchWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *) check_class_cast([self createConnectionWithNSString:url], [JavaNetHttpURLConnection class]) withBoolean:NO];
}

- (JavaNetHttpURLConnection *)createConnectionWithNSString:(NSString *)urlStr {
  JavaNetURL *url = [[[JavaNetURL alloc] initWithNSString:urlStr] autorelease];
  JavaNetHttpURLConnection *conn = (JavaNetHttpURLConnection *) check_class_cast([url openConnection], [JavaNetHttpURLConnection class]);
  [((JavaNetHttpURLConnection *) nil_chk(conn)) setDoInputWithBoolean:YES];
  [conn setUseCachesWithBoolean:YES];
  [conn setRequestPropertyWithNSString:@"Referrer" withNSString:referrer_];
  [conn setRequestPropertyWithNSString:@"User-Agent" withNSString:userAgent_];
  [conn setRequestPropertyWithNSString:@"Accept-Encoding" withNSString:acceptEncoding_];
  [conn setReadTimeoutWithInt:timeout_];
  [conn setConnectTimeoutWithInt:timeout_];
  return conn;
}

- (void)downloadFileWithNSString:(NSString *)url
                    withNSString:(NSString *)toFile {
  JavaNetHttpURLConnection *conn = [self createConnectionWithNSString:url];
  JavaIoInputStream *iStream = [self fetchWithJavaNetHttpURLConnection:conn withBoolean:NO];
  jint size = 8 * 1024;
  JavaIoBufferedOutputStream *writer = [[[JavaIoBufferedOutputStream alloc] initWithJavaIoOutputStream:[[[JavaIoFileOutputStream alloc] initWithNSString:toFile] autorelease] withInt:size] autorelease];
  JavaIoInputStream *in = [[[JavaIoBufferedInputStream alloc] initWithJavaIoInputStream:iStream withInt:size] autorelease];
  @try {
    IOSByteArray *buffer = [IOSByteArray arrayWithLength:size];
    jint numRead;
    while ((numRead = [in readWithByteArray:buffer]) != -1) {
      [writer writeWithByteArray:buffer withInt:0 withInt:numRead];
    }
  }
  @finally {
    Helper_closeWithJavaIoCloseable_(writer);
    Helper_closeWithJavaIoCloseable_(in);
  }
}

- (void)downloadAndUnzipWithNSString:(NSString *)url
                        withNSString:(NSString *)toFolder
                withProgressListener:(id<ProgressListener>)progressListener {
  JavaNetHttpURLConnection *conn = [self createConnectionWithNSString:url];
  jint length = [((JavaNetHttpURLConnection *) nil_chk(conn)) getContentLength];
  JavaIoInputStream *iStream = [self fetchWithJavaNetHttpURLConnection:conn withBoolean:NO];
  [((Unzipper *) [[[Unzipper alloc] init] autorelease]) unzipWithJavaIoInputStream:iStream withJavaIoFile:[[[JavaIoFile alloc] initWithNSString:toFolder] autorelease] withProgressListener:[[[Downloader_$2 alloc] initWithProgressListener:progressListener withInt:length] autorelease]];
}

- (NSString *)downloadAsStringWithNSString:(NSString *)url
                               withBoolean:(jboolean)readErrorStreamNoException {
  return Helper_isToStringWithJavaIoInputStream_([self fetchWithJavaNetHttpURLConnection:(JavaNetHttpURLConnection *) check_class_cast([self createConnectionWithNSString:url], [JavaNetHttpURLConnection class]) withBoolean:readErrorStreamNoException]);
}

- (void)dealloc {
  RELEASE_(userAgent_);
  RELEASE_(referrer_);
  RELEASE_(acceptEncoding_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(Downloader *)other {
  [super copyAllFieldsTo:other];
  Downloader_set_userAgent_(other, userAgent_);
  Downloader_set_referrer_(other, referrer_);
  Downloader_set_acceptEncoding_(other, acceptEncoding_);
  other->timeout_ = timeout_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "Downloader", NULL, 0x1, NULL },
    { "mainWithNSStringArray:", "main", "V", 0x9, "Ljava.io.IOException;" },
    { "setTimeoutWithInt:", "setTimeout", "Lcom.graphhopper.util.Downloader;", 0x1, NULL },
    { "setReferrerWithNSString:", "setReferrer", "Lcom.graphhopper.util.Downloader;", 0x1, NULL },
    { "fetchWithJavaNetHttpURLConnection:withBoolean:", "fetch", "Ljava.io.InputStream;", 0x1, "Ljava.io.IOException;" },
    { "fetchWithNSString:", "fetch", "Ljava.io.InputStream;", 0x1, "Ljava.io.IOException;" },
    { "createConnectionWithNSString:", "createConnection", "Ljava.net.HttpURLConnection;", 0x1, "Ljava.io.IOException;" },
    { "downloadFileWithNSString:withNSString:", "downloadFile", "V", 0x1, "Ljava.io.IOException;" },
    { "downloadAndUnzipWithNSString:withNSString:withProgressListener:", "downloadAndUnzip", "V", 0x1, "Ljava.io.IOException;" },
    { "downloadAsStringWithNSString:withBoolean:", "downloadAsString", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "userAgent_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "referrer_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "acceptEncoding_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "timeout_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _Downloader = { 1, "Downloader", "com.graphhopper.util", NULL, 0x1, 10, methods, 4, fields, 0, NULL};
  return &_Downloader;
}

@end

void Downloader_mainWithNSStringArray_(IOSObjectArray *args) {
  Downloader_init();
  [((Downloader *) [[[Downloader alloc] initWithNSString:@"GraphHopper Downloader"] autorelease]) downloadAndUnzipWithNSString:@"http://graphhopper.com/public/maps/0.1/europe_germany_berlin.ghz" withNSString:@"somefolder" withProgressListener:[[[Downloader_$1 alloc] init] autorelease]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Downloader)

@implementation Downloader_$1

- (void)updateWithLong:(jlong)val {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$J", @"progress:", val)];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updateWithLong:", "update", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _Downloader_$1 = { 1, "$1", "com.graphhopper.util", "Downloader", 0x8000, 2, methods, 0, NULL, 0, NULL};
  return &_Downloader_$1;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Downloader_$1)

@implementation Downloader_$2

- (void)updateWithLong:(jlong)sumBytes {
  [((id<ProgressListener>) nil_chk(val$progressListener_)) updateWithLong:(jint) (100 * sumBytes / val$length_)];
}

- (instancetype)initWithProgressListener:(id<ProgressListener>)capture$0
                                 withInt:(jint)capture$1 {
  Downloader_$2_set_val$progressListener_(self, capture$0);
  val$length_ = capture$1;
  return [super init];
}

- (void)dealloc {
  RELEASE_(val$progressListener_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(Downloader_$2 *)other {
  [super copyAllFieldsTo:other];
  Downloader_$2_set_val$progressListener_(other, val$progressListener_);
  other->val$length_ = val$length_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updateWithLong:", "update", "V", 0x1, NULL },
    { "initWithProgressListener:withInt:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$progressListener_", NULL, 0x1012, "Lcom.graphhopper.util.ProgressListener;", NULL,  },
    { "val$length_", NULL, 0x1012, "I", NULL,  },
  };
  static const J2ObjcClassInfo _Downloader_$2 = { 1, "$2", "com.graphhopper.util", "Downloader", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_Downloader_$2;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(Downloader_$2)
