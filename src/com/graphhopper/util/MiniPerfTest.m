//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/MiniPerfTest.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/util/MiniPerfTest.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/text/DecimalFormat.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"

@interface MiniPerfTest () {
 @public
  jint counts_;
  jdouble fullTime_;
  jdouble max_;
  jdouble min_;
  jint dummySum_;
}
@end

@implementation MiniPerfTest

- (MiniPerfTest *)start {
  jint warmupCount = JavaLangMath_maxWithInt_withInt_(1, counts_ / 3);
  for (jint i = 0; i < warmupCount; i++) {
    dummySum_ += [self doCalcWithBoolean:YES withInt:i];
  }
  jlong startFull = JavaLangSystem_nanoTime();
  for (jint i = 0; i < counts_; i++) {
    jlong start = JavaLangSystem_nanoTime();
    dummySum_ += [self doCalcWithBoolean:NO withInt:i];
    jlong time = JavaLangSystem_nanoTime() - start;
    if (time < min_) min_ = time;
    if (time > max_) max_ = time;
  }
  fullTime_ = JavaLangSystem_nanoTime() - startFull;
  [((id<OrgSlf4jLogger>) nil_chk(logger_)) infoWithNSString:JreStrcat("$I", @"dummySum:", dummySum_)];
  return self;
}

- (MiniPerfTest *)setIterationsWithInt:(jint)counts {
  self->counts_ = counts;
  return self;
}

- (jdouble)getMin {
  return min_ / 1e6;
}

- (jdouble)getMax {
  return max_ / 1e6;
}

- (jdouble)getSum {
  return fullTime_ / 1e6;
}

- (jdouble)getMean {
  return [self getSum] / counts_;
}

- (NSString *)getReport {
  return JreStrcat("$$$$C", @"sum:", [self nfWithNSNumber:JavaLangDouble_valueOfWithDouble_([self getSum] / 1000.0f)], @"s, time/call:", [self nfWithNSNumber:JavaLangDouble_valueOfWithDouble_([self getMean] / 1000.0f)], 's');
}

- (NSString *)nfWithNSNumber:(NSNumber *)num {
  return [((JavaTextDecimalFormat *) [[[JavaTextDecimalFormat alloc] initWithNSString:@"#.#"] autorelease]) formatWithId:num];
}

- (jint)doCalcWithBoolean:(jboolean)warmup
                  withInt:(jint)run {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  if (self = [super init]) {
    MiniPerfTest_set_logger_(self, OrgSlf4jLoggerFactory_getLoggerWithIOSClass_([self getClass]));
    counts_ = 100;
    fullTime_ = 0;
    min_ = JavaLangDouble_MAX_VALUE;
  }
  return self;
}

- (void)dealloc {
  RELEASE_(logger_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(MiniPerfTest *)other {
  [super copyAllFieldsTo:other];
  MiniPerfTest_set_logger_(other, logger_);
  other->counts_ = counts_;
  other->fullTime_ = fullTime_;
  other->max_ = max_;
  other->min_ = min_;
  other->dummySum_ = dummySum_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "start", NULL, "Lcom.graphhopper.util.MiniPerfTest;", 0x1, NULL },
    { "setIterationsWithInt:", "setIterations", "Lcom.graphhopper.util.MiniPerfTest;", 0x1, NULL },
    { "getMin", NULL, "D", 0x1, NULL },
    { "getMax", NULL, "D", 0x1, NULL },
    { "getSum", NULL, "D", 0x1, NULL },
    { "getMean", NULL, "D", 0x1, NULL },
    { "getReport", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "nfWithNSNumber:", "nf", "Ljava.lang.String;", 0x1, NULL },
    { "doCalcWithBoolean:withInt:", "doCalc", "I", 0x401, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "logger_", NULL, 0x4, "Lorg.slf4j.Logger;", NULL,  },
    { "counts_", NULL, 0x2, "I", NULL,  },
    { "fullTime_", NULL, 0x2, "D", NULL,  },
    { "max_", NULL, 0x2, "D", NULL,  },
    { "min_", NULL, 0x2, "D", NULL,  },
    { "dummySum_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _MiniPerfTest = { 1, "MiniPerfTest", "com.graphhopper.util", NULL, 0x401, 10, methods, 6, fields, 0, NULL};
  return &_MiniPerfTest;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MiniPerfTest)
