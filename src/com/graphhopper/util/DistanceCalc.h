//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/DistanceCalc.java
//

#ifndef _DistanceCalc_H_
#define _DistanceCalc_H_

@class BBox;
@class GHPoint;

#include "J2ObjC_header.h"

/**
 @brief Calculates the distance of two points or one point and an edge on earth via haversine formula.
 Allows subclasses to implement less or more precise calculations. <p> See http://en.wikipedia.org/wiki/Haversine_formula
 @author Peter Karich
 */
@protocol DistanceCalc < NSObject, JavaObject >

- (BBox *)createBBoxWithDouble:(jdouble)lat
                    withDouble:(jdouble)lon
                    withDouble:(jdouble)radiusInMeter;

- (jdouble)calcCircumferenceWithDouble:(jdouble)lat;

/**
 @brief Calculates distance of (from, to) in meter.
 */
- (jdouble)calcDistWithDouble:(jdouble)fromLat
                   withDouble:(jdouble)fromLon
                   withDouble:(jdouble)toLat
                   withDouble:(jdouble)toLon;

/**
 @brief Returns the specified length in normalized meter.
 */
- (jdouble)calcNormalizedDistWithDouble:(jdouble)dist;

/**
 @brief Inverse to calcNormalizedDist.
 Returned the length in meter.
 */
- (jdouble)calcDenormalizedDistWithDouble:(jdouble)normedDist;

/**
 @brief Calculates in normalized meter
 */
- (jdouble)calcNormalizedDistWithDouble:(jdouble)fromLat
                             withDouble:(jdouble)fromLon
                             withDouble:(jdouble)toLat
                             withDouble:(jdouble)toLon;

/**
 @brief This method decides for case 1: if we should use distance(r to edge) where r=(lat,lon) or case 2: min(distance(r to a), distance(r to b)) where edge=(a to b).
 Note that due to rounding errors it cannot properly detect if it is case 1 or 90°. <pre> case 1 (including ): r . a-------b </pre> <pre> case 2: r . a-------b </pre>
 @return true for case 1 which is "on edge" or the special case of 90° to the edge
 */
- (jboolean)validEdgeDistanceWithDouble:(jdouble)r_lat_deg
                             withDouble:(jdouble)r_lon_deg
                             withDouble:(jdouble)a_lat_deg
                             withDouble:(jdouble)a_lon_deg
                             withDouble:(jdouble)b_lat_deg
                             withDouble:(jdouble)b_lon_deg;

/**
 @brief This method calculates the distance from r to edge (a, b) where the crossing point is c
 @return the distance in normalized meter
 */
- (jdouble)calcNormalizedEdgeDistanceWithDouble:(jdouble)r_lat_deg
                                     withDouble:(jdouble)r_lon_deg
                                     withDouble:(jdouble)a_lat_deg
                                     withDouble:(jdouble)a_lon_deg
                                     withDouble:(jdouble)b_lat_deg
                                     withDouble:(jdouble)b_lon_deg;

/**
 @return the crossing point c of the vertical line from r to line (a, b)
 */
- (GHPoint *)calcCrossingPointToEdgeWithDouble:(jdouble)r_lat_deg
                                    withDouble:(jdouble)r_lon_deg
                                    withDouble:(jdouble)a_lat_deg
                                    withDouble:(jdouble)a_lon_deg
                                    withDouble:(jdouble)b_lat_deg
                                    withDouble:(jdouble)b_lon_deg;

/**
 @brief This methods projects a point given in lat and long (in degrees) into a direction, given as heading, measured clockwise from north in degrees.
 The distance is passed in km.
 */
- (GHPoint *)projectCoordinateWithDouble:(jdouble)lat_deg
                              withDouble:(jdouble)lon_deg
                              withDouble:(jdouble)distanceInMeter
                              withDouble:(jdouble)headingClockwiseFromNorth;

- (jboolean)isCrossBoundaryWithDouble:(jdouble)lon1
                           withDouble:(jdouble)lon2;

@end

J2OBJC_EMPTY_STATIC_INIT(DistanceCalc)

#define ComGraphhopperUtilDistanceCalc DistanceCalc

J2OBJC_TYPE_LITERAL_HEADER(DistanceCalc)

#endif // _DistanceCalc_H_
