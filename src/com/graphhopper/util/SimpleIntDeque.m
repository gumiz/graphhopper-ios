//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/SimpleIntDeque.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/util/SimpleIntDeque.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@interface SimpleIntDeque () {
 @public
  IOSIntArray *arr_;
  jfloat growFactor_;
  jint frontIndex_;
  jint endIndexPlusOne_;
}
@end

J2OBJC_FIELD_SETTER(SimpleIntDeque, arr_, IOSIntArray *)

@implementation SimpleIntDeque

- (instancetype)init {
  return [self initSimpleIntDequeWithInt:100 withFloat:2];
}

- (instancetype)initWithInt:(jint)initSize {
  return [self initSimpleIntDequeWithInt:initSize withFloat:2];
}

- (instancetype)initSimpleIntDequeWithInt:(jint)initSize
                                withFloat:(jfloat)growFactor {
  if (self = [super init]) {
    if (J2ObjCFpToInt((initSize * growFactor)) <= initSize) {
      @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"initial size or increasing grow-factor too low!"] autorelease];
    }
    self->growFactor_ = growFactor;
    SimpleIntDeque_setAndConsume_arr_(self, [IOSIntArray newArrayWithLength:initSize]);
  }
  return self;
}

- (instancetype)initWithInt:(jint)initSize
                  withFloat:(jfloat)growFactor {
  return [self initSimpleIntDequeWithInt:initSize withFloat:growFactor];
}

- (jint)getCapacity {
  return ((IOSIntArray *) nil_chk(arr_))->size_;
}

- (void)setGrowFactorWithFloat:(jfloat)factor {
  self->growFactor_ = factor;
}

- (jboolean)isEmpty {
  return frontIndex_ >= endIndexPlusOne_;
}

- (jint)pop {
  jint tmp = IOSIntArray_Get(nil_chk(arr_), frontIndex_);
  frontIndex_++;
  jint smallerSize = J2ObjCFpToInt((arr_->size_ / growFactor_));
  if (frontIndex_ > smallerSize) {
    endIndexPlusOne_ = [self getSize];
    IOSIntArray *newArr = [IOSIntArray arrayWithLength:endIndexPlusOne_ + 10];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr_, frontIndex_, newArr, 0, endIndexPlusOne_);
    SimpleIntDeque_set_arr_(self, newArr);
    frontIndex_ = 0;
  }
  return tmp;
}

- (jint)getSize {
  return endIndexPlusOne_ - frontIndex_;
}

- (void)pushWithInt:(jint)v {
  if (endIndexPlusOne_ >= ((IOSIntArray *) nil_chk(arr_))->size_) {
    SimpleIntDeque_set_arr_(self, JavaUtilArrays_copyOfWithIntArray_withInt_(arr_, J2ObjCFpToInt((arr_->size_ * growFactor_))));
  }
  *IOSIntArray_GetRef(nil_chk(arr_), endIndexPlusOne_) = v;
  endIndexPlusOne_++;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] init] autorelease];
  for (jint i = frontIndex_; i < endIndexPlusOne_; i++) {
    if (i > frontIndex_) {
      [sb appendWithNSString:@", "];
    }
    [sb appendWithInt:IOSIntArray_Get(nil_chk(arr_), i)];
  }
  return [sb description];
}

- (void)dealloc {
  RELEASE_(arr_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(SimpleIntDeque *)other {
  [super copyAllFieldsTo:other];
  SimpleIntDeque_set_arr_(other, arr_);
  other->growFactor_ = growFactor_;
  other->frontIndex_ = frontIndex_;
  other->endIndexPlusOne_ = endIndexPlusOne_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleIntDeque", NULL, 0x1, NULL },
    { "initWithInt:", "SimpleIntDeque", NULL, 0x1, NULL },
    { "initWithInt:withFloat:", "SimpleIntDeque", NULL, 0x1, NULL },
    { "getCapacity", NULL, "I", 0x0, NULL },
    { "setGrowFactorWithFloat:", "setGrowFactor", "V", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "pop", NULL, "I", 0x1, NULL },
    { "getSize", NULL, "I", 0x1, NULL },
    { "pushWithInt:", "push", "V", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arr_", NULL, 0x2, "[I", NULL,  },
    { "growFactor_", NULL, 0x2, "F", NULL,  },
    { "frontIndex_", NULL, 0x2, "I", NULL,  },
    { "endIndexPlusOne_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _SimpleIntDeque = { 1, "SimpleIntDeque", "com.graphhopper.util", NULL, 0x1, 10, methods, 4, fields, 0, NULL};
  return &_SimpleIntDeque;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(SimpleIntDeque)
