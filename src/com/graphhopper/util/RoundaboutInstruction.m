//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/graphhopper/util/Helper.h"
#include "com/graphhopper/util/Instruction.h"
#include "com/graphhopper/util/InstructionAnnotation.h"
#include "com/graphhopper/util/PointList.h"
#include "com/graphhopper/util/RoundaboutInstruction.h"
#include "com/graphhopper/util/Translation.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@interface RoundaboutInstruction () {
 @public
  jint exitNumber_;
  jint clockwise_;
  jboolean exited_;
  jdouble radian_;
}
@end

@implementation RoundaboutInstruction

- (instancetype)initWithInt:(jint)sign
               withNSString:(NSString *)name
  withInstructionAnnotation:(InstructionAnnotation *)ia
              withPointList:(PointList *)pl {
  if (self = [super initWithInt:sign withNSString:name withInstructionAnnotation:ia withPointList:pl]) {
    exitNumber_ = 0;
    clockwise_ = 0;
    exited_ = NO;
    radian_ = JavaLangDouble_NaN;
  }
  return self;
}

- (RoundaboutInstruction *)increaseExitNumber {
  self->exitNumber_ += 1;
  return self;
}

- (RoundaboutInstruction *)setDirOfRotationWithDouble:(jdouble)deltaIn {
  if (clockwise_ == 0) {
    clockwise_ = deltaIn > 0 ? 1 : -1;
  }
  else {
    jint clockwise2 = deltaIn > 0 ? 1 : -1;
    if (clockwise_ != clockwise2) {
      clockwise_ = 2;
    }
  }
  return self;
}

- (RoundaboutInstruction *)setExited {
  exited_ = YES;
  return self;
}

- (jboolean)isExited {
  return exited_;
}

- (jint)getExitNumber {
  if (exited_ && exitNumber_ == 0) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"RoundaboutInstruction must contain exitNumber>0"] autorelease];
  }
  return exitNumber_;
}

- (RoundaboutInstruction *)setExitNumberWithInt:(jint)exitNumber {
  self->exitNumber_ = exitNumber;
  return self;
}

- (jdouble)getTurnAngle {
  if (JavaLangMath_absWithInt_(clockwise_) != 1) return JavaLangDouble_NaN;
  else return JavaLangMath_PI * clockwise_ - radian_;
}

- (RoundaboutInstruction *)setRadianWithDouble:(jdouble)radian {
  self->radian_ = radian;
  return self;
}

- (id<JavaUtilMap>)getExtraInfoJSON {
  id<JavaUtilMap> tmpMap = [[[JavaUtilHashMap alloc] initWithInt:2] autorelease];
  [tmpMap putWithId:@"exit_number" withId:JavaLangInteger_valueOfWithInt_([self getExitNumber])];
  jdouble tmpAngle = [self getTurnAngle];
  if (!JavaLangDouble_isNaNWithDouble_(tmpAngle)) [tmpMap putWithId:@"turn_angle" withId:JavaLangDouble_valueOfWithDouble_(Helper_roundWithDouble_withInt_(tmpAngle, 2))];
  return tmpMap;
}

- (NSString *)getTurnDescriptionWithTranslation:(id<Translation>)tr {
  if (rawName_) return [self getName];
  NSString *str;
  NSString *streetName = [self getName];
  jint indi = [self getSign];
  if (indi == Instruction_USE_ROUNDABOUT) {
    if (!exited_) {
      str = [((id<Translation>) nil_chk(tr)) trWithNSString:@"roundabout_enter" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
    }
    else {
      str = Helper_isEmptyWithNSString_(streetName) ? [((id<Translation>) nil_chk(tr)) trWithNSString:@"roundabout_exit" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([self getExitNumber]) } count:1 type:NSObject_class_()]] : [((id<Translation>) nil_chk(tr)) trWithNSString:@"roundabout_exit_onto" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([self getExitNumber]), streetName } count:2 type:NSObject_class_()]];
    }
  }
  else {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:JreStrcat("I$", indi, @"no roundabout indication")] autorelease];
  }
  return str;
}

- (void)copyAllFieldsTo:(RoundaboutInstruction *)other {
  [super copyAllFieldsTo:other];
  other->exitNumber_ = exitNumber_;
  other->clockwise_ = clockwise_;
  other->exited_ = exited_;
  other->radian_ = radian_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withNSString:withInstructionAnnotation:withPointList:", "RoundaboutInstruction", NULL, 0x1, NULL },
    { "increaseExitNumber", NULL, "Lcom.graphhopper.util.RoundaboutInstruction;", 0x1, NULL },
    { "setDirOfRotationWithDouble:", "setDirOfRotation", "Lcom.graphhopper.util.RoundaboutInstruction;", 0x1, NULL },
    { "setExited", NULL, "Lcom.graphhopper.util.RoundaboutInstruction;", 0x1, NULL },
    { "isExited", NULL, "Z", 0x1, NULL },
    { "getExitNumber", NULL, "I", 0x1, NULL },
    { "setExitNumberWithInt:", "setExitNumber", "Lcom.graphhopper.util.RoundaboutInstruction;", 0x1, NULL },
    { "getTurnAngle", NULL, "D", 0x1, NULL },
    { "setRadianWithDouble:", "setRadian", "Lcom.graphhopper.util.RoundaboutInstruction;", 0x1, NULL },
    { "getExtraInfoJSON", NULL, "Ljava.util.Map;", 0x1, NULL },
    { "getTurnDescriptionWithTranslation:", "getTurnDescription", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "exitNumber_", NULL, 0x2, "I", NULL,  },
    { "clockwise_", NULL, 0x2, "I", NULL,  },
    { "exited_", NULL, 0x2, "Z", NULL,  },
    { "radian_", NULL, 0x2, "D", NULL,  },
  };
  static const J2ObjcClassInfo _RoundaboutInstruction = { 1, "RoundaboutInstruction", "com.graphhopper.util", NULL, 0x1, 11, methods, 4, fields, 0, NULL};
  return &_RoundaboutInstruction;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(RoundaboutInstruction)
