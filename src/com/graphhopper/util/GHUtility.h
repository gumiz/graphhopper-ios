//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/GHUtility.java
//

#ifndef _GHUtility_H_
#define _GHUtility_H_

@class GHBitSetImpl;
@class GraphHopperStorage;
@class IOSIntArray;
@class JavaUtilConcurrentAtomicAtomicInteger;
@class PointList;
@protocol CHEdgeIteratorState;
@protocol CHGraph;
@protocol Directory;
@protocol EdgeFilter;
@protocol EdgeIterator;
@protocol EdgeIteratorState;
@protocol FlagEncoder;
@protocol GHBitSet;
@protocol GnuTroveListTIntList;
@protocol Graph;
@protocol GraphStorage;
@protocol JavaUtilList;
@protocol JavaUtilSet;

#include "J2ObjC_header.h"
#include "com/graphhopper/util/BreadthFirstSearch.h"
#include "com/graphhopper/util/CHEdgeIterator.h"
#include "com/graphhopper/util/DepthFirstSearch.h"

/**
 @brief A helper class to avoid cluttering the Graph interface with all the common methods.
 Most of the methods are useful for unit tests or debugging only. <p>
 @author Peter Karich
 */
@interface GHUtility : NSObject {
}

/**
 @brief This method could throw exception if uncatched problems like index out of bounds etc
 */
+ (id<JavaUtilList>)getProblemsWithGraph:(id<Graph>)g;

/**
 @brief Counts reachable edges.
 */
+ (jint)countWithEdgeIterator:(id<EdgeIterator>)iter;

+ (id<JavaUtilSet>)asSetWithIntArray:(IOSIntArray *)values;

+ (id<JavaUtilSet>)getNeighborsWithEdgeIterator:(id<EdgeIterator>)iter;

+ (id<JavaUtilList>)getEdgeIdsWithEdgeIterator:(id<EdgeIterator>)iter;

+ (void)printEdgeInfoWithGraph:(id<Graph>)g
               withFlagEncoder:(id<FlagEncoder>)encoder;

+ (void)printInfoWithGraph:(id<Graph>)g
                   withInt:(jint)startNode
                   withInt:(jint)counts
            withEdgeFilter:(id<EdgeFilter>)filter;

+ (NSString *)getNodeInfoWithCHGraph:(id<CHGraph>)g
                             withInt:(jint)nodeId
                      withEdgeFilter:(id<EdgeFilter>)filter;

+ (NSString *)getNodeInfoWithGraph:(id<Graph>)g
                           withInt:(jint)nodeId
                    withEdgeFilter:(id<EdgeFilter>)filter;

+ (id<Graph>)shuffleWithGraph:(id<Graph>)g
                    withGraph:(id<Graph>)sortedGraph;

/**
 @brief Sorts the graph according to depth-first search traversal.
 Other traversals have either no significant difference (bfs) for querying or are worse (z-curve).
 */
+ (id<Graph>)sortDFSWithGraph:(id<Graph>)g
                    withGraph:(id<Graph>)sortedGraph;

+ (id<Graph>)createSortedGraphWithGraph:(id<Graph>)fromGraph
                              withGraph:(id<Graph>)toSortedGraph
               withGnuTroveListTIntList:(id<GnuTroveListTIntList>)oldToNewNodeList;

/**
 @return the specified toGraph which is now filled with data from fromGraph
 */
+ (id<Graph>)copyToWithGraph:(id<Graph>)fromGraph
                   withGraph:(id<Graph>)toGraph OBJC_METHOD_FAMILY_NONE;

+ (id<Directory>)guessDirectoryWithGraphStorage:(id<GraphStorage>)store;

/**
 @brief Create a new storage from the specified one without copying the data.
 */
+ (GraphHopperStorage *)newStorageWithGraphHopperStorage:(GraphHopperStorage *)store OBJC_METHOD_FAMILY_NONE;

+ (jint)getAdjNodeWithGraph:(id<Graph>)g
                    withInt:(jint)edge
                    withInt:(jint)adjNode;

+ (id<EdgeIteratorState>)createMockedEdgeIteratorStateWithDouble:(jdouble)distance
                                                        withLong:(jlong)flags;

/**
 @return the <b>first</b> edge containing the specified nodes base and adj. Returns null if not found.
 */
+ (id<EdgeIteratorState>)getEdgeWithGraph:(id<Graph>)graph
                                  withInt:(jint)base
                                  withInt:(jint)adj;

/**
 @brief Creates unique positive number for specified edgeId taking into account the direction defined by nodeA, nodeB and reverse.
 */
+ (jint)createEdgeKeyWithInt:(jint)nodeA
                     withInt:(jint)nodeB
                     withInt:(jint)edgeId
                 withBoolean:(jboolean)reverse;

/**
 @brief Returns if the specified edgeKeys (created by createEdgeKey) are identical regardless of the direction.
 */
+ (jboolean)isSameEdgeKeysWithInt:(jint)edgeKey1
                          withInt:(jint)edgeKey2;

/**
 @brief Returns the edgeKey of the opposite direction
 */
+ (jint)reverseEdgeKeyWithInt:(jint)edgeKey;

/**
 @return edge ID for edgeKey
 */
+ (jint)getEdgeFromEdgeKeyWithInt:(jint)edgeKey;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GHUtility)

CF_EXTERN_C_BEGIN

FOUNDATION_EXPORT id<JavaUtilList> GHUtility_getProblemsWithGraph_(id<Graph> g);

FOUNDATION_EXPORT jint GHUtility_countWithEdgeIterator_(id<EdgeIterator> iter);

FOUNDATION_EXPORT id<JavaUtilSet> GHUtility_asSetWithIntArray_(IOSIntArray *values);

FOUNDATION_EXPORT id<JavaUtilSet> GHUtility_getNeighborsWithEdgeIterator_(id<EdgeIterator> iter);

FOUNDATION_EXPORT id<JavaUtilList> GHUtility_getEdgeIdsWithEdgeIterator_(id<EdgeIterator> iter);

FOUNDATION_EXPORT void GHUtility_printEdgeInfoWithGraph_withFlagEncoder_(id<Graph> g, id<FlagEncoder> encoder);

FOUNDATION_EXPORT void GHUtility_printInfoWithGraph_withInt_withInt_withEdgeFilter_(id<Graph> g, jint startNode, jint counts, id<EdgeFilter> filter);

FOUNDATION_EXPORT NSString *GHUtility_getNodeInfoWithCHGraph_withInt_withEdgeFilter_(id<CHGraph> g, jint nodeId, id<EdgeFilter> filter);

FOUNDATION_EXPORT NSString *GHUtility_getNodeInfoWithGraph_withInt_withEdgeFilter_(id<Graph> g, jint nodeId, id<EdgeFilter> filter);

FOUNDATION_EXPORT id<Graph> GHUtility_shuffleWithGraph_withGraph_(id<Graph> g, id<Graph> sortedGraph);

FOUNDATION_EXPORT id<Graph> GHUtility_sortDFSWithGraph_withGraph_(id<Graph> g, id<Graph> sortedGraph);

FOUNDATION_EXPORT id<Graph> GHUtility_createSortedGraphWithGraph_withGraph_withGnuTroveListTIntList_(id<Graph> fromGraph, id<Graph> toSortedGraph, id<GnuTroveListTIntList> oldToNewNodeList);

FOUNDATION_EXPORT id<Graph> GHUtility_copyToWithGraph_withGraph_(id<Graph> fromGraph, id<Graph> toGraph);

FOUNDATION_EXPORT id<Directory> GHUtility_guessDirectoryWithGraphStorage_(id<GraphStorage> store);

FOUNDATION_EXPORT GraphHopperStorage *GHUtility_newStorageWithGraphHopperStorage_(GraphHopperStorage *store);

FOUNDATION_EXPORT jint GHUtility_getAdjNodeWithGraph_withInt_withInt_(id<Graph> g, jint edge, jint adjNode);

FOUNDATION_EXPORT id<EdgeIteratorState> GHUtility_createMockedEdgeIteratorStateWithDouble_withLong_(jdouble distance, jlong flags);

FOUNDATION_EXPORT id<EdgeIteratorState> GHUtility_getEdgeWithGraph_withInt_withInt_(id<Graph> graph, jint base, jint adj);

FOUNDATION_EXPORT jint GHUtility_createEdgeKeyWithInt_withInt_withInt_withBoolean_(jint nodeA, jint nodeB, jint edgeId, jboolean reverse);

FOUNDATION_EXPORT jboolean GHUtility_isSameEdgeKeysWithInt_withInt_(jint edgeKey1, jint edgeKey2);

FOUNDATION_EXPORT jint GHUtility_reverseEdgeKeyWithInt_(jint edgeKey);

FOUNDATION_EXPORT jint GHUtility_getEdgeFromEdgeKeyWithInt_(jint edgeKey);
CF_EXTERN_C_END

typedef GHUtility ComGraphhopperUtilGHUtility;

J2OBJC_TYPE_LITERAL_HEADER(GHUtility)

@interface GHUtility_$1 : BreadthFirstSearch {
 @public
  jint counter_;
}

- (jboolean)goFurtherWithInt:(jint)nodeId;

- (instancetype)initWithGraph:(id<Graph>)capture$0
               withEdgeFilter:(id<EdgeFilter>)capture$1
                      withInt:(jint)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(GHUtility_$1)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(GHUtility_$1)

@interface GHUtility_$2 : DepthFirstSearch {
}

- (id<GHBitSet>)createBitSet;

- (jboolean)goFurtherWithInt:(jint)nodeId;

- (instancetype)initWithGHBitSetImpl:(GHBitSetImpl *)capture$0
            withGnuTroveListTIntList:(id<GnuTroveListTIntList>)capture$1
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(GHUtility_$2)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(GHUtility_$2)

/**
 @brief This edge iterator can be used in tests to mock specific iterator behaviour via overloading certain methods.
 */
@interface GHUtility_DisabledEdgeIterator : NSObject < CHEdgeIterator > {
}

- (id<EdgeIterator>)detachWithBoolean:(jboolean)reverse;

- (id<EdgeIteratorState>)setDistanceWithDouble:(jdouble)dist;

- (id<EdgeIteratorState>)setFlagsWithLong:(jlong)flags;

- (jboolean)next;

- (jint)getEdge;

- (jint)getBaseNode;

- (jint)getAdjNode;

- (jdouble)getDistance;

- (jlong)getFlags;

- (PointList *)fetchWayGeometryWithInt:(jint)type;

- (id<EdgeIteratorState>)setWayGeometryWithPointList:(PointList *)list;

- (NSString *)getName;

- (id<EdgeIteratorState>)setNameWithNSString:(NSString *)name;

- (jboolean)getBoolWithInt:(jint)key
               withBoolean:(jboolean)_default;

- (jboolean)isBackwardWithFlagEncoder:(id<FlagEncoder>)encoder;

- (jboolean)isForwardWithFlagEncoder:(id<FlagEncoder>)encoder;

- (jint)getAdditionalField;

- (id<EdgeIteratorState>)setAdditionalFieldWithInt:(jint)value;

- (id<EdgeIteratorState>)copyPropertiesToWithEdgeIteratorState:(id<EdgeIteratorState>)edge OBJC_METHOD_FAMILY_NONE;

- (jboolean)isShortcut;

- (jint)getSkippedEdge1;

- (jint)getSkippedEdge2;

- (void)setSkippedEdgesWithInt:(jint)edge1
                       withInt:(jint)edge2;

- (jdouble)getWeight;

- (id<CHEdgeIteratorState>)setWeightWithDouble:(jdouble)weight;

- (jboolean)canBeOverwrittenWithLong:(jlong)flags;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GHUtility_DisabledEdgeIterator)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(GHUtility_DisabledEdgeIterator)

@interface GHUtility_$3 : GHUtility_DisabledEdgeIterator {
}

- (jdouble)getDistance;

- (jlong)getFlags;

- (jboolean)getBoolWithInt:(jint)key
               withBoolean:(jboolean)_default;

- (instancetype)initWithDouble:(jdouble)capture$0
                      withLong:(jlong)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(GHUtility_$3)

CF_EXTERN_C_BEGIN
CF_EXTERN_C_END

J2OBJC_TYPE_LITERAL_HEADER(GHUtility_$3)

#endif // _GHUtility_H_
