//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: graphhopper/core/src/main/java/com/graphhopper/util/NumHelper.java
//

#include "J2ObjC_source.h"
#include "com/graphhopper/util/NumHelper.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@interface NumHelper () {
}
@end

@implementation NumHelper

+ (jboolean)equalsEpsWithDouble:(jdouble)d1
                     withDouble:(jdouble)d2 {
  return NumHelper_equalsEpsWithDouble_withDouble_(d1, d2);
}

+ (jboolean)equalsEpsWithDouble:(jdouble)d1
                     withDouble:(jdouble)d2
                     withDouble:(jdouble)epsilon {
  return NumHelper_equalsEpsWithDouble_withDouble_withDouble_(d1, d2, epsilon);
}

+ (jboolean)equalsWithDouble:(jdouble)d1
                  withDouble:(jdouble)d2 {
  return NumHelper_equalsWithDouble_withDouble_(d1, d2);
}

+ (jint)compareWithDouble:(jdouble)d1
               withDouble:(jdouble)d2 {
  return NumHelper_compareWithDouble_withDouble_(d1, d2);
}

+ (jboolean)equalsEpsWithFloat:(jfloat)d1
                     withFloat:(jfloat)d2 {
  return NumHelper_equalsEpsWithFloat_withFloat_(d1, d2);
}

+ (jboolean)equalsEpsWithFloat:(jfloat)d1
                     withFloat:(jfloat)d2
                     withFloat:(jfloat)epsilon {
  return NumHelper_equalsEpsWithFloat_withFloat_withFloat_(d1, d2, epsilon);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "equalsEpsWithDouble:withDouble:", "equalsEps", "Z", 0x9, NULL },
    { "equalsEpsWithDouble:withDouble:withDouble:", "equalsEps", "Z", 0x9, NULL },
    { "equalsWithDouble:withDouble:", "equals", "Z", 0x9, NULL },
    { "compareWithDouble:withDouble:", "compare", "I", 0x9, NULL },
    { "equalsEpsWithFloat:withFloat:", "equalsEps", "Z", 0x9, NULL },
    { "equalsEpsWithFloat:withFloat:withFloat:", "equalsEps", "Z", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_PRECISION_", NULL, 0x1a, "D", NULL, .constantValue.asDouble = NumHelper_DEFAULT_PRECISION },
  };
  static const J2ObjcClassInfo _NumHelper = { 1, "NumHelper", "com.graphhopper.util", NULL, 0x1, 7, methods, 1, fields, 0, NULL};
  return &_NumHelper;
}

@end

jboolean NumHelper_equalsEpsWithDouble_withDouble_(jdouble d1, jdouble d2) {
  NumHelper_init();
  return NumHelper_equalsEpsWithDouble_withDouble_withDouble_(d1, d2, NumHelper_DEFAULT_PRECISION);
}

jboolean NumHelper_equalsEpsWithDouble_withDouble_withDouble_(jdouble d1, jdouble d2, jdouble epsilon) {
  NumHelper_init();
  return JavaLangMath_absWithDouble_(d1 - d2) < epsilon;
}

jboolean NumHelper_equalsWithDouble_withDouble_(jdouble d1, jdouble d2) {
  NumHelper_init();
  return JavaLangDouble_compareWithDouble_withDouble_(d1, d2) == 0;
}

jint NumHelper_compareWithDouble_withDouble_(jdouble d1, jdouble d2) {
  NumHelper_init();
  return JavaLangDouble_compareWithDouble_withDouble_(d1, d2);
}

jboolean NumHelper_equalsEpsWithFloat_withFloat_(jfloat d1, jfloat d2) {
  NumHelper_init();
  return NumHelper_equalsEpsWithDouble_withDouble_withDouble_(d1, d2, NumHelper_DEFAULT_PRECISION);
}

jboolean NumHelper_equalsEpsWithFloat_withFloat_withFloat_(jfloat d1, jfloat d2, jfloat epsilon) {
  NumHelper_init();
  return JavaLangMath_absWithFloat_(d1 - d2) < epsilon;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(NumHelper)
